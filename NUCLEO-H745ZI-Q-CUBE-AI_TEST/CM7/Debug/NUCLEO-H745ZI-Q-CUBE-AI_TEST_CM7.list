
NUCLEO-H745ZI-Q-CUBE-AI_TEST_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1d0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00019044  0800b480  0800b480  0001b480  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080244c4  080244c4  00040a8c  2**0
                  CONTENTS
  4 .ARM          00000008  080244c4  080244c4  000344c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080244cc  080244cc  00040a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080244cc  080244cc  000344cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080244d0  080244d0  000344d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009cc  24000000  080244d4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240009cc  08024ea0  000409cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000a2c  08024f00  00040a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000694  24000a8c  08024f60  00040a8c  2**2
                  ALLOC
 12 ._user_heap_stack 00002400  20000000  20000000  00050000  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00040a8c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000301b5  00000000  00000000  00040aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000050ba  00000000  00000000  00070c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00010a87  00000000  00000000  00075d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000011a0  00000000  00000000  000867b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00001708  00000000  00000000  00087950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003db2b  00000000  00000000  00089058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001ea26  00000000  00000000  000c6b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00196892  00000000  00000000  000e55a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000ce  00000000  00000000  0027be3b  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000048fc  00000000  00000000  0027bf0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .stab         000000cc  00000000  00000000  00280808  2**2
                  CONTENTS, READONLY, DEBUGGING
 25 .stabstr      000001b9  00000000  00000000  002808d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000a8c 	.word	0x24000a8c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b458 	.word	0x0800b458

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000a90 	.word	0x24000a90
 80002dc:	0800b458 	.word	0x0800b458

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a6 	b.w	8000a6c <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468c      	mov	ip, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8083 	bne.w	80008be <__udivmoddi4+0x116>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d947      	bls.n	800084e <__udivmoddi4+0xa6>
 80007be:	fab2 f282 	clz	r2, r2
 80007c2:	b142      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	f1c2 0020 	rsb	r0, r2, #32
 80007c8:	fa24 f000 	lsr.w	r0, r4, r0
 80007cc:	4091      	lsls	r1, r2
 80007ce:	4097      	lsls	r7, r2
 80007d0:	ea40 0c01 	orr.w	ip, r0, r1
 80007d4:	4094      	lsls	r4, r2
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fbbc f6f8 	udiv	r6, ip, r8
 80007e0:	fa1f fe87 	uxth.w	lr, r7
 80007e4:	fb08 c116 	mls	r1, r8, r6, ip
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f10e 	mul.w	r1, r6, lr
 80007f0:	4299      	cmp	r1, r3
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x60>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fa:	f080 8119 	bcs.w	8000a30 <__udivmoddi4+0x288>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 8116 	bls.w	8000a30 <__udivmoddi4+0x288>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x8c>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f100 33ff 	add.w	r3, r0, #4294967295
 8000826:	f080 8105 	bcs.w	8000a34 <__udivmoddi4+0x28c>
 800082a:	45a6      	cmp	lr, r4
 800082c:	f240 8102 	bls.w	8000a34 <__udivmoddi4+0x28c>
 8000830:	3802      	subs	r0, #2
 8000832:	443c      	add	r4, r7
 8000834:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	2600      	movs	r6, #0
 800083e:	b11d      	cbz	r5, 8000848 <__udivmoddi4+0xa0>
 8000840:	40d4      	lsrs	r4, r2
 8000842:	2300      	movs	r3, #0
 8000844:	e9c5 4300 	strd	r4, r3, [r5]
 8000848:	4631      	mov	r1, r6
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	b902      	cbnz	r2, 8000852 <__udivmoddi4+0xaa>
 8000850:	deff      	udf	#255	; 0xff
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	2a00      	cmp	r2, #0
 8000858:	d150      	bne.n	80008fc <__udivmoddi4+0x154>
 800085a:	1bcb      	subs	r3, r1, r7
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f f887 	uxth.w	r8, r7
 8000864:	2601      	movs	r6, #1
 8000866:	fbb3 fcfe 	udiv	ip, r3, lr
 800086a:	0c21      	lsrs	r1, r4, #16
 800086c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb08 f30c 	mul.w	r3, r8, ip
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0xe4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0xe2>
 8000884:	428b      	cmp	r3, r1
 8000886:	f200 80e9 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 800088a:	4684      	mov	ip, r0
 800088c:	1ac9      	subs	r1, r1, r3
 800088e:	b2a3      	uxth	r3, r4
 8000890:	fbb1 f0fe 	udiv	r0, r1, lr
 8000894:	fb0e 1110 	mls	r1, lr, r0, r1
 8000898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800089c:	fb08 f800 	mul.w	r8, r8, r0
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x10c>
 80008a4:	193c      	adds	r4, r7, r4
 80008a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x10a>
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	f200 80d9 	bhi.w	8000a64 <__udivmoddi4+0x2bc>
 80008b2:	4618      	mov	r0, r3
 80008b4:	eba4 0408 	sub.w	r4, r4, r8
 80008b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008bc:	e7bf      	b.n	800083e <__udivmoddi4+0x96>
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <__udivmoddi4+0x282>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x1cc>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b8 	bhi.w	8000a58 <__udivmoddi4+0x2b0>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0103 	sbc.w	r1, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	468c      	mov	ip, r1
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0a8      	beq.n	8000848 <__udivmoddi4+0xa0>
 80008f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0xa0>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f603 	lsr.w	r6, r0, r3
 8000904:	4097      	lsls	r7, r2
 8000906:	fa01 f002 	lsl.w	r0, r1, r2
 800090a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090e:	40d9      	lsrs	r1, r3
 8000910:	4330      	orrs	r0, r6
 8000912:	0c03      	lsrs	r3, r0, #16
 8000914:	fbb1 f6fe 	udiv	r6, r1, lr
 8000918:	fa1f f887 	uxth.w	r8, r7
 800091c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000924:	fb06 f108 	mul.w	r1, r6, r8
 8000928:	4299      	cmp	r1, r3
 800092a:	fa04 f402 	lsl.w	r4, r4, r2
 800092e:	d909      	bls.n	8000944 <__udivmoddi4+0x19c>
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	f106 3cff 	add.w	ip, r6, #4294967295
 8000936:	f080 808d 	bcs.w	8000a54 <__udivmoddi4+0x2ac>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 808a 	bls.w	8000a54 <__udivmoddi4+0x2ac>
 8000940:	3e02      	subs	r6, #2
 8000942:	443b      	add	r3, r7
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b281      	uxth	r1, r0
 8000948:	fbb3 f0fe 	udiv	r0, r3, lr
 800094c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb00 f308 	mul.w	r3, r0, r8
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000962:	d273      	bcs.n	8000a4c <__udivmoddi4+0x2a4>
 8000964:	428b      	cmp	r3, r1
 8000966:	d971      	bls.n	8000a4c <__udivmoddi4+0x2a4>
 8000968:	3802      	subs	r0, #2
 800096a:	4439      	add	r1, r7
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000972:	e778      	b.n	8000866 <__udivmoddi4+0xbe>
 8000974:	f1c6 0c20 	rsb	ip, r6, #32
 8000978:	fa03 f406 	lsl.w	r4, r3, r6
 800097c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000980:	431c      	orrs	r4, r3
 8000982:	fa20 f70c 	lsr.w	r7, r0, ip
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800098e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000992:	431f      	orrs	r7, r3
 8000994:	0c3b      	lsrs	r3, r7, #16
 8000996:	fbb1 f9fe 	udiv	r9, r1, lr
 800099a:	fa1f f884 	uxth.w	r8, r4
 800099e:	fb0e 1119 	mls	r1, lr, r9, r1
 80009a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a6:	fb09 fa08 	mul.w	sl, r9, r8
 80009aa:	458a      	cmp	sl, r1
 80009ac:	fa02 f206 	lsl.w	r2, r2, r6
 80009b0:	fa00 f306 	lsl.w	r3, r0, r6
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x220>
 80009b6:	1861      	adds	r1, r4, r1
 80009b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009bc:	d248      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 80009be:	458a      	cmp	sl, r1
 80009c0:	d946      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 80009c2:	f1a9 0902 	sub.w	r9, r9, #2
 80009c6:	4421      	add	r1, r4
 80009c8:	eba1 010a 	sub.w	r1, r1, sl
 80009cc:	b2bf      	uxth	r7, r7
 80009ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009da:	fb00 f808 	mul.w	r8, r0, r8
 80009de:	45b8      	cmp	r8, r7
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x24a>
 80009e2:	19e7      	adds	r7, r4, r7
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009e8:	d22e      	bcs.n	8000a48 <__udivmoddi4+0x2a0>
 80009ea:	45b8      	cmp	r8, r7
 80009ec:	d92c      	bls.n	8000a48 <__udivmoddi4+0x2a0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4427      	add	r7, r4
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	eba7 0708 	sub.w	r7, r7, r8
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	454f      	cmp	r7, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	d31a      	bcc.n	8000a3c <__udivmoddi4+0x294>
 8000a06:	d017      	beq.n	8000a38 <__udivmoddi4+0x290>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x27a>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a16:	40f2      	lsrs	r2, r6
 8000a18:	ea4c 0202 	orr.w	r2, ip, r2
 8000a1c:	40f7      	lsrs	r7, r6
 8000a1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462e      	mov	r6, r5
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e70b      	b.n	8000848 <__udivmoddi4+0xa0>
 8000a30:	4606      	mov	r6, r0
 8000a32:	e6e9      	b.n	8000808 <__udivmoddi4+0x60>
 8000a34:	4618      	mov	r0, r3
 8000a36:	e6fd      	b.n	8000834 <__udivmoddi4+0x8c>
 8000a38:	4543      	cmp	r3, r8
 8000a3a:	d2e5      	bcs.n	8000a08 <__udivmoddi4+0x260>
 8000a3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a40:	eb69 0104 	sbc.w	r1, r9, r4
 8000a44:	3801      	subs	r0, #1
 8000a46:	e7df      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e7d2      	b.n	80009f2 <__udivmoddi4+0x24a>
 8000a4c:	4660      	mov	r0, ip
 8000a4e:	e78d      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a50:	4681      	mov	r9, r0
 8000a52:	e7b9      	b.n	80009c8 <__udivmoddi4+0x220>
 8000a54:	4666      	mov	r6, ip
 8000a56:	e775      	b.n	8000944 <__udivmoddi4+0x19c>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	e74a      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	4439      	add	r1, r7
 8000a62:	e713      	b.n	800088c <__udivmoddi4+0xe4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	e724      	b.n	80008b4 <__udivmoddi4+0x10c>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a70:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <SystemInit+0xb0>)
 8000a72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000a76:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7e:	691a      	ldr	r2, [r3, #16]
 8000a80:	f042 0210 	orr.w	r2, r2, #16
 8000a84:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a86:	4a27      	ldr	r2, [pc, #156]	; (8000b24 <SystemInit+0xb4>)
 8000a88:	6813      	ldr	r3, [r2, #0]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d805      	bhi.n	8000a9e <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a92:	6813      	ldr	r3, [r2, #0]
 8000a94:	f023 030f 	bic.w	r3, r3, #15
 8000a98:	f043 0307 	orr.w	r3, r3, #7
 8000a9c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a9e:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <SystemInit+0xb8>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	f042 0201 	orr.w	r2, r2, #1
 8000aa6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000aac:	4a1f      	ldr	r2, [pc, #124]	; (8000b2c <SystemInit+0xbc>)
 8000aae:	6819      	ldr	r1, [r3, #0]
 8000ab0:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ab2:	491c      	ldr	r1, [pc, #112]	; (8000b24 <SystemInit+0xb4>)
  RCC->CR &= 0xEAF6ED7FU;
 8000ab4:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ab6:	680a      	ldr	r2, [r1, #0]
 8000ab8:	0712      	lsls	r2, r2, #28
 8000aba:	d505      	bpl.n	8000ac8 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000abc:	680a      	ldr	r2, [r1, #0]
 8000abe:	f022 020f 	bic.w	r2, r2, #15
 8000ac2:	f042 0207 	orr.w	r2, r2, #7
 8000ac6:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ac8:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000aca:	4919      	ldr	r1, [pc, #100]	; (8000b30 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 8000acc:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8000ace:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000ad0:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000ad2:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ad4:	4917      	ldr	r1, [pc, #92]	; (8000b34 <SystemInit+0xc4>)
 8000ad6:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ad8:	4917      	ldr	r1, [pc, #92]	; (8000b38 <SystemInit+0xc8>)
 8000ada:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000adc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ade:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ae0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ae2:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ae4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ae6:	6819      	ldr	r1, [r3, #0]
 8000ae8:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000aec:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000aee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000af0:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <SystemInit+0xcc>)
 8000af2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af8:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <SystemInit+0xd0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	0c1b      	lsrs	r3, r3, #16
 8000b00:	041b      	lsls	r3, r3, #16
 8000b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b06:	d202      	bcs.n	8000b0e <SystemInit+0x9e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <SystemInit+0xd4>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <SystemInit+0xd8>)
 8000b10:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b14:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000b16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b1a:	4b01      	ldr	r3, [pc, #4]	; (8000b20 <SystemInit+0xb0>)
 8000b1c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00
 8000b24:	52002000 	.word	0x52002000
 8000b28:	58024400 	.word	0x58024400
 8000b2c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b30:	02020200 	.word	0x02020200
 8000b34:	01ff0000 	.word	0x01ff0000
 8000b38:	01010280 	.word	0x01010280
 8000b3c:	580000c0 	.word	0x580000c0
 8000b40:	5c001000 	.word	0x5c001000
 8000b44:	51008108 	.word	0x51008108
 8000b48:	52004000 	.word	0x52004000

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b500      	push	{lr}
 8000b4e:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b50:	224c      	movs	r2, #76	; 0x4c
 8000b52:	2100      	movs	r1, #0
 8000b54:	a809      	add	r0, sp, #36	; 0x24
 8000b56:	f006 f8f7 	bl	8006d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5a:	2220      	movs	r2, #32
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	a801      	add	r0, sp, #4
 8000b60:	f006 f8f2 	bl	8006d48 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b64:	2004      	movs	r0, #4
 8000b66:	f001 fa03 	bl	8001f70 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <SystemClock_Config+0xc0>)
 8000b70:	699a      	ldr	r2, [r3, #24]
 8000b72:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000b76:	619a      	str	r2, [r3, #24]
 8000b78:	699a      	ldr	r2, [r3, #24]
 8000b7a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000b7e:	9200      	str	r2, [sp, #0]
 8000b80:	4a23      	ldr	r2, [pc, #140]	; (8000c10 <SystemClock_Config+0xc4>)
 8000b82:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000b84:	f041 0101 	orr.w	r1, r1, #1
 8000b88:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000b8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000b8c:	f002 0201 	and.w	r2, r2, #1
 8000b90:	9200      	str	r2, [sp, #0]
 8000b92:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b94:	699a      	ldr	r2, [r3, #24]
 8000b96:	0492      	lsls	r2, r2, #18
 8000b98:	d5fc      	bpl.n	8000b94 <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000b9a:	4a1e      	ldr	r2, [pc, #120]	; (8000c14 <SystemClock_Config+0xc8>)
  RCC_OscInitStruct.PLL.PLLN = 120;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b9c:	200c      	movs	r0, #12
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000b9e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000ba0:	f023 0303 	bic.w	r3, r3, #3
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000baa:	2201      	movs	r2, #1
 8000bac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bb0:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bb2:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb6:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000bb8:	2278      	movs	r2, #120	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bba:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bbe:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bc2:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bcc:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bce:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd0:	f001 fa12 	bl	8001ff8 <HAL_RCC_OscConfig>
 8000bd4:	b108      	cbz	r0, 8000bda <SystemClock_Config+0x8e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <SystemClock_Config+0x8c>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bda:	223f      	movs	r2, #63	; 0x3f
 8000bdc:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bde:	2108      	movs	r1, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000be0:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be2:	e9cd 2301 	strd	r2, r3, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000be6:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000be8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bec:	e9cd 1304 	strd	r1, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bf0:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bf2:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bf4:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bf8:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bfc:	f001 fd34 	bl	8002668 <HAL_RCC_ClockConfig>
 8000c00:	b108      	cbz	r0, 8000c06 <SystemClock_Config+0xba>
 8000c02:	b672      	cpsid	i
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <SystemClock_Config+0xb8>
}
 8000c06:	b01d      	add	sp, #116	; 0x74
 8000c08:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c0c:	58024800 	.word	0x58024800
 8000c10:	58000400 	.word	0x58000400
 8000c14:	58024400 	.word	0x58024400

08000c18 <main>:
{
 8000c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c1c:	ed2d 8b06 	vpush	{d8-d10}
 8000c20:	f6ad 1d0c 	subw	sp, sp, #2316	; 0x90c
 8000c24:	f10d 048f 	add.w	r4, sp, #143	; 0x8f
int main(void)
 8000c28:	f60d 1348 	addw	r3, sp, #2376	; 0x948
{
 8000c2c:	f024 041f 	bic.w	r4, r4, #31
int main(void)
 8000c30:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c34:	4bb8      	ldr	r3, [pc, #736]	; (8000f18 <main+0x300>)
 8000c36:	695a      	ldr	r2, [r3, #20]
 8000c38:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8000c3c:	d111      	bne.n	8000c62 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c42:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c46:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c4e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c52:	695a      	ldr	r2, [r3, #20]
 8000c54:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c58:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c5e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c62:	4aad      	ldr	r2, [pc, #692]	; (8000f18 <main+0x300>)
 8000c64:	6953      	ldr	r3, [r2, #20]
 8000c66:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000c6a:	d123      	bne.n	8000cb4 <main+0x9c>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000c6c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c70:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c74:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c78:	f643 75e0 	movw	r5, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c7c:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000c80:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000c84:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c86:	ea03 0705 	and.w	r7, r3, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c8a:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c8c:	ea47 7681 	orr.w	r6, r7, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c90:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c92:	f8c2 6260 	str.w	r6, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000c96:	d2f9      	bcs.n	8000c8c <main+0x74>
    } while(sets-- != 0U);
 8000c98:	3b20      	subs	r3, #32
 8000c9a:	f113 0f20 	cmn.w	r3, #32
 8000c9e:	d1f2      	bne.n	8000c86 <main+0x6e>
 8000ca0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ca4:	6953      	ldr	r3, [r2, #20]
 8000ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000caa:	6153      	str	r3, [r2, #20]
 8000cac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cb0:	f3bf 8f6f 	isb	sy
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000cb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb8:	4e98      	ldr	r6, [pc, #608]	; (8000f1c <main+0x304>)
 8000cba:	6835      	ldr	r5, [r6, #0]
 8000cbc:	f415 4500 	ands.w	r5, r5, #32768	; 0x8000
 8000cc0:	f000 81f2 	beq.w	80010a8 <main+0x490>
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	d1f8      	bne.n	8000cba <main+0xa2>
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
  while (1)
 8000cca:	e7fe      	b.n	8000cca <main+0xb2>
 8000ccc:	b672      	cpsid	i
 8000cce:	e7fe      	b.n	8000cce <main+0xb6>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	f003 f976 	bl	8003fc2 <HAL_UARTEx_SetTxFifoThreshold>
 8000cd6:	4601      	mov	r1, r0
 8000cd8:	b108      	cbz	r0, 8000cde <main+0xc6>
 8000cda:	b672      	cpsid	i
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <main+0xc4>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cde:	4628      	mov	r0, r5
 8000ce0:	f003 f993 	bl	800400a <HAL_UARTEx_SetRxFifoThreshold>
 8000ce4:	b108      	cbz	r0, 8000cea <main+0xd2>
 8000ce6:	b672      	cpsid	i
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <main+0xd0>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cea:	4628      	mov	r0, r5
 8000cec:	f003 f94e 	bl	8003f8c <HAL_UARTEx_DisableFifoMode>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	b108      	cbz	r0, 8000cf8 <main+0xe0>
 8000cf4:	b672      	cpsid	i
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <main+0xde>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cf8:	4889      	ldr	r0, [pc, #548]	; (8000f20 <main+0x308>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000cfa:	2209      	movs	r2, #9
 8000cfc:	4989      	ldr	r1, [pc, #548]	; (8000f24 <main+0x30c>)
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cfe:	6303      	str	r3, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000d00:	e9c0 1200 	strd	r1, r2, [r0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d04:	2202      	movs	r2, #2
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d06:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d0a:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d0e:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d12:	e9c0 770a 	strd	r7, r7, [r0, #40]	; 0x28
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d16:	f001 f88f 	bl	8001e38 <HAL_PCD_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	b108      	cbz	r0, 8000d22 <main+0x10a>
 8000d1e:	b672      	cpsid	i
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <main+0x108>
  hcrc.Instance = CRC;
 8000d22:	4881      	ldr	r0, [pc, #516]	; (8000f28 <main+0x310>)
 8000d24:	4a81      	ldr	r2, [pc, #516]	; (8000f2c <main+0x314>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d26:	8083      	strh	r3, [r0, #4]
  hcrc.Instance = CRC;
 8000d28:	6002      	str	r2, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d2a:	6207      	str	r7, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d2c:	e9c0 3305 	strd	r3, r3, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d30:	f000 fcb8 	bl	80016a4 <HAL_CRC_Init>
 8000d34:	b108      	cbz	r0, 8000d3a <main+0x122>
 8000d36:	b672      	cpsid	i
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <main+0x120>
  htim16.Instance = TIM16;
 8000d3a:	4d7d      	ldr	r5, [pc, #500]	; (8000f30 <main+0x318>)
  htim16.Init.Prescaler = 240-1;
 8000d3c:	23ef      	movs	r3, #239	; 0xef
 8000d3e:	4a7d      	ldr	r2, [pc, #500]	; (8000f34 <main+0x31c>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d40:	60a8      	str	r0, [r5, #8]
  htim16.Init.Prescaler = 240-1;
 8000d42:	e9c5 2300 	strd	r2, r3, [r5]
  htim16.Init.Period = 65535-1;
 8000d46:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4a:	e9c5 0005 	strd	r0, r0, [r5, #20]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4e:	e9c5 3003 	strd	r3, r0, [r5, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d52:	4628      	mov	r0, r5
 8000d54:	f002 fd98 	bl	8003888 <HAL_TIM_Base_Init>
 8000d58:	4680      	mov	r8, r0
 8000d5a:	b108      	cbz	r0, 8000d60 <main+0x148>
 8000d5c:	b672      	cpsid	i
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <main+0x146>
	ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 8000d60:	4e75      	ldr	r6, [pc, #468]	; (8000f38 <main+0x320>)
 8000d62:	f104 0960 	add.w	r9, r4, #96	; 0x60
	int buf_len = 0;
 8000d66:	6420      	str	r0, [r4, #64]	; 0x40
	HAL_TIM_Base_Start(&htim16);
 8000d68:	4628      	mov	r0, r5
 8000d6a:	f002 fcf1 	bl	8003750 <HAL_TIM_Base_Start>
	ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 8000d6e:	f104 0c60 	add.w	ip, r4, #96	; 0x60
	ai_network_params ai_params = {AI_NETWORK_PARAMS_INIT(
 8000d72:	f8ad 7048 	strh.w	r7, [sp, #72]	; 0x48
 8000d76:	f104 0a48 	add.w	sl, r4, #72	; 0x48
	ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 8000d7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 8000d80:	f1a6 0e10 	sub.w	lr, r6, #16
	ai_input[0].n_batches = 1;
 8000d84:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
	ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 8000d88:	e896 0003 	ldmia.w	r6, {r0, r1}
 8000d8c:	e88c 0003 	stmia.w	ip, {r0, r1}
	ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 8000d90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000d94:	f104 0c48 	add.w	ip, r4, #72	; 0x48
 8000d98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000d9c:	f104 0320 	add.w	r3, r4, #32
	ai_output[0].n_batches = 1;
 8000da0:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
	ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 8000da4:	e896 0003 	ldmia.w	r6, {r0, r1}
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000da8:	6723      	str	r3, [r4, #112]	; 0x70
	ai_network_params ai_params = {AI_NETWORK_PARAMS_INIT(
 8000daa:	f04f 1601 	mov.w	r6, #65537	; 0x10001
 8000dae:	4b63      	ldr	r3, [pc, #396]	; (8000f3c <main+0x324>)
 8000db0:	e9cd 3610 	strd	r3, r6, [sp, #64]	; 0x40
 8000db4:	4b62      	ldr	r3, [pc, #392]	; (8000f40 <main+0x328>)
	ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 8000db6:	e88c 0003 	stmia.w	ip, {r0, r1}
	ai_network_params ai_params = {AI_NETWORK_PARAMS_INIT(
 8000dba:	9313      	str	r3, [sp, #76]	; 0x4c
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000dbc:	65a4      	str	r4, [r4, #88]	; 0x58
	ai_network_params ai_params = {AI_NETWORK_PARAMS_INIT(
 8000dbe:	f003 fb6d 	bl	800449c <ai_sine_model_data_weights_get>
 8000dc2:	4b60      	ldr	r3, [pc, #384]	; (8000f44 <main+0x32c>)
	ai_error ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 8000dc4:	4641      	mov	r1, r8
	ai_network_params ai_params = {AI_NETWORK_PARAMS_INIT(
 8000dc6:	f8ad 7060 	strh.w	r7, [sp, #96]	; 0x60
 8000dca:	e9cd 3616 	strd	r3, r6, [sp, #88]	; 0x58
 8000dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd2:	f104 0678 	add.w	r6, r4, #120	; 0x78
 8000dd6:	9319      	str	r3, [sp, #100]	; 0x64
 8000dd8:	f504 6390 	add.w	r3, r4, #1152	; 0x480
 8000ddc:	e9cd 0814 	strd	r0, r8, [sp, #80]	; 0x50
	ai_error ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 8000de0:	4859      	ldr	r0, [pc, #356]	; (8000f48 <main+0x330>)
	ai_network_params ai_params = {AI_NETWORK_PARAMS_INIT(
 8000de2:	e9cd 381a 	strd	r3, r8, [sp, #104]	; 0x68
	ai_error ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 8000de6:	f003 faa3 	bl	8004330 <ai_sine_model_create>
	if (ai_err.type != AI_ERROR_NONE)
 8000dea:	f010 0fff 	tst.w	r0, #255	; 0xff
 8000dee:	d00b      	beq.n	8000e08 <main+0x1f0>
		buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000df0:	4956      	ldr	r1, [pc, #344]	; (8000f4c <main+0x334>)
 8000df2:	4630      	mov	r0, r6
 8000df4:	f006 fed2 	bl	8007b9c <strcpy>
 8000df8:	2225      	movs	r2, #37	; 0x25
		HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000dfa:	2364      	movs	r3, #100	; 0x64
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	4854      	ldr	r0, [pc, #336]	; (8000f50 <main+0x338>)
		buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000e00:	6422      	str	r2, [r4, #64]	; 0x40
		HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000e02:	f002 ffde 	bl	8003dc2 <HAL_UART_Transmit>
		while(1);
 8000e06:	e7fe      	b.n	8000e06 <main+0x1ee>
	if (!ai_sine_model_init(sine_model, &ai_params))
 8000e08:	4f4f      	ldr	r7, [pc, #316]	; (8000f48 <main+0x330>)
 8000e0a:	a910      	add	r1, sp, #64	; 0x40
 8000e0c:	6838      	ldr	r0, [r7, #0]
 8000e0e:	f003 fa9d 	bl	800434c <ai_sine_model_init>
 8000e12:	9707      	str	r7, [sp, #28]
 8000e14:	b958      	cbnz	r0, 8000e2e <main+0x216>
		buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8000e16:	494f      	ldr	r1, [pc, #316]	; (8000f54 <main+0x33c>)
 8000e18:	4630      	mov	r0, r6
 8000e1a:	f006 febf 	bl	8007b9c <strcpy>
 8000e1e:	2220      	movs	r2, #32
		HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000e20:	2364      	movs	r3, #100	; 0x64
 8000e22:	4631      	mov	r1, r6
 8000e24:	484a      	ldr	r0, [pc, #296]	; (8000f50 <main+0x338>)
		buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8000e26:	6422      	str	r2, [r4, #64]	; 0x40
		HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000e28:	f002 ffcb 	bl	8003dc2 <HAL_UART_Transmit>
		while(1);
 8000e2c:	e7fe      	b.n	8000e2c <main+0x214>
	buf_len = sprintf(buf, "\n\nSTM32 TensorFlow Lite test\r\n");
 8000e2e:	494a      	ldr	r1, [pc, #296]	; (8000f58 <main+0x340>)
 8000e30:	4630      	mov	r0, r6
 8000e32:	f006 feb3 	bl	8007b9c <strcpy>
 8000e36:	221e      	movs	r2, #30
	HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000e38:	2364      	movs	r3, #100	; 0x64
 8000e3a:	4631      	mov	r1, r6
 8000e3c:	4844      	ldr	r0, [pc, #272]	; (8000f50 <main+0x338>)
	buf_len = sprintf(buf, "\n\nSTM32 TensorFlow Lite test\r\n");
 8000e3e:	6422      	str	r2, [r4, #64]	; 0x40
	HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000e40:	f002 ffbf 	bl	8003dc2 <HAL_UART_Transmit>
			buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8000e44:	f8df b120 	ldr.w	fp, [pc, #288]	; 8000f68 <main+0x350>
	int idx = 0;
 8000e48:	2300      	movs	r3, #0
			HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000e4a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8000f50 <main+0x338>
	in_val = ((idx++)%16)*M_PI*0.125;
 8000e4e:	ed9f 9b30 	vldr	d9, [pc, #192]	; 8000f10 <main+0x2f8>
 8000e52:	1c5a      	adds	r2, r3, #1
 8000e54:	f003 030f 	and.w	r3, r3, #15
 8000e58:	eeb4 6b00 	vmov.f64	d6, #64	; 0x3e000000  0.125
 8000e5c:	ee07 3a10 	vmov	s14, r3
 8000e60:	9206      	str	r2, [sp, #24]
 8000e62:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000e66:	ee27 7b09 	vmul.f64	d7, d7, d9
 8000e6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e6e:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
	actual_out = sin(in_val);
 8000e72:	eeb7 aac8 	vcvt.f64.f32	d10, s16
 8000e76:	eeb0 0b4a 	vmov.f64	d0, d10
 8000e7a:	f005 f941 	bl	8006100 <sin>
	time_stamp_last = __HAL_TIM_GET_COUNTER(&htim16);
 8000e7e:	682b      	ldr	r3, [r5, #0]
		n_batch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 8000e80:	4652      	mov	r2, sl
 8000e82:	4649      	mov	r1, r9
	time_stamp_last = __HAL_TIM_GET_COUNTER(&htim16);
 8000e84:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	actual_out = sin(in_val);
 8000e86:	eef7 8bc0 	vcvt.f32.f64	s17, d0
		n_batch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 8000e8a:	9b07      	ldr	r3, [sp, #28]
			((ai_float *)in_data)[i] = (ai_float)input;
 8000e8c:	ed84 8a08 	vstr	s16, [r4, #32]
		n_batch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	f003 fb01 	bl	8004498 <ai_sine_model_run>
		if (n_batch != 1)
 8000e96:	2801      	cmp	r0, #1
		n_batch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 8000e98:	6460      	str	r0, [r4, #68]	; 0x44
		if (n_batch != 1)
 8000e9a:	d033      	beq.n	8000f04 <main+0x2ec>
			buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8000e9c:	4659      	mov	r1, fp
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	f006 fe7c 	bl	8007b9c <strcpy>
 8000ea4:	2220      	movs	r2, #32
			HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000ea6:	2364      	movs	r3, #100	; 0x64
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	4640      	mov	r0, r8
			buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8000eac:	6422      	str	r2, [r4, #64]	; 0x40
			HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000eae:	f002 ff88 	bl	8003dc2 <HAL_UART_Transmit>
			return 0;
 8000eb2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000f5c <main+0x344>
	time_stamp = __HAL_TIM_GET_COUNTER(&htim16);
 8000eb6:	682b      	ldr	r3, [r5, #0]
	buf_len = sprintf(buf, "in_val: %f | predicted_out: %f | actual_out: %f | Inference Time: %lu us\r\n", in_val, predicted_out, actual_out, time_val);
 8000eb8:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 8000ebc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8000ec0:	4927      	ldr	r1, [pc, #156]	; (8000f60 <main+0x348>)
	time_stamp = __HAL_TIM_GET_COUNTER(&htim16);
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	buf_len = sprintf(buf, "in_val: %f | predicted_out: %f | actual_out: %f | Inference Time: %lu us\r\n", in_val, predicted_out, actual_out, time_val);
 8000ec4:	4630      	mov	r0, r6
	time_val = (time_stamp_last>time_stamp) ? htim16.Init.Period-time_stamp_last+time_stamp : time_stamp-time_stamp_last;
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	bf84      	itt	hi
 8000eca:	68ea      	ldrhi	r2, [r5, #12]
 8000ecc:	189b      	addhi	r3, r3, r2
 8000ece:	1bdf      	subs	r7, r3, r7
	buf_len = sprintf(buf, "in_val: %f | predicted_out: %f | actual_out: %f | Inference Time: %lu us\r\n", in_val, predicted_out, actual_out, time_val);
 8000ed0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8000ed4:	ed8d 7b00 	vstr	d7, [sp]
 8000ed8:	ec53 2b1a 	vmov	r2, r3, d10
 8000edc:	9704      	str	r7, [sp, #16]
 8000ede:	f006 fe3d 	bl	8007b5c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000ee2:	2364      	movs	r3, #100	; 0x64
 8000ee4:	b282      	uxth	r2, r0
 8000ee6:	4631      	mov	r1, r6
	buf_len = sprintf(buf, "in_val: %f | predicted_out: %f | actual_out: %f | Inference Time: %lu us\r\n", in_val, predicted_out, actual_out, time_val);
 8000ee8:	6420      	str	r0, [r4, #64]	; 0x40
	HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000eea:	4640      	mov	r0, r8
 8000eec:	f002 ff69 	bl	8003dc2 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	481c      	ldr	r0, [pc, #112]	; (8000f64 <main+0x34c>)
 8000ef4:	f000 ff81 	bl	8001dfa <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000ef8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000efc:	f000 fb56 	bl	80015ac <HAL_Delay>
	in_val = ((idx++)%16)*M_PI*0.125;
 8000f00:	9b06      	ldr	r3, [sp, #24]
 8000f02:	e7a6      	b.n	8000e52 <main+0x23a>
		return ((float *)out_data)[0];
 8000f04:	ed94 7a00 	vldr	s14, [r4]
 8000f08:	e7d5      	b.n	8000eb6 <main+0x29e>
 8000f0a:	bf00      	nop
 8000f0c:	f3af 8000 	nop.w
 8000f10:	54442d18 	.word	0x54442d18
 8000f14:	400921fb 	.word	0x400921fb
 8000f18:	e000ed00 	.word	0xe000ed00
 8000f1c:	58024400 	.word	0x58024400
 8000f20:	24000bd8 	.word	0x24000bd8
 8000f24:	40080000 	.word	0x40080000
 8000f28:	24000fe0 	.word	0x24000fe0
 8000f2c:	58024c00 	.word	0x58024c00
 8000f30:	240010c0 	.word	0x240010c0
 8000f34:	40014400 	.word	0x40014400
 8000f38:	0800b480 	.word	0x0800b480
 8000f3c:	40040440 	.word	0x40040440
 8000f40:	00018804 	.word	0x00018804
 8000f44:	00040440 	.word	0x00040440
 8000f48:	24000ab0 	.word	0x24000ab0
 8000f4c:	0800b4ac 	.word	0x0800b4ac
 8000f50:	24000b48 	.word	0x24000b48
 8000f54:	0800b4d2 	.word	0x0800b4d2
 8000f58:	0800b4f3 	.word	0x0800b4f3
 8000f5c:	00000000 	.word	0x00000000
 8000f60:	0800b533 	.word	0x0800b533
 8000f64:	58020400 	.word	0x58020400
 8000f68:	0800b512 	.word	0x0800b512
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	2214      	movs	r2, #20
 8000f6e:	2100      	movs	r1, #0
 8000f70:	a810      	add	r0, sp, #64	; 0x40
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000f72:	2701      	movs	r7, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f005 fee8 	bl	8006d48 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f78:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2101      	movs	r1, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f80:	f043 0304 	orr.w	r3, r3, #4
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000f84:	4859      	ldr	r0, [pc, #356]	; (80010ec <main+0x4d4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000f8a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	930a      	str	r3, [sp, #40]	; 0x28
 8000f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f96:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f9e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000fa2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000faa:	930b      	str	r3, [sp, #44]	; 0x2c
 8000fac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000fba:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	930c      	str	r3, [sp, #48]	; 0x30
 8000fc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000fca:	f043 0302 	orr.w	r3, r3, #2
 8000fce:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000fd2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	930d      	str	r3, [sp, #52]	; 0x34
 8000fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fde:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000fe2:	f043 0308 	orr.w	r3, r3, #8
 8000fe6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000fea:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	930e      	str	r3, [sp, #56]	; 0x38
 8000ff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ffe:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8001002:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2500      	movs	r5, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100c:	930f      	str	r3, [sp, #60]	; 0x3c
 800100e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001010:	f000 feee 	bl	8001df0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001014:	a910      	add	r1, sp, #64	; 0x40
 8001016:	4835      	ldr	r0, [pc, #212]	; (80010ec <main+0x4d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001020:	f000 fe00 	bl	8001c24 <HAL_GPIO_Init>
  heth.Instance = ETH;
 8001024:	4832      	ldr	r0, [pc, #200]	; (80010f0 <main+0x4d8>)
 8001026:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <main+0x4dc>)
  MACAddr[1] = 0x80;
 8001028:	2280      	movs	r2, #128	; 0x80
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800102a:	7207      	strb	r7, [r0, #8]
  heth.Instance = ETH;
 800102c:	6003      	str	r3, [r0, #0]
  MACAddr[0] = 0x00;
 800102e:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <main+0x4e0>)
  MACAddr[1] = 0x80;
 8001030:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001032:	22e1      	movs	r2, #225	; 0xe1
  MACAddr[0] = 0x00;
 8001034:	701d      	strb	r5, [r3, #0]
  MACAddr[2] = 0xE1;
 8001036:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001038:	70dd      	strb	r5, [r3, #3]
  MACAddr[4] = 0x00;
 800103a:	711d      	strb	r5, [r3, #4]
  MACAddr[5] = 0x00;
 800103c:	715d      	strb	r5, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800103e:	6043      	str	r3, [r0, #4]
  heth.Init.TxDesc = DMATxDscrTab;
 8001040:	4b2e      	ldr	r3, [pc, #184]	; (80010fc <main+0x4e4>)
 8001042:	60c3      	str	r3, [r0, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001044:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <main+0x4e8>)
 8001046:	6103      	str	r3, [r0, #16]
  heth.Init.RxBuffLen = 1524;
 8001048:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800104c:	6143      	str	r3, [r0, #20]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 800104e:	f000 fce1 	bl	8001a14 <HAL_ETH_Init>
 8001052:	4606      	mov	r6, r0
 8001054:	2800      	cmp	r0, #0
 8001056:	f47f ae39 	bne.w	8000ccc <main+0xb4>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800105a:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <main+0x4ec>)
 800105c:	2230      	movs	r2, #48	; 0x30
 800105e:	4631      	mov	r1, r6
  huart3.Instance = USART3;
 8001060:	4d29      	ldr	r5, [pc, #164]	; (8001108 <main+0x4f0>)
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001062:	4618      	mov	r0, r3
 8001064:	f005 fe70 	bl	8006d48 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001068:	2121      	movs	r1, #33	; 0x21
 800106a:	1f02      	subs	r2, r0, #4
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800106c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001070:	f840 1c04 	str.w	r1, [r0, #-4]
  huart3.Init.BaudRate = 115200;
 8001074:	4825      	ldr	r0, [pc, #148]	; (800110c <main+0x4f4>)
  huart3.Init.Parity = UART_PARITY_NONE;
 8001076:	612e      	str	r6, [r5, #16]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001078:	e9c2 6304 	strd	r6, r3, [r2, #16]
  huart3.Init.BaudRate = 115200;
 800107c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001080:	e9c5 0300 	strd	r0, r3, [r5]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001084:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001086:	4628      	mov	r0, r5
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001088:	e9c5 6602 	strd	r6, r6, [r5, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108c:	e9c5 3605 	strd	r3, r6, [r5, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001090:	e9c5 6607 	strd	r6, r6, [r5, #28]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001094:	e9c5 6609 	strd	r6, r6, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001098:	f002 ff25 	bl	8003ee6 <HAL_UART_Init>
 800109c:	4601      	mov	r1, r0
 800109e:	2800      	cmp	r0, #0
 80010a0:	f43f ae16 	beq.w	8000cd0 <main+0xb8>
 80010a4:	b672      	cpsid	i
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <main+0x48e>
  HAL_Init();
 80010a8:	f000 fa40 	bl	800152c <HAL_Init>
  SystemClock_Config();
 80010ac:	f7ff fd4e 	bl	8000b4c <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 80010b0:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 80010b4:	4628      	mov	r0, r5
__HAL_RCC_HSEM_CLK_ENABLE();
 80010b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ba:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 80010be:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 80010c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c6:	9309      	str	r3, [sp, #36]	; 0x24
 80010c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
HAL_HSEM_FastTake(HSEM_ID_0);
 80010ca:	f000 fe9f 	bl	8001e0c <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 80010ce:	4629      	mov	r1, r5
 80010d0:	4628      	mov	r0, r5
 80010d2:	f000 fea9 	bl	8001e28 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80010d6:	4d0e      	ldr	r5, [pc, #56]	; (8001110 <main+0x4f8>)
 80010d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010dc:	682a      	ldr	r2, [r5, #0]
 80010de:	0416      	lsls	r6, r2, #16
 80010e0:	f53f af44 	bmi.w	8000f6c <main+0x354>
 80010e4:	3b01      	subs	r3, #1
 80010e6:	d1f9      	bne.n	80010dc <main+0x4c4>
 80010e8:	b672      	cpsid	i
  while (1)
 80010ea:	e7fe      	b.n	80010ea <main+0x4d2>
 80010ec:	58020400 	.word	0x58020400
 80010f0:	24001004 	.word	0x24001004
 80010f4:	40028000 	.word	0x40028000
 80010f8:	24000aa8 	.word	0x24000aa8
 80010fc:	24000a2c 	.word	0x24000a2c
 8001100:	240009cc 	.word	0x240009cc
 8001104:	24001090 	.word	0x24001090
 8001108:	24000b48 	.word	0x24000b48
 800110c:	40004800 	.word	0x40004800
 8001110:	58024400 	.word	0x58024400

08001114 <Error_Handler>:
 8001114:	b672      	cpsid	i
 8001116:	e7fe      	b.n	8001116 <Error_Handler+0x2>

08001118 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <HAL_MspInit+0x20>)
{
 800111a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001120:	f042 0202 	orr.w	r2, r2, #2
 8001124:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001134:	b002      	add	sp, #8
 8001136:	4770      	bx	lr
 8001138:	58024400 	.word	0x58024400

0800113c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800113c:	6802      	ldr	r2, [r0, #0]
{
 800113e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_CRC_MspInit+0x2c>)
 8001142:	429a      	cmp	r2, r3
 8001144:	d10d      	bne.n	8001162 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001146:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800114a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800114e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001152:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001162:	b002      	add	sp, #8
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	58024c00 	.word	0x58024c00

0800116c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800116c:	b570      	push	{r4, r5, r6, lr}
 800116e:	b08c      	sub	sp, #48	; 0x30
 8001170:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	2214      	movs	r2, #20
 8001174:	2100      	movs	r1, #0
 8001176:	a807      	add	r0, sp, #28
 8001178:	f005 fde6 	bl	8006d48 <memset>
  if(heth->Instance==ETH)
 800117c:	6822      	ldr	r2, [r4, #0]
 800117e:	4b44      	ldr	r3, [pc, #272]	; (8001290 <HAL_ETH_MspInit+0x124>)
 8001180:	429a      	cmp	r2, r3
 8001182:	f040 8082 	bne.w	800128a <HAL_ETH_MspInit+0x11e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001186:	4b43      	ldr	r3, [pc, #268]	; (8001294 <HAL_ETH_MspInit+0x128>)
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800118c:	250b      	movs	r5, #11
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800118e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001192:	a907      	add	r1, sp, #28
 8001194:	4840      	ldr	r0, [pc, #256]	; (8001298 <HAL_ETH_MspInit+0x12c>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800119a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800119e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80011a2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80011a6:	9200      	str	r2, [sp, #0]
 80011a8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80011aa:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80011ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80011b2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80011b6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80011ba:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80011be:	9201      	str	r2, [sp, #4]
 80011c0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80011c2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80011c6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80011ca:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80011ce:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80011d2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80011d6:	9202      	str	r2, [sp, #8]
 80011d8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011de:	f042 0204 	orr.w	r2, r2, #4
 80011e2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80011e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011ea:	f002 0204 	and.w	r2, r2, #4
 80011ee:	9203      	str	r2, [sp, #12]
 80011f0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011f6:	f042 0201 	orr.w	r2, r2, #1
 80011fa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80011fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001202:	f002 0201 	and.w	r2, r2, #1
 8001206:	9204      	str	r2, [sp, #16]
 8001208:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800120e:	f042 0202 	orr.w	r2, r2, #2
 8001212:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001216:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800121a:	f002 0202 	and.w	r2, r2, #2
 800121e:	9205      	str	r2, [sp, #20]
 8001220:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001222:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800122a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800122e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001232:	950b      	str	r5, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001238:	9306      	str	r3, [sp, #24]
 800123a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2332      	movs	r3, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	e9cd 3607 	strd	r3, r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001246:	f000 fced 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800124a:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	a907      	add	r1, sp, #28
 800124e:	4813      	ldr	r0, [pc, #76]	; (800129c <HAL_ETH_MspInit+0x130>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001250:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f000 fce3 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800125e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	a907      	add	r1, sp, #28
 8001264:	480e      	ldr	r0, [pc, #56]	; (80012a0 <HAL_ETH_MspInit+0x134>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001266:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001270:	f000 fcd8 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001274:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001278:	a907      	add	r1, sp, #28
 800127a:	480a      	ldr	r0, [pc, #40]	; (80012a4 <HAL_ETH_MspInit+0x138>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800127c:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001286:	f000 fccd 	bl	8001c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800128a:	b00c      	add	sp, #48	; 0x30
 800128c:	bd70      	pop	{r4, r5, r6, pc}
 800128e:	bf00      	nop
 8001290:	40028000 	.word	0x40028000
 8001294:	58024400 	.word	0x58024400
 8001298:	58020800 	.word	0x58020800
 800129c:	58020000 	.word	0x58020000
 80012a0:	58020400 	.word	0x58020400
 80012a4:	58021800 	.word	0x58021800

080012a8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM16)
 80012a8:	6802      	ldr	r2, [r0, #0]
{
 80012aa:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM16)
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_TIM_Base_MspInit+0x28>)
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d10c      	bne.n	80012cc <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_TIM_Base_MspInit+0x2c>)
 80012b4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80012b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80012bc:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80012c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80012cc:	b002      	add	sp, #8
 80012ce:	4770      	bx	lr
 80012d0:	40014400 	.word	0x40014400
 80012d4:	58024400 	.word	0x58024400

080012d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d8:	b510      	push	{r4, lr}
 80012da:	b0b6      	sub	sp, #216	; 0xd8
 80012dc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	2214      	movs	r2, #20
 80012e0:	2100      	movs	r1, #0
 80012e2:	a802      	add	r0, sp, #8
 80012e4:	f005 fd30 	bl	8006d48 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e8:	22bc      	movs	r2, #188	; 0xbc
 80012ea:	2100      	movs	r1, #0
 80012ec:	a807      	add	r0, sp, #28
 80012ee:	f005 fd2b 	bl	8006d48 <memset>
  if(huart->Instance==USART3)
 80012f2:	6822      	ldr	r2, [r4, #0]
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_UART_MspInit+0x88>)
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d130      	bne.n	800135c <HAL_UART_MspInit+0x84>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012fa:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fc:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012fe:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001300:	2300      	movs	r3, #0
 8001302:	9324      	str	r3, [sp, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001304:	f001 fc0c 	bl	8002b20 <HAL_RCCEx_PeriphCLKConfig>
 8001308:	b108      	cbz	r0, 800130e <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 800130a:	f7ff ff03 	bl	8001114 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001310:	a902      	add	r1, sp, #8
 8001312:	4815      	ldr	r0, [pc, #84]	; (8001368 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001314:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001318:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800131c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001320:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001324:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001328:	9200      	str	r2, [sp, #0]
 800132a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800132c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001330:	f042 0208 	orr.w	r2, r2, #8
 8001334:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	e9cd 3304 	strd	r3, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001354:	2307      	movs	r3, #7
 8001356:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001358:	f000 fc64 	bl	8001c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800135c:	b036      	add	sp, #216	; 0xd8
 800135e:	bd10      	pop	{r4, pc}
 8001360:	40004800 	.word	0x40004800
 8001364:	58024400 	.word	0x58024400
 8001368:	58020c00 	.word	0x58020c00

0800136c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800136c:	b530      	push	{r4, r5, lr}
 800136e:	b0b7      	sub	sp, #220	; 0xdc
 8001370:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	2214      	movs	r2, #20
 8001374:	2100      	movs	r1, #0
 8001376:	a802      	add	r0, sp, #8
 8001378:	f005 fce6 	bl	8006d48 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800137c:	22bc      	movs	r2, #188	; 0xbc
 800137e:	2100      	movs	r1, #0
 8001380:	a807      	add	r0, sp, #28
 8001382:	f005 fce1 	bl	8006d48 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001386:	6822      	ldr	r2, [r4, #0]
 8001388:	4b28      	ldr	r3, [pc, #160]	; (800142c <HAL_PCD_MspInit+0xc0>)
 800138a:	429a      	cmp	r2, r3
 800138c:	d14b      	bne.n	8001426 <HAL_PCD_MspInit+0xba>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800138e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    PeriphClkInitStruct.PLL3.PLL3M = 1;
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001392:	2001      	movs	r0, #1
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001394:	2204      	movs	r2, #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001396:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001398:	2318      	movs	r3, #24
 800139a:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800139e:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3R = 2;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a0:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80013a2:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80013a6:	9314      	str	r3, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80013a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013ac:	9315      	str	r3, [sp, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	9317      	str	r3, [sp, #92]	; 0x5c
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80013b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013b6:	9328      	str	r3, [sp, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b8:	f001 fbb2 	bl	8002b20 <HAL_RCCEx_PeriphCLKConfig>
 80013bc:	b108      	cbz	r0, 80013c2 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 80013be:	f7ff fea9 	bl	8001114 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4c1b      	ldr	r4, [pc, #108]	; (8001430 <HAL_PCD_MspInit+0xc4>)
    HAL_PWREx_EnableUSBVoltageDetector();
 80013c4:	f000 fe10 	bl	8001fe8 <HAL_PWREx_EnableUSBVoltageDetector>
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	a902      	add	r1, sp, #8
 80013d4:	4817      	ldr	r0, [pc, #92]	; (8001434 <HAL_PCD_MspInit+0xc8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80013de:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80013f0:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80013f6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f000 fc14 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013fc:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	a902      	add	r1, sp, #8
 8001402:	480c      	ldr	r0, [pc, #48]	; (8001434 <HAL_PCD_MspInit+0xc8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001406:	e9cd 3502 	strd	r3, r5, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f000 fc0b 	bl	8001c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800140e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8001412:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001416:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800141a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800141e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001426:	b037      	add	sp, #220	; 0xdc
 8001428:	bd30      	pop	{r4, r5, pc}
 800142a:	bf00      	nop
 800142c:	40080000 	.word	0x40080000
 8001430:	58024400 	.word	0x58024400
 8001434:	58020000 	.word	0x58020000

08001438 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <NMI_Handler>

0800143a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <HardFault_Handler>

0800143c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <MemManage_Handler>

0800143e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <BusFault_Handler>

08001440 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler>

08001442 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	4770      	bx	lr

08001444 <DebugMon_Handler>:
 8001444:	4770      	bx	lr

08001446 <PendSV_Handler>:
 8001446:	4770      	bx	lr

08001448 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001448:	f000 b89e 	b.w	8001588 <HAL_IncTick>

0800144c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <_sbrk+0x30>)
{
 800144e:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001450:	6819      	ldr	r1, [r3, #0]
{
 8001452:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001454:	b909      	cbnz	r1, 800145a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001456:	490a      	ldr	r1, [pc, #40]	; (8001480 <_sbrk+0x34>)
 8001458:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	4909      	ldr	r1, [pc, #36]	; (8001484 <_sbrk+0x38>)
 800145e:	4c0a      	ldr	r4, [pc, #40]	; (8001488 <_sbrk+0x3c>)
 8001460:	4402      	add	r2, r0
 8001462:	1b09      	subs	r1, r1, r4
 8001464:	428a      	cmp	r2, r1
 8001466:	d906      	bls.n	8001476 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001468:	f005 fc2e 	bl	8006cc8 <__errno>
 800146c:	230c      	movs	r3, #12
 800146e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001470:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001474:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001476:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001478:	e7fc      	b.n	8001474 <_sbrk+0x28>
 800147a:	bf00      	nop
 800147c:	24000ab4 	.word	0x24000ab4
 8001480:	20000000 	.word	0x20000000
 8001484:	24080000 	.word	0x24080000
 8001488:	00000400 	.word	0x00000400

0800148c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800148c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001490:	f7ff faee 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001494:	480c      	ldr	r0, [pc, #48]	; (80014c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001496:	490d      	ldr	r1, [pc, #52]	; (80014cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001498:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800149c:	e002      	b.n	80014a4 <LoopCopyDataInit>

0800149e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a2:	3304      	adds	r3, #4

080014a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a8:	d3f9      	bcc.n	800149e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014ac:	4c0a      	ldr	r4, [pc, #40]	; (80014d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b0:	e001      	b.n	80014b6 <LoopFillZerobss>

080014b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b4:	3204      	adds	r2, #4

080014b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b8:	d3fb      	bcc.n	80014b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ba:	f005 fc0b 	bl	8006cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014be:	f7ff fbab 	bl	8000c18 <main>
  bx  lr
 80014c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014c4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014cc:	240009cc 	.word	0x240009cc
  ldr r2, =_sidata
 80014d0:	080244d4 	.word	0x080244d4
  ldr r2, =_sbss
 80014d4:	24000a8c 	.word	0x24000a8c
  ldr r4, =_ebss
 80014d8:	24001120 	.word	0x24001120

080014dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC3_IRQHandler>
	...

080014e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e0:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_InitTick+0x40>)
{
 80014e4:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 80014e6:	7818      	ldrb	r0, [r3, #0]
 80014e8:	b908      	cbnz	r0, 80014ee <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 80014ea:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014ec:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f2:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <HAL_InitTick+0x44>)
 80014f4:	fbb3 f3f0 	udiv	r3, r3, r0
 80014f8:	6810      	ldr	r0, [r2, #0]
 80014fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80014fe:	f000 f8bb 	bl	8001678 <HAL_SYSTICK_Config>
 8001502:	4604      	mov	r4, r0
 8001504:	2800      	cmp	r0, #0
 8001506:	d1f0      	bne.n	80014ea <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001508:	2d0f      	cmp	r5, #15
 800150a:	d8ee      	bhi.n	80014ea <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800150c:	4602      	mov	r2, r0
 800150e:	4629      	mov	r1, r5
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f000 f87e 	bl	8001614 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <HAL_InitTick+0x48>)
 800151a:	4620      	mov	r0, r4
 800151c:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 800151e:	e7e5      	b.n	80014ec <HAL_InitTick+0xc>
 8001520:	24000008 	.word	0x24000008
 8001524:	24000000 	.word	0x24000000
 8001528:	2400000c 	.word	0x2400000c

0800152c <HAL_Init>:
{
 800152c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152e:	2003      	movs	r0, #3
 8001530:	f000 f85e 	bl	80015f0 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001534:	f000 fff8 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 8001538:	490f      	ldr	r1, [pc, #60]	; (8001578 <HAL_Init+0x4c>)
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <HAL_Init+0x50>)
 800153c:	698b      	ldr	r3, [r1, #24]
 800153e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001542:	5cd3      	ldrb	r3, [r2, r3]
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800154a:	698b      	ldr	r3, [r1, #24]
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	5cd3      	ldrb	r3, [r2, r3]
 8001552:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <HAL_Init+0x54>)
 8001554:	f003 031f 	and.w	r3, r3, #31
 8001558:	fa20 f303 	lsr.w	r3, r0, r3
 800155c:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_Init+0x58>)
 8001560:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001562:	2000      	movs	r0, #0
 8001564:	f7ff ffbc 	bl	80014e0 <HAL_InitTick>
 8001568:	4604      	mov	r4, r0
 800156a:	b918      	cbnz	r0, 8001574 <HAL_Init+0x48>
  HAL_MspInit();
 800156c:	f7ff fdd4 	bl	8001118 <HAL_MspInit>
}
 8001570:	4620      	mov	r0, r4
 8001572:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001574:	2401      	movs	r4, #1
 8001576:	e7fb      	b.n	8001570 <HAL_Init+0x44>
 8001578:	58024400 	.word	0x58024400
 800157c:	0800b49c 	.word	0x0800b49c
 8001580:	24000004 	.word	0x24000004
 8001584:	24000000 	.word	0x24000000

08001588 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001588:	4a03      	ldr	r2, [pc, #12]	; (8001598 <HAL_IncTick+0x10>)
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <HAL_IncTick+0x14>)
 800158c:	6811      	ldr	r1, [r2, #0]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	440b      	add	r3, r1
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	2400110c 	.word	0x2400110c
 800159c:	24000008 	.word	0x24000008

080015a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015a0:	4b01      	ldr	r3, [pc, #4]	; (80015a8 <HAL_GetTick+0x8>)
 80015a2:	6818      	ldr	r0, [r3, #0]
}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	2400110c 	.word	0x2400110c

080015ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ac:	b538      	push	{r3, r4, r5, lr}
 80015ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015b0:	f7ff fff6 	bl	80015a0 <HAL_GetTick>
 80015b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80015b8:	bf1e      	ittt	ne
 80015ba:	4b04      	ldrne	r3, [pc, #16]	; (80015cc <HAL_Delay+0x20>)
 80015bc:	781b      	ldrbne	r3, [r3, #0]
 80015be:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c0:	f7ff ffee 	bl	80015a0 <HAL_GetTick>
 80015c4:	1b43      	subs	r3, r0, r5
 80015c6:	42a3      	cmp	r3, r4
 80015c8:	d3fa      	bcc.n	80015c0 <HAL_Delay+0x14>
  {
  }
}
 80015ca:	bd38      	pop	{r3, r4, r5, pc}
 80015cc:	24000008 	.word	0x24000008

080015d0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80015d0:	4b01      	ldr	r3, [pc, #4]	; (80015d8 <HAL_GetREVID+0x8>)
 80015d2:	6818      	ldr	r0, [r3, #0]
}
 80015d4:	0c00      	lsrs	r0, r0, #16
 80015d6:	4770      	bx	lr
 80015d8:	5c001000 	.word	0x5c001000

080015dc <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80015dc:	4a03      	ldr	r2, [pc, #12]	; (80015ec <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 80015de:	6853      	ldr	r3, [r2, #4]
 80015e0:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80015e4:	4318      	orrs	r0, r3
 80015e6:	6050      	str	r0, [r2, #4]
}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	58000400 	.word	0x58000400

080015f0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4907      	ldr	r1, [pc, #28]	; (8001610 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80015fe:	0412      	lsls	r2, r2, #16
 8001600:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800160c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001616:	b530      	push	{r4, r5, lr}
 8001618:	68dc      	ldr	r4, [r3, #12]
 800161a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800161e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001622:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	2d04      	cmp	r5, #4
 8001626:	bf28      	it	cs
 8001628:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162a:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001630:	bf8c      	ite	hi
 8001632:	3c03      	subhi	r4, #3
 8001634:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001636:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 800163a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001644:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	fa01 f104 	lsl.w	r1, r1, r4
 800164c:	ea41 0302 	orr.w	r3, r1, r2
 8001650:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001654:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001656:	db06      	blt.n	8001666 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800165c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001660:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001664:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001666:	f000 000f 	and.w	r0, r0, #15
 800166a:	4a02      	ldr	r2, [pc, #8]	; (8001674 <HAL_NVIC_SetPriority+0x60>)
 800166c:	5413      	strb	r3, [r2, r0]
 800166e:	e7f9      	b.n	8001664 <HAL_NVIC_SetPriority+0x50>
 8001670:	e000ed00 	.word	0xe000ed00
 8001674:	e000ed14 	.word	0xe000ed14

08001678 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001678:	3801      	subs	r0, #1
 800167a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800167e:	d20a      	bcs.n	8001696 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	21f0      	movs	r1, #240	; 0xf0
 8001684:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001686:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001688:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001694:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000e010 	.word	0xe000e010
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80016a4:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80016a6:	4604      	mov	r4, r0
 80016a8:	b908      	cbnz	r0, 80016ae <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80016aa:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80016ac:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80016ae:	7f43      	ldrb	r3, [r0, #29]
 80016b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016b4:	b913      	cbnz	r3, 80016bc <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80016b6:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80016b8:	f7ff fd40 	bl	800113c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80016bc:	2302      	movs	r3, #2
 80016be:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80016c0:	7923      	ldrb	r3, [r4, #4]
 80016c2:	b9e3      	cbnz	r3, 80016fe <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	4a13      	ldr	r2, [pc, #76]	; (8001714 <HAL_CRC_Init+0x70>)
 80016c8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	f022 0218 	bic.w	r2, r2, #24
 80016d0:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80016d2:	7962      	ldrb	r2, [r4, #5]
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	b9d2      	cbnz	r2, 800170e <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80016d8:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80016dc:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80016de:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	6961      	ldr	r1, [r4, #20]
 80016e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80016e8:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80016ea:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80016ec:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016f4:	430a      	orrs	r2, r1
 80016f6:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80016f8:	2301      	movs	r3, #1
 80016fa:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80016fc:	e7d6      	b.n	80016ac <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80016fe:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001702:	4620      	mov	r0, r4
 8001704:	f000 f808 	bl	8001718 <HAL_CRCEx_Polynomial_Set>
 8001708:	2800      	cmp	r0, #0
 800170a:	d0e2      	beq.n	80016d2 <HAL_CRC_Init+0x2e>
 800170c:	e7cd      	b.n	80016aa <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800170e:	6922      	ldr	r2, [r4, #16]
 8001710:	e7e4      	b.n	80016dc <HAL_CRC_Init+0x38>
 8001712:	bf00      	nop
 8001714:	04c11db7 	.word	0x04c11db7

08001718 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001718:	231f      	movs	r3, #31
{
 800171a:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800171c:	3b01      	subs	r3, #1
 800171e:	d306      	bcc.n	800172e <HAL_CRCEx_Polynomial_Set+0x16>
 8001720:	fa21 f403 	lsr.w	r4, r1, r3
 8001724:	07e4      	lsls	r4, r4, #31
 8001726:	d5f9      	bpl.n	800171c <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8001728:	2a08      	cmp	r2, #8
 800172a:	d014      	beq.n	8001756 <HAL_CRCEx_Polynomial_Set+0x3e>
 800172c:	d802      	bhi.n	8001734 <HAL_CRCEx_Polynomial_Set+0x1c>
 800172e:	b13a      	cbz	r2, 8001740 <HAL_CRCEx_Polynomial_Set+0x28>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8001730:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8001732:	e00d      	b.n	8001750 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8001734:	2a10      	cmp	r2, #16
 8001736:	d00c      	beq.n	8001752 <HAL_CRCEx_Polynomial_Set+0x3a>
 8001738:	2a18      	cmp	r2, #24
 800173a:	d1f9      	bne.n	8001730 <HAL_CRCEx_Polynomial_Set+0x18>
      if (msb >= HAL_CRC_LENGTH_7B)
 800173c:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 800173e:	d8f7      	bhi.n	8001730 <HAL_CRCEx_Polynomial_Set+0x18>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001740:	6800      	ldr	r0, [r0, #0]
 8001742:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001744:	6883      	ldr	r3, [r0, #8]
 8001746:	f023 0318 	bic.w	r3, r3, #24
 800174a:	431a      	orrs	r2, r3
 800174c:	6082      	str	r2, [r0, #8]
 800174e:	2000      	movs	r0, #0
}
 8001750:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8001752:	2b07      	cmp	r3, #7
 8001754:	e7f3      	b.n	800173e <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8001756:	2b0f      	cmp	r3, #15
 8001758:	e7f1      	b.n	800173e <HAL_CRCEx_Polynomial_Set+0x26>

0800175a <ETH_SetMACConfig>:
static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800175a:	688b      	ldr	r3, [r1, #8]
 800175c:	680a      	ldr	r2, [r1, #0]
{
 800175e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001762:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
                    ((uint32_t)macconf->Support2KPacket  << 22) |
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001764:	7c0b      	ldrb	r3, [r1, #16]
{
 8001766:	b085      	sub	sp, #20
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001768:	f891 a004 	ldrb.w	sl, [r1, #4]
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800176c:	2b00      	cmp	r3, #0
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800176e:	f891 900c 	ldrb.w	r9, [r1, #12]
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001772:	f891 800d 	ldrb.w	r8, [r1, #13]
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001776:	bf0c      	ite	eq
 8001778:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 800177c:	2300      	movne	r3, #0
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800177e:	f891 e00e 	ldrb.w	lr, [r1, #14]
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001782:	9301      	str	r3, [sp, #4]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001784:	7c4b      	ldrb	r3, [r1, #17]
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001786:	f891 c00f 	ldrb.w	ip, [r1, #15]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800178a:	2b00      	cmp	r3, #0
                              ((uint32_t)macconf->JumboPacket << 16) |
 800178c:	7c8e      	ldrb	r6, [r1, #18]
                                macconf->Speed |
                                  macconf->DuplexMode |
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800178e:	7f0d      	ldrb	r5, [r1, #28]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001790:	bf0c      	ite	eq
 8001792:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 8001796:	2300      	movne	r3, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001798:	f891 b01d 	ldrb.w	fp, [r1, #29]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800179c:	9302      	str	r3, [sp, #8]
 800179e:	694b      	ldr	r3, [r1, #20]
 80017a0:	431a      	orrs	r2, r3
 80017a2:	698b      	ldr	r3, [r1, #24]
 80017a4:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80017a6:	7f8a      	ldrb	r2, [r1, #30]
 80017a8:	2a00      	cmp	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80017aa:	7fca      	ldrb	r2, [r1, #31]
 80017ac:	9203      	str	r2, [sp, #12]
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80017ae:	bf08      	it	eq
 80017b0:	f44f 6780 	moveq.w	r7, #1024	; 0x400
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80017b4:	f891 2020 	ldrb.w	r2, [r1, #32]
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80017b8:	bf18      	it	ne
 80017ba:	2700      	movne	r7, #0
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80017bc:	2a00      	cmp	r2, #0
                                              macconf->BackOffLimit |
                                                ((uint32_t)macconf->DeferralCheck << 4)|
                                                  macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017be:	6802      	ldr	r2, [r0, #0]
 80017c0:	6810      	ldr	r0, [r2, #0]
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80017c2:	bf0c      	ite	eq
 80017c4:	f44f 7480 	moveq.w	r4, #256	; 0x100
 80017c8:	2400      	movne	r4, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017ca:	9000      	str	r0, [sp, #0]
 80017cc:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80017ce:	4303      	orrs	r3, r0
 80017d0:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 80017d2:	4303      	orrs	r3, r0
 80017d4:	9800      	ldr	r0, [sp, #0]
 80017d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80017da:	f420 007b 	bic.w	r0, r0, #16449536	; 0xfb0000
 80017de:	f420 40fe 	bic.w	r0, r0, #32512	; 0x7f00
 80017e2:	f020 007c 	bic.w	r0, r0, #124	; 0x7c
 80017e6:	4303      	orrs	r3, r0
 80017e8:	9803      	ldr	r0, [sp, #12]
 80017ea:	ea43 63ca 	orr.w	r3, r3, sl, lsl #27
 80017ee:	ea43 53c9 	orr.w	r3, r3, r9, lsl #23
 80017f2:	ea43 5388 	orr.w	r3, r3, r8, lsl #22
 80017f6:	ea43 534e 	orr.w	r3, r3, lr, lsl #21
 80017fa:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 80017fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001802:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 8001806:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 800180a:	f891 b028 	ldrb.w	fp, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800180e:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8001812:	9801      	ldr	r0, [sp, #4]
 8001814:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
 8001818:	4303      	orrs	r3, r0
 800181a:	9802      	ldr	r0, [sp, #8]
 800181c:	4303      	orrs	r3, r0
 800181e:	433b      	orrs	r3, r7
 8001820:	431c      	orrs	r4, r3
 8001822:	6014      	str	r4, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001824:	6bce      	ldr	r6, [r1, #60]	; 0x3c
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001826:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800182a:	f891 7038 	ldrb.w	r7, [r1, #56]	; 0x38
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800182e:	2b00      	cmp	r3, #0
                       macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001830:	6853      	ldr	r3, [r2, #4]
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001832:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001836:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800183a:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800183e:	bf0c      	ite	eq
 8001840:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8001844:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001846:	f423 23ef 	bic.w	r3, r3, #489472	; 0x77800
 800184a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800184e:	f023 0307 	bic.w	r3, r3, #7
 8001852:	ea43 6346 	orr.w	r3, r3, r6, lsl #25
 8001856:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8001858:	4333      	orrs	r3, r6

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
               macconf->PauseLowThreshold |
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
                   (macconf->PauseTime << 16));
 800185a:	6c8e      	ldr	r6, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800185c:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8001860:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
               macconf->PauseLowThreshold |
 8001864:	6d0d      	ldr	r5, [r1, #80]	; 0x50
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001866:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
 800186a:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800186c:	6c48      	ldr	r0, [r1, #68]	; 0x44
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800186e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001870:	68d3      	ldr	r3, [r2, #12]
 8001872:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8001876:	f023 0301 	bic.w	r3, r3, #1
 800187a:	4303      	orrs	r3, r0
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800187c:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001880:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001884:	60d3      	str	r3, [r2, #12]
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001886:	f891 304c 	ldrb.w	r3, [r1, #76]	; 0x4c
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800188a:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800188e:	2b00      	cmp	r3, #0

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001890:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001892:	f023 03f2 	bic.w	r3, r3, #242	; 0xf2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001896:	bf0c      	ite	eq
 8001898:	2080      	moveq	r0, #128	; 0x80
 800189a:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800189c:	041b      	lsls	r3, r3, #16
 800189e:	0c1b      	lsrs	r3, r3, #16
 80018a0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80018a4:	432b      	orrs	r3, r5
  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80018a6:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80018a8:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 80018ac:	4303      	orrs	r3, r0
 80018ae:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80018b0:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80018b4:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80018b8:	f020 0003 	bic.w	r0, r0, #3
 80018bc:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80018be:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80018c2:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80018c6:	6d88      	ldr	r0, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80018c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80018cc:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 80018d0:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 80018d4:	4303      	orrs	r3, r0
 80018d6:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80018da:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80018de:	f891 4061 	ldrb.w	r4, [r1, #97]	; 0x61
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80018e2:	2b00      	cmp	r3, #0
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80018e4:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80018e8:	f891 1062 	ldrb.w	r1, [r1, #98]	; 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80018ec:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80018f0:	bf0c      	ite	eq
 80018f2:	2040      	moveq	r0, #64	; 0x40
 80018f4:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80018f6:	432b      	orrs	r3, r5
 80018f8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80018fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001900:	4303      	orrs	r3, r0
 8001902:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 8001906:	b005      	add	sp, #20
 8001908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800190c <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800190c:	6802      	ldr	r2, [r0, #0]
 800190e:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 8001912:	6803      	ldr	r3, [r0, #0]
 8001914:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
{
 8001918:	b530      	push	{r4, r5, lr}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800191a:	f023 0302 	bic.w	r3, r3, #2
 800191e:	680c      	ldr	r4, [r1, #0]
 8001920:	4323      	orrs	r3, r4
  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001922:	f241 0404 	movw	r4, #4100	; 0x1004
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001926:	6003      	str	r3, [r0, #0]
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001928:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800192a:	5910      	ldr	r0, [r2, r4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800192c:	790d      	ldrb	r5, [r1, #4]
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800192e:	03db      	lsls	r3, r3, #15
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001930:	f420 4050 	bic.w	r0, r0, #53248	; 0xd000
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001934:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 8001938:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800193a:	f020 0001 	bic.w	r0, r0, #1
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800193e:	432b      	orrs	r3, r5
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001940:	4303      	orrs	r3, r0
 8001942:	5113      	str	r3, [r2, r4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001944:	f502 5488 	add.w	r4, r2, #4352	; 0x1100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001948:	7b48      	ldrb	r0, [r1, #13]
 800194a:	6a0b      	ldr	r3, [r1, #32]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800194c:	6825      	ldr	r5, [r4, #0]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800194e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001952:	4810      	ldr	r0, [pc, #64]	; (8001994 <ETH_SetDMAConfig+0x88>)
 8001954:	4028      	ands	r0, r5
 8001956:	4303      	orrs	r3, r0
 8001958:	6023      	str	r3, [r4, #0]
  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
                 ((uint32_t)dmaconf->TCPSegmentation << 12));

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800195a:	f241 1404 	movw	r4, #4356	; 0x1104
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800195e:	7f4b      	ldrb	r3, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001960:	7d08      	ldrb	r0, [r1, #20]
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001962:	031b      	lsls	r3, r3, #12
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001964:	5915      	ldr	r5, [r2, r4]
  dmaregval = (dmaconf->TxDMABurstLength |
 8001966:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800196a:	6908      	ldr	r0, [r1, #16]
 800196c:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800196e:	480a      	ldr	r0, [pc, #40]	; (8001998 <ETH_SetDMAConfig+0x8c>)
 8001970:	4028      	ands	r0, r5
 8001972:	4303      	orrs	r3, r0
 8001974:	5113      	str	r3, [r2, r4]
  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001976:	f241 1408 	movw	r4, #4360	; 0x1108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800197a:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800197c:	5910      	ldr	r0, [r2, r4]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800197e:	698b      	ldr	r3, [r1, #24]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001980:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001984:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001988:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 800198c:	430b      	orrs	r3, r1
 800198e:	5113      	str	r3, [r2, r4]
}
 8001990:	bd30      	pop	{r4, r5, pc}
 8001992:	bf00      	nop
 8001994:	fffec000 	.word	0xfffec000
 8001998:	ffc0efef 	.word	0xffc0efef

0800199c <HAL_ETH_SetMDIOClockRange>:
{
 800199c:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 800199e:	6803      	ldr	r3, [r0, #0]
{
 80019a0:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 80019a2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 80019a6:	f000 ff85 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_ETH_SetMDIOClockRange+0x58>)
 80019ac:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <HAL_ETH_SetMDIOClockRange+0x5c>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80019ae:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80019b2:	4403      	add	r3, r0
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d205      	bcs.n	80019c4 <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80019b8:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80019bc:	682b      	ldr	r3, [r5, #0]
 80019be:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 80019c2:	bd38      	pop	{r3, r4, r5, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_ETH_SetMDIOClockRange+0x60>)
 80019c6:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <HAL_ETH_SetMDIOClockRange+0x64>)
 80019c8:	4403      	add	r3, r0
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d802      	bhi.n	80019d4 <HAL_ETH_SetMDIOClockRange+0x38>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80019ce:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80019d2:	e7f3      	b.n	80019bc <HAL_ETH_SetMDIOClockRange+0x20>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_ETH_SetMDIOClockRange+0x68>)
 80019d6:	4a0c      	ldr	r2, [pc, #48]	; (8001a08 <HAL_ETH_SetMDIOClockRange+0x6c>)
 80019d8:	4403      	add	r3, r0
 80019da:	4293      	cmp	r3, r2
 80019dc:	d3ee      	bcc.n	80019bc <HAL_ETH_SetMDIOClockRange+0x20>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80019de:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_ETH_SetMDIOClockRange+0x70>)
 80019e0:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <HAL_ETH_SetMDIOClockRange+0x74>)
 80019e2:	4403      	add	r3, r0
 80019e4:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80019e6:	bf94      	ite	ls
 80019e8:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80019ec:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
 80019f0:	e7e4      	b.n	80019bc <HAL_ETH_SetMDIOClockRange+0x20>
 80019f2:	bf00      	nop
 80019f4:	feced300 	.word	0xfeced300
 80019f8:	00e4e1c0 	.word	0x00e4e1c0
 80019fc:	fde9f140 	.word	0xfde9f140
 8001a00:	017d783f 	.word	0x017d783f
 8001a04:	fc6c7900 	.word	0xfc6c7900
 8001a08:	02625a00 	.word	0x02625a00
 8001a0c:	fa0a1f00 	.word	0xfa0a1f00
 8001a10:	02faf07f 	.word	0x02faf07f

08001a14 <HAL_ETH_Init>:
{
 8001a14:	b570      	push	{r4, r5, r6, lr}
  if(heth == NULL)
 8001a16:	4604      	mov	r4, r0
{
 8001a18:	b0a4      	sub	sp, #144	; 0x90
  if(heth == NULL)
 8001a1a:	2800      	cmp	r0, #0
 8001a1c:	f000 80a6 	beq.w	8001b6c <HAL_ETH_Init+0x158>
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001a20:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8001a22:	b90b      	cbnz	r3, 8001a28 <HAL_ETH_Init+0x14>
    HAL_ETH_MspInit(heth);
 8001a24:	f7ff fba2 	bl	800116c <HAL_ETH_MspInit>
  heth->gState = HAL_ETH_STATE_BUSY;
 8001a28:	2323      	movs	r3, #35	; 0x23
 8001a2a:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2c:	4b7a      	ldr	r3, [pc, #488]	; (8001c18 <HAL_ETH_Init+0x204>)
 8001a2e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001a32:	f042 0202 	orr.w	r2, r2, #2
 8001a36:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001a3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a3e:	7a20      	ldrb	r0, [r4, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	9b01      	ldr	r3, [sp, #4]
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a48:	2800      	cmp	r0, #0
 8001a4a:	f040 8082 	bne.w	8001b52 <HAL_ETH_Init+0x13e>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a4e:	f7ff fdc5 	bl	80015dc <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001a60:	f7ff fd9e 	bl	80015a0 <HAL_GetTick>
 8001a64:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a6c:	681d      	ldr	r5, [r3, #0]
 8001a6e:	f015 0501 	ands.w	r5, r5, #1
 8001a72:	d171      	bne.n	8001b58 <HAL_ETH_Init+0x144>
  ETH_MAC_MDIO_ClkConfig(heth);
 8001a74:	4620      	mov	r0, r4
  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a76:	2601      	movs	r6, #1
  ETH_MAC_MDIO_ClkConfig(heth);
 8001a78:	f7ff ff90 	bl	800199c <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001a7c:	f000 ff1a 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 8001a80:	4a66      	ldr	r2, [pc, #408]	; (8001c1c <HAL_ETH_Init+0x208>)
 8001a82:	6823      	ldr	r3, [r4, #0]
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
  macDefaultConf.CRCStripTypePacket = ENABLE;
  macDefaultConf.DeferralCheck = DISABLE;
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a88:	9514      	str	r5, [sp, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a8a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.DeferralCheck = DISABLE;
 8001a8e:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001a92:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001a96:	951a      	str	r5, [sp, #104]	; 0x68
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
  macDefaultConf.Jabber = ENABLE;
  macDefaultConf.JumboPacket = DISABLE;
  macDefaultConf.LoopbackMode = DISABLE;
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
  macDefaultConf.PauseTime = 0x0;
 8001a98:	951d      	str	r5, [sp, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001a9a:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
  macDefaultConf.ReceiveOwn = ENABLE;
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
  macDefaultConf.RetryTransmission = ENABLE;
 8001a9e:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001aa2:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001aa6:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001aaa:	951f      	str	r5, [sp, #124]	; 0x7c
  macDefaultConf.SlowProtocolDetect = DISABLE;
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
  macDefaultConf.Speed = ETH_SPEED_100M;
  macDefaultConf.Support2KPacket = DISABLE;
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001aac:	f8ad 5080 	strh.w	r5, [sp, #128]	; 0x80
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ab0:	f88d 5082 	strb.w	r5, [sp, #130]	; 0x82
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001ab4:	9516      	str	r5, [sp, #88]	; 0x58
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001ab6:	f8ad 505c 	strh.w	r5, [sp, #92]	; 0x5c
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001aba:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001abe:	950d      	str	r5, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 8001ac0:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
  macDefaultConf.Watchdog = ENABLE;
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001ac4:	951c      	str	r5, [sp, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001ac6:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001aca:	fbb0 f0f2 	udiv	r0, r0, r2
 8001ace:	3801      	subs	r0, #1
 8001ad0:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001ad4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001ad8:	2002      	movs	r0, #2
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001ada:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001adc:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001ae0:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae6:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  macDefaultConf.LoopbackMode = DISABLE;
 8001aea:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001aee:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.LoopbackMode = DISABLE;
 8001af0:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001af2:	2320      	movs	r3, #32
 8001af4:	e9cd 0321 	strd	r0, r3, [sp, #132]	; 0x84
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001af8:	4b49      	ldr	r3, [pc, #292]	; (8001c20 <HAL_ETH_Init+0x20c>)
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001afa:	4620      	mov	r0, r4
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001afc:	930e      	str	r3, [sp, #56]	; 0x38
  macDefaultConf.Watchdog = ENABLE;
 8001afe:	f240 1301 	movw	r3, #257	; 0x101
 8001b02:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b06:	f7ff fe28 	bl	800175a <ETH_SetMACConfig>
  dmaDefaultConf.FlushRxPacket = DISABLE;
  dmaDefaultConf.PBLx8Mode = DISABLE;
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
  dmaDefaultConf.SecondPacketOperate = DISABLE;
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  dmaDefaultConf.TCPSegmentation = DISABLE;
  dmaDefaultConf.MaximumSegmentSize = 536;

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b0e:	a902      	add	r1, sp, #8
 8001b10:	4620      	mov	r0, r4
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b12:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b16:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b18:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001b1a:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001b1e:	9502      	str	r5, [sp, #8]
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001b20:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b22:	9604      	str	r6, [sp, #16]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001b24:	f8ad 5014 	strh.w	r5, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001b28:	f88d 501c 	strb.w	r5, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001b2c:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b30:	f7ff feec 	bl	800190c <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001b34:	6823      	ldr	r3, [r4, #0]
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001b36:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001b38:	f503 5188 	add.w	r1, r3, #4352	; 0x1100
 8001b3c:	680a      	ldr	r2, [r1, #0]
 8001b3e:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
 8001b42:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001b46:	600a      	str	r2, [r1, #0]
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001b48:	f010 0103 	ands.w	r1, r0, #3
 8001b4c:	d010      	beq.n	8001b70 <HAL_ETH_Init+0x15c>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001b4e:	6766      	str	r6, [r4, #116]	; 0x74
 8001b50:	e00a      	b.n	8001b68 <HAL_ETH_Init+0x154>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001b52:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001b56:	e77a      	b.n	8001a4e <HAL_ETH_Init+0x3a>
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001b58:	f7ff fd22 	bl	80015a0 <HAL_GetTick>
 8001b5c:	1b80      	subs	r0, r0, r6
 8001b5e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001b62:	d980      	bls.n	8001a66 <HAL_ETH_Init+0x52>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001b64:	2304      	movs	r3, #4
 8001b66:	6763      	str	r3, [r4, #116]	; 0x74
    heth->gState = HAL_ETH_STATE_ERROR;
 8001b68:	23e0      	movs	r3, #224	; 0xe0
 8001b6a:	66e3      	str	r3, [r4, #108]	; 0x6c
    return HAL_ERROR;
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	e051      	b.n	8001c14 <HAL_ETH_Init+0x200>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001b70:	f241 1508 	movw	r5, #4360	; 0x1108
 8001b74:	595a      	ldr	r2, [r3, r5]
 8001b76:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001b7a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8001b7e:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8001b82:	68e0      	ldr	r0, [r4, #12]
 8001b84:	515a      	str	r2, [r3, r5]
{
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b86:	f100 0660 	add.w	r6, r0, #96	; 0x60
 8001b8a:	f104 0518 	add.w	r5, r4, #24
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b8e:	4602      	mov	r2, r0

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001b90:	6011      	str	r1, [r2, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001b92:	6051      	str	r1, [r2, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001b94:	6091      	str	r1, [r2, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001b96:	60d1      	str	r1, [r2, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b98:	f845 2b04 	str.w	r2, [r5], #4
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b9c:	3218      	adds	r2, #24
 8001b9e:	42b2      	cmp	r2, r6
 8001ba0:	d1f6      	bne.n	8001b90 <HAL_ETH_Init+0x17c>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001ba2:	62a1      	str	r1, [r4, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001ba4:	f241 122c 	movw	r2, #4396	; 0x112c
 8001ba8:	2103      	movs	r1, #3

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
  {
    dmarxdesc =  heth->Init.RxDesc + i;

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001baa:	2500      	movs	r5, #0
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001bac:	5099      	str	r1, [r3, r2]
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001bae:	f241 1214 	movw	r2, #4372	; 0x1114
    dmarxdesc =  heth->Init.RxDesc + i;
 8001bb2:	6921      	ldr	r1, [r4, #16]
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001bb4:	5098      	str	r0, [r3, r2]
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001bb6:	f503 5289 	add.w	r2, r3, #4384	; 0x1120
 8001bba:	f101 0660 	add.w	r6, r1, #96	; 0x60
 8001bbe:	6010      	str	r0, [r2, #0]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bc0:	f104 0044 	add.w	r0, r4, #68	; 0x44
    dmarxdesc =  heth->Init.RxDesc + i;
 8001bc4:	460a      	mov	r2, r1
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001bc6:	6015      	str	r5, [r2, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001bc8:	6055      	str	r5, [r2, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001bca:	6095      	str	r5, [r2, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001bcc:	60d5      	str	r5, [r2, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001bce:	e9c2 5504 	strd	r5, r5, [r2, #16]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001bd2:	f840 2b04 	str.w	r2, [r0], #4
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bd6:	3218      	adds	r2, #24
 8001bd8:	42b2      	cmp	r2, r6
 8001bda:	d1f4      	bne.n	8001bc6 <HAL_ETH_Init+0x1b2>
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
  WRITE_REG(heth->RxDescList.ItMode, 0);
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001bdc:	f241 1230 	movw	r2, #4400	; 0x1130
 8001be0:	2003      	movs	r0, #3
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001be2:	65e5      	str	r5, [r4, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001be4:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001be8:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001bec:	5098      	str	r0, [r3, r2]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001bee:	f241 121c 	movw	r2, #4380	; 0x111c
  return HAL_OK;
 8001bf2:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001bf4:	5099      	str	r1, [r3, r2]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001bf6:	3148      	adds	r1, #72	; 0x48
 8001bf8:	f241 1228 	movw	r2, #4392	; 0x1128
 8001bfc:	5099      	str	r1, [r3, r2]
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001bfe:	6862      	ldr	r2, [r4, #4]
 8001c00:	8891      	ldrh	r1, [r2, #4]
 8001c02:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c06:	6812      	ldr	r2, [r2, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c08:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  heth->gState = HAL_ETH_STATE_READY;
 8001c0c:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c0e:	6765      	str	r5, [r4, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001c10:	66e3      	str	r3, [r4, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001c12:	6723      	str	r3, [r4, #112]	; 0x70
}
 8001c14:	b024      	add	sp, #144	; 0x90
 8001c16:	bd70      	pop	{r4, r5, r6, pc}
 8001c18:	58024400 	.word	0x58024400
 8001c1c:	000f4240 	.word	0x000f4240
 8001c20:	01010000 	.word	0x01010000

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8001c28:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001de8 <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c2e:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 8001dec <HAL_GPIO_Init+0x1c8>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c32:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c36:	680a      	ldr	r2, [r1, #0]
 8001c38:	fa32 f403 	lsrs.w	r4, r2, r3
 8001c3c:	d102      	bne.n	8001c44 <HAL_GPIO_Init+0x20>
      }
    }

    position++;
  }
}
 8001c3e:	b003      	add	sp, #12
 8001c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c44:	2701      	movs	r7, #1
 8001c46:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 8001c48:	403a      	ands	r2, r7
 8001c4a:	f000 80b6 	beq.w	8001dba <HAL_GPIO_Init+0x196>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c4e:	684c      	ldr	r4, [r1, #4]
 8001c50:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001c54:	2503      	movs	r5, #3
 8001c56:	f024 0a10 	bic.w	sl, r4, #16
 8001c5a:	fa05 f50e 	lsl.w	r5, r5, lr
 8001c5e:	f10a 36ff 	add.w	r6, sl, #4294967295
 8001c62:	43ed      	mvns	r5, r5
 8001c64:	2e01      	cmp	r6, #1
 8001c66:	d810      	bhi.n	8001c8a <HAL_GPIO_Init+0x66>
        temp = GPIOx->OSPEEDR;
 8001c68:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c6a:	ea06 0b05 	and.w	fp, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c6e:	68ce      	ldr	r6, [r1, #12]
 8001c70:	fa06 f60e 	lsl.w	r6, r6, lr
 8001c74:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 8001c78:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c7a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c7c:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c80:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001c84:	409e      	lsls	r6, r3
 8001c86:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8001c88:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001c8a:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c8c:	f1ba 0f02 	cmp.w	sl, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c90:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c92:	ea07 0705 	and.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c96:	fa06 f60e 	lsl.w	r6, r6, lr
 8001c9a:	ea46 0607 	orr.w	r6, r6, r7
      GPIOx->PUPDR = temp;
 8001c9e:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca0:	d114      	bne.n	8001ccc <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3U];
 8001ca2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ca6:	f003 0b07 	and.w	fp, r3, #7
 8001caa:	270f      	movs	r7, #15
 8001cac:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8001cb0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8001cb4:	f8da 6020 	ldr.w	r6, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cb8:	fa07 f70b 	lsl.w	r7, r7, fp
 8001cbc:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cc0:	690e      	ldr	r6, [r1, #16]
 8001cc2:	fa06 f60b 	lsl.w	r6, r6, fp
 8001cc6:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8001cc8:	f8ca 6020 	str.w	r6, [sl, #32]
      temp = GPIOx->MODER;
 8001ccc:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cce:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd0:	f004 0603 	and.w	r6, r4, #3
 8001cd4:	fa06 fe0e 	lsl.w	lr, r6, lr
 8001cd8:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 8001cdc:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cde:	00e5      	lsls	r5, r4, #3
 8001ce0:	d56b      	bpl.n	8001dba <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	f8d8 50f4 	ldr.w	r5, [r8, #244]	; 0xf4
 8001ce6:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cea:	f003 0703 	and.w	r7, r3, #3
 8001cee:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	f045 0502 	orr.w	r5, r5, #2
 8001cf6:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cfa:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfc:	f8c8 50f4 	str.w	r5, [r8, #244]	; 0xf4
 8001d00:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001d04:	f8d8 50f4 	ldr.w	r5, [r8, #244]	; 0xf4
 8001d08:	f005 0502 	and.w	r5, r5, #2
 8001d0c:	9501      	str	r5, [sp, #4]
 8001d0e:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d10:	fa0e f507 	lsl.w	r5, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8001d14:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d18:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d1c:	4d31      	ldr	r5, [pc, #196]	; (8001de4 <HAL_GPIO_Init+0x1c0>)
 8001d1e:	42a8      	cmp	r0, r5
 8001d20:	d04d      	beq.n	8001dbe <HAL_GPIO_Init+0x19a>
 8001d22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d26:	42a8      	cmp	r0, r5
 8001d28:	d04b      	beq.n	8001dc2 <HAL_GPIO_Init+0x19e>
 8001d2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d2e:	42a8      	cmp	r0, r5
 8001d30:	d049      	beq.n	8001dc6 <HAL_GPIO_Init+0x1a2>
 8001d32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d36:	42a8      	cmp	r0, r5
 8001d38:	d047      	beq.n	8001dca <HAL_GPIO_Init+0x1a6>
 8001d3a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d3e:	42a8      	cmp	r0, r5
 8001d40:	d045      	beq.n	8001dce <HAL_GPIO_Init+0x1aa>
 8001d42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d46:	42a8      	cmp	r0, r5
 8001d48:	d043      	beq.n	8001dd2 <HAL_GPIO_Init+0x1ae>
 8001d4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d4e:	42a8      	cmp	r0, r5
 8001d50:	d041      	beq.n	8001dd6 <HAL_GPIO_Init+0x1b2>
 8001d52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d56:	42a8      	cmp	r0, r5
 8001d58:	d03f      	beq.n	8001dda <HAL_GPIO_Init+0x1b6>
 8001d5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d5e:	42a8      	cmp	r0, r5
 8001d60:	d03d      	beq.n	8001dde <HAL_GPIO_Init+0x1ba>
 8001d62:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d66:	42a8      	cmp	r0, r5
 8001d68:	bf0c      	ite	eq
 8001d6a:	2509      	moveq	r5, #9
 8001d6c:	250a      	movne	r5, #10
 8001d6e:	40bd      	lsls	r5, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d70:	03e7      	lsls	r7, r4, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d72:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d76:	60b5      	str	r5, [r6, #8]
        temp &= ~(iocurrent);
 8001d78:	ea6f 0602 	mvn.w	r6, r2
        temp = EXTI_CurrentCPU->IMR1;
 8001d7c:	f8dc 5000 	ldr.w	r5, [ip]
        temp &= ~(iocurrent);
 8001d80:	bf54      	ite	pl
 8001d82:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001d84:	4315      	orrmi	r5, r2
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d86:	03a7      	lsls	r7, r4, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8001d88:	f8cc 5000 	str.w	r5, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 8001d8c:	f8dc 5004 	ldr.w	r5, [ip, #4]
        temp &= ~(iocurrent);
 8001d90:	bf54      	ite	pl
 8001d92:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001d94:	4315      	orrmi	r5, r2
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d96:	02e7      	lsls	r7, r4, #11
        EXTI->RTSR1 = temp;
 8001d98:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8001d9c:	f8cc 5004 	str.w	r5, [ip, #4]
        temp = EXTI->RTSR1;
 8001da0:	f8d9 5000 	ldr.w	r5, [r9]
        temp &= ~(iocurrent);
 8001da4:	bf54      	ite	pl
 8001da6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001da8:	4315      	orrmi	r5, r2
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001daa:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR1 = temp;
 8001dac:	603d      	str	r5, [r7, #0]
        temp = EXTI->FTSR1;
 8001dae:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
 8001db0:	bf54      	ite	pl
 8001db2:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001db4:	4315      	orrmi	r5, r2
        EXTI->FTSR1 = temp;
 8001db6:	f8c9 5004 	str.w	r5, [r9, #4]
    position++;
 8001dba:	3301      	adds	r3, #1
 8001dbc:	e73b      	b.n	8001c36 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dbe:	2500      	movs	r5, #0
 8001dc0:	e7d5      	b.n	8001d6e <HAL_GPIO_Init+0x14a>
 8001dc2:	2501      	movs	r5, #1
 8001dc4:	e7d3      	b.n	8001d6e <HAL_GPIO_Init+0x14a>
 8001dc6:	2502      	movs	r5, #2
 8001dc8:	e7d1      	b.n	8001d6e <HAL_GPIO_Init+0x14a>
 8001dca:	2503      	movs	r5, #3
 8001dcc:	e7cf      	b.n	8001d6e <HAL_GPIO_Init+0x14a>
 8001dce:	2504      	movs	r5, #4
 8001dd0:	e7cd      	b.n	8001d6e <HAL_GPIO_Init+0x14a>
 8001dd2:	2505      	movs	r5, #5
 8001dd4:	e7cb      	b.n	8001d6e <HAL_GPIO_Init+0x14a>
 8001dd6:	2506      	movs	r5, #6
 8001dd8:	e7c9      	b.n	8001d6e <HAL_GPIO_Init+0x14a>
 8001dda:	2507      	movs	r5, #7
 8001ddc:	e7c7      	b.n	8001d6e <HAL_GPIO_Init+0x14a>
 8001dde:	2508      	movs	r5, #8
 8001de0:	e7c5      	b.n	8001d6e <HAL_GPIO_Init+0x14a>
 8001de2:	bf00      	nop
 8001de4:	58020000 	.word	0x58020000
 8001de8:	58024400 	.word	0x58024400
 8001dec:	58000080 	.word	0x58000080

08001df0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001df0:	b10a      	cbz	r2, 8001df6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001df2:	6181      	str	r1, [r0, #24]
  }
}
 8001df4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001df6:	0409      	lsls	r1, r1, #16
 8001df8:	e7fb      	b.n	8001df2 <HAL_GPIO_WritePin+0x2>

08001dfa <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dfa:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dfc:	ea01 0203 	and.w	r2, r1, r3
 8001e00:	ea21 0103 	bic.w	r1, r1, r3
 8001e04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001e08:	6181      	str	r1, [r0, #24]
}
 8001e0a:	4770      	bx	lr

08001e0c <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001e0c:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <HAL_HSEM_FastTake+0x14>)
 8001e0e:	3020      	adds	r0, #32
 8001e10:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <HAL_HSEM_FastTake+0x18>)
 8001e16:	1ac0      	subs	r0, r0, r3
 8001e18:	bf18      	it	ne
 8001e1a:	2001      	movne	r0, #1
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	58026400 	.word	0x58026400
 8001e24:	80000300 	.word	0x80000300

08001e28 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001e28:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8001e2c:	4b01      	ldr	r3, [pc, #4]	; (8001e34 <HAL_HSEM_Release+0xc>)
 8001e2e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8001e32:	4770      	bx	lr
 8001e34:	58026400 	.word	0x58026400

08001e38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e38:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e3a:	4604      	mov	r4, r0
{
 8001e3c:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8001e3e:	b360      	cbz	r0, 8001e9a <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e40:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8001e44:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e4a:	b91b      	cbnz	r3, 8001e54 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e4c:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e50:	f7ff fa8c 	bl	800136c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e54:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e56:	466e      	mov	r6, sp
 8001e58:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e5a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e5e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 8001e60:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e62:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8001e66:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8001e6a:	bf08      	it	eq
 8001e6c:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8001e6e:	f002 f953 	bl	8004118 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e74:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e78:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001e7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e7e:	4625      	mov	r5, r4
 8001e80:	e886 0003 	stmia.w	r6, {r0, r1}
 8001e84:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001e88:	f855 0b10 	ldr.w	r0, [r5], #16
 8001e8c:	f002 f8fa 	bl	8004084 <USB_CoreInit>
 8001e90:	4606      	mov	r6, r0
 8001e92:	b120      	cbz	r0, 8001e9e <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e94:	2302      	movs	r3, #2
 8001e96:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001e9a:	2501      	movs	r5, #1
 8001e9c:	e052      	b.n	8001f44 <HAL_PCD_Init+0x10c>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e9e:	4601      	mov	r1, r0
 8001ea0:	6820      	ldr	r0, [r4, #0]
 8001ea2:	f002 f93f 	bl	8004124 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea6:	4630      	mov	r0, r6
 8001ea8:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eac:	261c      	movs	r6, #28
 8001eae:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001eb2:	4601      	mov	r1, r0
 8001eb4:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb6:	3001      	adds	r0, #1
 8001eb8:	4594      	cmp	ip, r2
 8001eba:	d81b      	bhi.n	8001ef4 <HAL_PCD_Init+0xbc>
 8001ebc:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ebe:	261c      	movs	r6, #28
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	4584      	cmp	ip, r0
 8001ec8:	d822      	bhi.n	8001f10 <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eca:	466e      	mov	r6, sp
 8001ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ece:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ed2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001ed4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ed8:	e886 0003 	stmia.w	r6, {r0, r1}
 8001edc:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001ee0:	6820      	ldr	r0, [r4, #0]
 8001ee2:	f002 f961 	bl	80041a8 <USB_DevInit>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	4605      	mov	r5, r0
 8001eea:	b1f0      	cbz	r0, 8001f2a <HAL_PCD_Init+0xf2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eec:	2202      	movs	r2, #2
 8001eee:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001ef2:	e7d2      	b.n	8001e9a <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8001ef4:	fb06 4302 	mla	r3, r6, r2, r4
 8001ef8:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f00:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f04:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f08:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f0a:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0e:	e7d1      	b.n	8001eb4 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8001f10:	fb06 4200 	mla	r2, r6, r0, r4
 8001f14:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8001f18:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f1c:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f20:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f24:	e9c2 1181 	strd	r1, r1, [r2, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f28:	e7cb      	b.n	8001ec2 <HAL_PCD_Init+0x8a>
  }

  hpcd->USB_Address = 0U;
 8001f2a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f2e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d102      	bne.n	8001f3e <HAL_PCD_Init+0x106>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f000 f806 	bl	8001f4a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f3e:	6820      	ldr	r0, [r4, #0]
 8001f40:	f002 f9e8 	bl	8004314 <USB_DevDisconnect>

  return HAL_OK;
}
 8001f44:	4628      	mov	r0, r5
 8001f46:	b00b      	add	sp, #44	; 0x2c
 8001f48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f4a <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f4a:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8001f4c:	2100      	movs	r1, #0
  hpcd->lpm_active = 1U;
 8001f4e:	2301      	movs	r3, #1
  hpcd->LPM_State = LPM_L0;
 8001f50:	f880 13f4 	strb.w	r1, [r0, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 8001f54:	f8c0 33fc 	str.w	r3, [r0, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);

  return HAL_OK;
}
 8001f58:	4608      	mov	r0, r1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f5a:	6993      	ldr	r3, [r2, #24]
 8001f5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f60:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f62:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f68:	f043 0303 	orr.w	r3, r3, #3
 8001f6c:	6553      	str	r3, [r2, #84]	; 0x54
}
 8001f6e:	4770      	bx	lr

08001f70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f70:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001f72:	4d1c      	ldr	r5, [pc, #112]	; (8001fe4 <HAL_PWREx_ConfigSupply+0x74>)
{
 8001f74:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001f76:	68eb      	ldr	r3, [r5, #12]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	2b06      	cmp	r3, #6
 8001f7e:	d006      	beq.n	8001f8e <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f80:	68e8      	ldr	r0, [r5, #12]
 8001f82:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001f86:	1b00      	subs	r0, r0, r4
 8001f88:	bf18      	it	ne
 8001f8a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8001f8c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f8e:	68eb      	ldr	r3, [r5, #12]
 8001f90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f94:	4303      	orrs	r3, r0
 8001f96:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8001f98:	f7ff fb02 	bl	80015a0 <HAL_GetTick>
 8001f9c:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f9e:	686b      	ldr	r3, [r5, #4]
 8001fa0:	049a      	lsls	r2, r3, #18
 8001fa2:	d508      	bpl.n	8001fb6 <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001fa4:	f1a4 031d 	sub.w	r3, r4, #29
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d90c      	bls.n	8001fc6 <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001fac:	3c2d      	subs	r4, #45	; 0x2d
 8001fae:	2c01      	cmp	r4, #1
 8001fb0:	d909      	bls.n	8001fc6 <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	e7ea      	b.n	8001f8c <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001fb6:	f7ff faf3 	bl	80015a0 <HAL_GetTick>
 8001fba:	1b80      	subs	r0, r0, r6
 8001fbc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001fc0:	d9ed      	bls.n	8001f9e <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	e7e2      	b.n	8001f8c <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8001fc6:	f7ff faeb 	bl	80015a0 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001fca:	4d06      	ldr	r5, [pc, #24]	; (8001fe4 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8001fcc:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001fce:	68eb      	ldr	r3, [r5, #12]
 8001fd0:	03db      	lsls	r3, r3, #15
 8001fd2:	d4ee      	bmi.n	8001fb2 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001fd4:	f7ff fae4 	bl	80015a0 <HAL_GetTick>
 8001fd8:	1b00      	subs	r0, r0, r4
 8001fda:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001fde:	d9f6      	bls.n	8001fce <HAL_PWREx_ConfigSupply+0x5e>
 8001fe0:	e7ef      	b.n	8001fc2 <HAL_PWREx_ConfigSupply+0x52>
 8001fe2:	bf00      	nop
 8001fe4:	58024800 	.word	0x58024800

08001fe8 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001fe8:	4a02      	ldr	r2, [pc, #8]	; (8001ff4 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8001fea:	68d3      	ldr	r3, [r2, #12]
 8001fec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ff0:	60d3      	str	r3, [r2, #12]
}
 8001ff2:	4770      	bx	lr
 8001ff4:	58024800 	.word	0x58024800

08001ff8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ffa:	4604      	mov	r4, r0
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	d074      	beq.n	80020ea <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002000:	6803      	ldr	r3, [r0, #0]
 8002002:	07d8      	lsls	r0, r3, #31
 8002004:	d45e      	bmi.n	80020c4 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002006:	6823      	ldr	r3, [r4, #0]
 8002008:	0799      	lsls	r1, r3, #30
 800200a:	f100 80b0 	bmi.w	800216e <HAL_RCC_OscConfig+0x176>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	06da      	lsls	r2, r3, #27
 8002012:	d527      	bpl.n	8002064 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002014:	4baa      	ldr	r3, [pc, #680]	; (80022c0 <HAL_RCC_OscConfig+0x2c8>)
 8002016:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002018:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800201e:	2a08      	cmp	r2, #8
 8002020:	d007      	beq.n	8002032 <HAL_RCC_OscConfig+0x3a>
 8002022:	2a18      	cmp	r2, #24
 8002024:	f040 810e 	bne.w	8002244 <HAL_RCC_OscConfig+0x24c>
 8002028:	f001 0203 	and.w	r2, r1, #3
 800202c:	2a01      	cmp	r2, #1
 800202e:	f040 8109 	bne.w	8002244 <HAL_RCC_OscConfig+0x24c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	05db      	lsls	r3, r3, #23
 8002036:	d502      	bpl.n	800203e <HAL_RCC_OscConfig+0x46>
 8002038:	69e3      	ldr	r3, [r4, #28]
 800203a:	2b80      	cmp	r3, #128	; 0x80
 800203c:	d155      	bne.n	80020ea <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800203e:	f7ff fac7 	bl	80015d0 <HAL_GetREVID>
 8002042:	f241 0303 	movw	r3, #4099	; 0x1003
 8002046:	6a21      	ldr	r1, [r4, #32]
 8002048:	4298      	cmp	r0, r3
 800204a:	4b9d      	ldr	r3, [pc, #628]	; (80022c0 <HAL_RCC_OscConfig+0x2c8>)
 800204c:	f200 80f3 	bhi.w	8002236 <HAL_RCC_OscConfig+0x23e>
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	2920      	cmp	r1, #32
 8002054:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8002058:	bf0c      	ite	eq
 800205a:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 800205e:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8002062:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002064:	6823      	ldr	r3, [r4, #0]
 8002066:	0719      	lsls	r1, r3, #28
 8002068:	f100 812e 	bmi.w	80022c8 <HAL_RCC_OscConfig+0x2d0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800206c:	6823      	ldr	r3, [r4, #0]
 800206e:	069a      	lsls	r2, r3, #26
 8002070:	f100 814f 	bmi.w	8002312 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002074:	6823      	ldr	r3, [r4, #0]
 8002076:	075d      	lsls	r5, r3, #29
 8002078:	d51e      	bpl.n	80020b8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800207a:	4d92      	ldr	r5, [pc, #584]	; (80022c4 <HAL_RCC_OscConfig+0x2cc>)
 800207c:	682b      	ldr	r3, [r5, #0]
 800207e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002082:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002084:	f7ff fa8c 	bl	80015a0 <HAL_GetTick>
 8002088:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800208a:	682b      	ldr	r3, [r5, #0]
 800208c:	05da      	lsls	r2, r3, #23
 800208e:	f140 8165 	bpl.w	800235c <HAL_RCC_OscConfig+0x364>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002092:	68a3      	ldr	r3, [r4, #8]
 8002094:	4d8a      	ldr	r5, [pc, #552]	; (80022c0 <HAL_RCC_OscConfig+0x2c8>)
 8002096:	2b01      	cmp	r3, #1
 8002098:	f040 8167 	bne.w	800236a <HAL_RCC_OscConfig+0x372>
 800209c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80020a8:	f7ff fa7a 	bl	80015a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020ac:	4e84      	ldr	r6, [pc, #528]	; (80022c0 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80020ae:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020b0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80020b2:	079b      	lsls	r3, r3, #30
 80020b4:	f140 817f 	bpl.w	80023b6 <HAL_RCC_OscConfig+0x3be>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80020ba:	2900      	cmp	r1, #0
 80020bc:	f040 8182 	bne.w	80023c4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80020c0:	2000      	movs	r0, #0
 80020c2:	e02a      	b.n	800211a <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c4:	4b7e      	ldr	r3, [pc, #504]	; (80022c0 <HAL_RCC_OscConfig+0x2c8>)
 80020c6:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020c8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ca:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80020ce:	2a10      	cmp	r2, #16
 80020d0:	d005      	beq.n	80020de <HAL_RCC_OscConfig+0xe6>
 80020d2:	2a18      	cmp	r2, #24
 80020d4:	d10b      	bne.n	80020ee <HAL_RCC_OscConfig+0xf6>
 80020d6:	f001 0203 	and.w	r2, r1, #3
 80020da:	2a02      	cmp	r2, #2
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	039a      	lsls	r2, r3, #14
 80020e2:	d590      	bpl.n	8002006 <HAL_RCC_OscConfig+0xe>
 80020e4:	6863      	ldr	r3, [r4, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d18d      	bne.n	8002006 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 80020ea:	2001      	movs	r0, #1
 80020ec:	e015      	b.n	800211a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ee:	6862      	ldr	r2, [r4, #4]
 80020f0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80020f4:	d112      	bne.n	800211c <HAL_RCC_OscConfig+0x124>
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020fe:	f7ff fa4f 	bl	80015a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002102:	4e6f      	ldr	r6, [pc, #444]	; (80022c0 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8002104:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002106:	6833      	ldr	r3, [r6, #0]
 8002108:	039b      	lsls	r3, r3, #14
 800210a:	f53f af7c 	bmi.w	8002006 <HAL_RCC_OscConfig+0xe>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800210e:	f7ff fa47 	bl	80015a0 <HAL_GetTick>
 8002112:	1b40      	subs	r0, r0, r5
 8002114:	2864      	cmp	r0, #100	; 0x64
 8002116:	d9f6      	bls.n	8002106 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8002118:	2003      	movs	r0, #3
}
 800211a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211c:	4d68      	ldr	r5, [pc, #416]	; (80022c0 <HAL_RCC_OscConfig+0x2c8>)
 800211e:	682b      	ldr	r3, [r5, #0]
 8002120:	b99a      	cbnz	r2, 800214a <HAL_RCC_OscConfig+0x152>
 8002122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002126:	602b      	str	r3, [r5, #0]
 8002128:	682b      	ldr	r3, [r5, #0]
 800212a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002130:	f7ff fa36 	bl	80015a0 <HAL_GetTick>
 8002134:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002136:	682b      	ldr	r3, [r5, #0]
 8002138:	039f      	lsls	r7, r3, #14
 800213a:	f57f af64 	bpl.w	8002006 <HAL_RCC_OscConfig+0xe>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800213e:	f7ff fa2f 	bl	80015a0 <HAL_GetTick>
 8002142:	1b80      	subs	r0, r0, r6
 8002144:	2864      	cmp	r0, #100	; 0x64
 8002146:	d9f6      	bls.n	8002136 <HAL_RCC_OscConfig+0x13e>
 8002148:	e7e6      	b.n	8002118 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800214e:	d107      	bne.n	8002160 <HAL_RCC_OscConfig+0x168>
 8002150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002154:	602b      	str	r3, [r5, #0]
 8002156:	682b      	ldr	r3, [r5, #0]
 8002158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215c:	602b      	str	r3, [r5, #0]
 800215e:	e7ce      	b.n	80020fe <HAL_RCC_OscConfig+0x106>
 8002160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002164:	602b      	str	r3, [r5, #0]
 8002166:	682b      	ldr	r3, [r5, #0]
 8002168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216c:	e7f6      	b.n	800215c <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800216e:	4b54      	ldr	r3, [pc, #336]	; (80022c0 <HAL_RCC_OscConfig+0x2c8>)
 8002170:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002172:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002174:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8002178:	d003      	beq.n	8002182 <HAL_RCC_OscConfig+0x18a>
 800217a:	2a18      	cmp	r2, #24
 800217c:	d11f      	bne.n	80021be <HAL_RCC_OscConfig+0x1c6>
 800217e:	078e      	lsls	r6, r1, #30
 8002180:	d11d      	bne.n	80021be <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	075d      	lsls	r5, r3, #29
 8002186:	d502      	bpl.n	800218e <HAL_RCC_OscConfig+0x196>
 8002188:	68e3      	ldr	r3, [r4, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0ad      	beq.n	80020ea <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218e:	f7ff fa1f 	bl	80015d0 <HAL_GetREVID>
 8002192:	f241 0303 	movw	r3, #4099	; 0x1003
 8002196:	6921      	ldr	r1, [r4, #16]
 8002198:	4298      	cmp	r0, r3
 800219a:	4b49      	ldr	r3, [pc, #292]	; (80022c0 <HAL_RCC_OscConfig+0x2c8>)
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	d809      	bhi.n	80021b4 <HAL_RCC_OscConfig+0x1bc>
 80021a0:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 80021a4:	2940      	cmp	r1, #64	; 0x40
 80021a6:	bf0c      	ite	eq
 80021a8:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 80021ac:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	e72c      	b.n	800200e <HAL_RCC_OscConfig+0x16>
 80021b4:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80021b8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80021bc:	e7f8      	b.n	80021b0 <HAL_RCC_OscConfig+0x1b8>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021be:	68e1      	ldr	r1, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021c0:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021c2:	b339      	cbz	r1, 8002214 <HAL_RCC_OscConfig+0x21c>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021c4:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021c8:	4d3d      	ldr	r5, [pc, #244]	; (80022c0 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021ca:	430a      	orrs	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021ce:	f7ff f9e7 	bl	80015a0 <HAL_GetTick>
 80021d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021d4:	682b      	ldr	r3, [r5, #0]
 80021d6:	0758      	lsls	r0, r3, #29
 80021d8:	d511      	bpl.n	80021fe <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021da:	f7ff f9f9 	bl	80015d0 <HAL_GetREVID>
 80021de:	f241 0303 	movw	r3, #4099	; 0x1003
 80021e2:	6922      	ldr	r2, [r4, #16]
 80021e4:	4298      	cmp	r0, r3
 80021e6:	686b      	ldr	r3, [r5, #4]
 80021e8:	d80f      	bhi.n	800220a <HAL_RCC_OscConfig+0x212>
 80021ea:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80021ee:	2a40      	cmp	r2, #64	; 0x40
 80021f0:	bf0c      	ite	eq
 80021f2:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 80021f6:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80021fa:	606b      	str	r3, [r5, #4]
 80021fc:	e707      	b.n	800200e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021fe:	f7ff f9cf 	bl	80015a0 <HAL_GetTick>
 8002202:	1b80      	subs	r0, r0, r6
 8002204:	2802      	cmp	r0, #2
 8002206:	d9e5      	bls.n	80021d4 <HAL_RCC_OscConfig+0x1dc>
 8002208:	e786      	b.n	8002118 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800220e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002212:	e7f2      	b.n	80021fa <HAL_RCC_OscConfig+0x202>
        __HAL_RCC_HSI_DISABLE();
 8002214:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002218:	4e29      	ldr	r6, [pc, #164]	; (80022c0 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 800221a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800221c:	f7ff f9c0 	bl	80015a0 <HAL_GetTick>
 8002220:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002222:	6833      	ldr	r3, [r6, #0]
 8002224:	0759      	lsls	r1, r3, #29
 8002226:	f57f aef2 	bpl.w	800200e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800222a:	f7ff f9b9 	bl	80015a0 <HAL_GetTick>
 800222e:	1b40      	subs	r0, r0, r5
 8002230:	2802      	cmp	r0, #2
 8002232:	d9f6      	bls.n	8002222 <HAL_RCC_OscConfig+0x22a>
 8002234:	e770      	b.n	8002118 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 800223c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	e70f      	b.n	8002064 <HAL_RCC_OscConfig+0x6c>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002244:	69e2      	ldr	r2, [r4, #28]
 8002246:	b34a      	cbz	r2, 800229c <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_CSI_ENABLE();
 8002248:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800224a:	4d1d      	ldr	r5, [pc, #116]	; (80022c0 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_CSI_ENABLE();
 800224c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002250:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002252:	f7ff f9a5 	bl	80015a0 <HAL_GetTick>
 8002256:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002258:	682b      	ldr	r3, [r5, #0]
 800225a:	05df      	lsls	r7, r3, #23
 800225c:	d511      	bpl.n	8002282 <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800225e:	f7ff f9b7 	bl	80015d0 <HAL_GetREVID>
 8002262:	f241 0303 	movw	r3, #4099	; 0x1003
 8002266:	6a22      	ldr	r2, [r4, #32]
 8002268:	4298      	cmp	r0, r3
 800226a:	d810      	bhi.n	800228e <HAL_RCC_OscConfig+0x296>
 800226c:	686b      	ldr	r3, [r5, #4]
 800226e:	2a20      	cmp	r2, #32
 8002270:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002274:	bf0c      	ite	eq
 8002276:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800227a:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800227e:	606b      	str	r3, [r5, #4]
 8002280:	e6f0      	b.n	8002064 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002282:	f7ff f98d 	bl	80015a0 <HAL_GetTick>
 8002286:	1b80      	subs	r0, r0, r6
 8002288:	2802      	cmp	r0, #2
 800228a:	d9e5      	bls.n	8002258 <HAL_RCC_OscConfig+0x260>
 800228c:	e744      	b.n	8002118 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800228e:	68eb      	ldr	r3, [r5, #12]
 8002290:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002294:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002298:	60eb      	str	r3, [r5, #12]
 800229a:	e6e3      	b.n	8002064 <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_CSI_DISABLE();
 800229c:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800229e:	4e08      	ldr	r6, [pc, #32]	; (80022c0 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_CSI_DISABLE();
 80022a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022a6:	f7ff f97b 	bl	80015a0 <HAL_GetTick>
 80022aa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80022ac:	6833      	ldr	r3, [r6, #0]
 80022ae:	05d8      	lsls	r0, r3, #23
 80022b0:	f57f aed8 	bpl.w	8002064 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80022b4:	f7ff f974 	bl	80015a0 <HAL_GetTick>
 80022b8:	1b40      	subs	r0, r0, r5
 80022ba:	2802      	cmp	r0, #2
 80022bc:	d9f6      	bls.n	80022ac <HAL_RCC_OscConfig+0x2b4>
 80022be:	e72b      	b.n	8002118 <HAL_RCC_OscConfig+0x120>
 80022c0:	58024400 	.word	0x58024400
 80022c4:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022c8:	6963      	ldr	r3, [r4, #20]
 80022ca:	4d96      	ldr	r5, [pc, #600]	; (8002524 <HAL_RCC_OscConfig+0x52c>)
 80022cc:	b183      	cbz	r3, 80022f0 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_LSI_ENABLE();
 80022ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80022d6:	f7ff f963 	bl	80015a0 <HAL_GetTick>
 80022da:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022dc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80022de:	079b      	lsls	r3, r3, #30
 80022e0:	f53f aec4 	bmi.w	800206c <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e4:	f7ff f95c 	bl	80015a0 <HAL_GetTick>
 80022e8:	1b80      	subs	r0, r0, r6
 80022ea:	2802      	cmp	r0, #2
 80022ec:	d9f6      	bls.n	80022dc <HAL_RCC_OscConfig+0x2e4>
 80022ee:	e713      	b.n	8002118 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 80022f0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80022f2:	f023 0301 	bic.w	r3, r3, #1
 80022f6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80022f8:	f7ff f952 	bl	80015a0 <HAL_GetTick>
 80022fc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022fe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002300:	079f      	lsls	r7, r3, #30
 8002302:	f57f aeb3 	bpl.w	800206c <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002306:	f7ff f94b 	bl	80015a0 <HAL_GetTick>
 800230a:	1b80      	subs	r0, r0, r6
 800230c:	2802      	cmp	r0, #2
 800230e:	d9f6      	bls.n	80022fe <HAL_RCC_OscConfig+0x306>
 8002310:	e702      	b.n	8002118 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002312:	69a3      	ldr	r3, [r4, #24]
 8002314:	4d83      	ldr	r5, [pc, #524]	; (8002524 <HAL_RCC_OscConfig+0x52c>)
 8002316:	b183      	cbz	r3, 800233a <HAL_RCC_OscConfig+0x342>
      __HAL_RCC_HSI48_ENABLE();
 8002318:	682b      	ldr	r3, [r5, #0]
 800231a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800231e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002320:	f7ff f93e 	bl	80015a0 <HAL_GetTick>
 8002324:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002326:	682b      	ldr	r3, [r5, #0]
 8002328:	0498      	lsls	r0, r3, #18
 800232a:	f53f aea3 	bmi.w	8002074 <HAL_RCC_OscConfig+0x7c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800232e:	f7ff f937 	bl	80015a0 <HAL_GetTick>
 8002332:	1b80      	subs	r0, r0, r6
 8002334:	2802      	cmp	r0, #2
 8002336:	d9f6      	bls.n	8002326 <HAL_RCC_OscConfig+0x32e>
 8002338:	e6ee      	b.n	8002118 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 800233a:	682b      	ldr	r3, [r5, #0]
 800233c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002340:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002342:	f7ff f92d 	bl	80015a0 <HAL_GetTick>
 8002346:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002348:	682b      	ldr	r3, [r5, #0]
 800234a:	0499      	lsls	r1, r3, #18
 800234c:	f57f ae92 	bpl.w	8002074 <HAL_RCC_OscConfig+0x7c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002350:	f7ff f926 	bl	80015a0 <HAL_GetTick>
 8002354:	1b80      	subs	r0, r0, r6
 8002356:	2802      	cmp	r0, #2
 8002358:	d9f6      	bls.n	8002348 <HAL_RCC_OscConfig+0x350>
 800235a:	e6dd      	b.n	8002118 <HAL_RCC_OscConfig+0x120>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800235c:	f7ff f920 	bl	80015a0 <HAL_GetTick>
 8002360:	1b80      	subs	r0, r0, r6
 8002362:	2864      	cmp	r0, #100	; 0x64
 8002364:	f67f ae91 	bls.w	800208a <HAL_RCC_OscConfig+0x92>
 8002368:	e6d6      	b.n	8002118 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236a:	b9b3      	cbnz	r3, 800239a <HAL_RCC_OscConfig+0x3a2>
 800236c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002372:	f023 0301 	bic.w	r3, r3, #1
 8002376:	672b      	str	r3, [r5, #112]	; 0x70
 8002378:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800237a:	f023 0304 	bic.w	r3, r3, #4
 800237e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002380:	f7ff f90e 	bl	80015a0 <HAL_GetTick>
 8002384:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002386:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002388:	0798      	lsls	r0, r3, #30
 800238a:	f57f ae95 	bpl.w	80020b8 <HAL_RCC_OscConfig+0xc0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7ff f907 	bl	80015a0 <HAL_GetTick>
 8002392:	1b80      	subs	r0, r0, r6
 8002394:	42b8      	cmp	r0, r7
 8002396:	d9f6      	bls.n	8002386 <HAL_RCC_OscConfig+0x38e>
 8002398:	e6be      	b.n	8002118 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239a:	2b05      	cmp	r3, #5
 800239c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800239e:	d103      	bne.n	80023a8 <HAL_RCC_OscConfig+0x3b0>
 80023a0:	f043 0304 	orr.w	r3, r3, #4
 80023a4:	672b      	str	r3, [r5, #112]	; 0x70
 80023a6:	e679      	b.n	800209c <HAL_RCC_OscConfig+0xa4>
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	672b      	str	r3, [r5, #112]	; 0x70
 80023ae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80023b0:	f023 0304 	bic.w	r3, r3, #4
 80023b4:	e675      	b.n	80020a2 <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b6:	f7ff f8f3 	bl	80015a0 <HAL_GetTick>
 80023ba:	1b40      	subs	r0, r0, r5
 80023bc:	42b8      	cmp	r0, r7
 80023be:	f67f ae77 	bls.w	80020b0 <HAL_RCC_OscConfig+0xb8>
 80023c2:	e6a9      	b.n	8002118 <HAL_RCC_OscConfig+0x120>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80023c4:	4d57      	ldr	r5, [pc, #348]	; (8002524 <HAL_RCC_OscConfig+0x52c>)
 80023c6:	692b      	ldr	r3, [r5, #16]
 80023c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023cc:	2b18      	cmp	r3, #24
 80023ce:	d07a      	beq.n	80024c6 <HAL_RCC_OscConfig+0x4ce>
        __HAL_RCC_PLL_DISABLE();
 80023d0:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d2:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 80023d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023da:	d167      	bne.n	80024ac <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
 80023dc:	f7ff f8e0 	bl	80015a0 <HAL_GetTick>
 80023e0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023e2:	682b      	ldr	r3, [r5, #0]
 80023e4:	0199      	lsls	r1, r3, #6
 80023e6:	d45b      	bmi.n	80024a0 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80023ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80023ec:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 80023f0:	f023 0303 	bic.w	r3, r3, #3
 80023f4:	4313      	orrs	r3, r2
 80023f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023f8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80023fc:	62ab      	str	r3, [r5, #40]	; 0x28
 80023fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002400:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002402:	3b01      	subs	r3, #1
 8002404:	3a01      	subs	r2, #1
 8002406:	025b      	lsls	r3, r3, #9
 8002408:	0412      	lsls	r2, r2, #16
 800240a:	b29b      	uxth	r3, r3
 800240c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002410:	4313      	orrs	r3, r2
 8002412:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002414:	3a01      	subs	r2, #1
 8002416:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800241a:	4313      	orrs	r3, r2
 800241c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800241e:	3a01      	subs	r2, #1
 8002420:	0612      	lsls	r2, r2, #24
 8002422:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002426:	4313      	orrs	r3, r2
 8002428:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800242a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002432:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002434:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800243a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800243e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002442:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002444:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002446:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002448:	f023 030c 	bic.w	r3, r3, #12
 800244c:	4313      	orrs	r3, r2
 800244e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002450:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002452:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002454:	f023 0302 	bic.w	r3, r3, #2
 8002458:	4313      	orrs	r3, r2
 800245a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800245c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800245e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002462:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002464:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800246a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800246c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800246e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002472:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8002474:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800247c:	682b      	ldr	r3, [r5, #0]
 800247e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002482:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002484:	f7ff f88c 	bl	80015a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002488:	4d26      	ldr	r5, [pc, #152]	; (8002524 <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 800248a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800248c:	682b      	ldr	r3, [r5, #0]
 800248e:	019a      	lsls	r2, r3, #6
 8002490:	f53f ae16 	bmi.w	80020c0 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002494:	f7ff f884 	bl	80015a0 <HAL_GetTick>
 8002498:	1b00      	subs	r0, r0, r4
 800249a:	2802      	cmp	r0, #2
 800249c:	d9f6      	bls.n	800248c <HAL_RCC_OscConfig+0x494>
 800249e:	e63b      	b.n	8002118 <HAL_RCC_OscConfig+0x120>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a0:	f7ff f87e 	bl	80015a0 <HAL_GetTick>
 80024a4:	1b80      	subs	r0, r0, r6
 80024a6:	2802      	cmp	r0, #2
 80024a8:	d99b      	bls.n	80023e2 <HAL_RCC_OscConfig+0x3ea>
 80024aa:	e635      	b.n	8002118 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 80024ac:	f7ff f878 	bl	80015a0 <HAL_GetTick>
 80024b0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024b2:	682b      	ldr	r3, [r5, #0]
 80024b4:	019b      	lsls	r3, r3, #6
 80024b6:	f57f ae03 	bpl.w	80020c0 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ba:	f7ff f871 	bl	80015a0 <HAL_GetTick>
 80024be:	1b00      	subs	r0, r0, r4
 80024c0:	2802      	cmp	r0, #2
 80024c2:	d9f6      	bls.n	80024b2 <HAL_RCC_OscConfig+0x4ba>
 80024c4:	e628      	b.n	8002118 <HAL_RCC_OscConfig+0x120>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024c6:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80024c8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024cc:	f43f ae0d 	beq.w	80020ea <HAL_RCC_OscConfig+0xf2>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d0:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80024d6:	4281      	cmp	r1, r0
 80024d8:	f47f ae07 	bne.w	80020ea <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024dc:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80024e2:	428a      	cmp	r2, r1
 80024e4:	f47f ae01 	bne.w	80020ea <HAL_RCC_OscConfig+0xf2>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80024ea:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80024ee:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024f0:	4291      	cmp	r1, r2
 80024f2:	f47f adfa 	bne.w	80020ea <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80024f8:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80024fc:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024fe:	4291      	cmp	r1, r2
 8002500:	f47f adf3 	bne.w	80020ea <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002504:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002506:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800250a:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800250c:	4291      	cmp	r1, r2
 800250e:	f47f adec 	bne.w	80020ea <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002512:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002514:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002518:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800251a:	4293      	cmp	r3, r2
 800251c:	f43f add0 	beq.w	80020c0 <HAL_RCC_OscConfig+0xc8>
 8002520:	e5e3      	b.n	80020ea <HAL_RCC_OscConfig+0xf2>
 8002522:	bf00      	nop
 8002524:	58024400 	.word	0x58024400

08002528 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002528:	4b48      	ldr	r3, [pc, #288]	; (800264c <HAL_RCC_GetSysClockFreq+0x124>)
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002530:	2a10      	cmp	r2, #16
{
 8002532:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002534:	f000 8086 	beq.w	8002644 <HAL_RCC_GetSysClockFreq+0x11c>
 8002538:	2a18      	cmp	r2, #24
 800253a:	d00c      	beq.n	8002556 <HAL_RCC_GetSysClockFreq+0x2e>
 800253c:	2a00      	cmp	r2, #0
 800253e:	f040 8083 	bne.w	8002648 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4842      	ldr	r0, [pc, #264]	; (8002650 <HAL_RCC_GetSysClockFreq+0x128>)
 8002546:	f012 0f20 	tst.w	r2, #32
 800254a:	d003      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002552:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8002554:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002556:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002558:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800255a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    if (pllm != 0U)
 800255c:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002560:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002564:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 8002566:	d0f5      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002568:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800256c:	f002 0201 	and.w	r2, r2, #1
 8002570:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002574:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002578:	4362      	muls	r2, r4
 800257a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800257e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002582:	2901      	cmp	r1, #1
 8002584:	ee07 2a90 	vmov	s15, r2
 8002588:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 800258c:	d04c      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x100>
 800258e:	2902      	cmp	r1, #2
 8002590:	d03c      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0xe4>
 8002592:	2900      	cmp	r1, #0
 8002594:	d148      	bne.n	8002628 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	0692      	lsls	r2, r2, #26
 800259a:	d527      	bpl.n	80025ec <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	4a2c      	ldr	r2, [pc, #176]	; (8002650 <HAL_RCC_GetSysClockFreq+0x128>)
 80025a0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80025a6:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ac:	ee07 2a10 	vmov	s14, r2
 80025b0:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80025b4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80025b8:	ee06 3a90 	vmov	s13, r3
 80025bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80025c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025c4:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80025c8:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025ca:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80025d4:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80025d6:	ee07 3a10 	vmov	s14, r3
 80025da:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80025de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025e2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80025e6:	ee17 0a90 	vmov	r0, s15
 80025ea:	e7b3      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f2:	ee07 3a10 	vmov	s14, r3
 80025f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80025fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002602:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8002654 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002606:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800260a:	e7dd      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002612:	ee07 3a10 	vmov	s14, r3
 8002616:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800261a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800261e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002622:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8002658 <HAL_RCC_GetSysClockFreq+0x130>
 8002626:	e7ee      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800262e:	ee07 3a10 	vmov	s14, r3
 8002632:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800263a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800263e:	ed9f 6a07 	vldr	s12, [pc, #28]	; 800265c <HAL_RCC_GetSysClockFreq+0x134>
 8002642:	e7e0      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002644:	4806      	ldr	r0, [pc, #24]	; (8002660 <HAL_RCC_GetSysClockFreq+0x138>)
 8002646:	e785      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8002648:	4806      	ldr	r0, [pc, #24]	; (8002664 <HAL_RCC_GetSysClockFreq+0x13c>)
 800264a:	e783      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x2c>
 800264c:	58024400 	.word	0x58024400
 8002650:	03d09000 	.word	0x03d09000
 8002654:	4c742400 	.word	0x4c742400
 8002658:	4af42400 	.word	0x4af42400
 800265c:	4a742400 	.word	0x4a742400
 8002660:	007a1200 	.word	0x007a1200
 8002664:	003d0900 	.word	0x003d0900

08002668 <HAL_RCC_ClockConfig>:
{
 8002668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800266c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800266e:	4604      	mov	r4, r0
 8002670:	b910      	cbnz	r0, 8002678 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002672:	2001      	movs	r0, #1
}
 8002674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002678:	4a88      	ldr	r2, [pc, #544]	; (800289c <HAL_RCC_ClockConfig+0x234>)
 800267a:	6813      	ldr	r3, [r2, #0]
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	428b      	cmp	r3, r1
 8002682:	f0c0 8093 	bcc.w	80027ac <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	075f      	lsls	r7, r3, #29
 800268a:	f100 809b 	bmi.w	80027c4 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268e:	071e      	lsls	r6, r3, #28
 8002690:	d50b      	bpl.n	80026aa <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002692:	4983      	ldr	r1, [pc, #524]	; (80028a0 <HAL_RCC_ClockConfig+0x238>)
 8002694:	6966      	ldr	r6, [r4, #20]
 8002696:	69c8      	ldr	r0, [r1, #28]
 8002698:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800269c:	4286      	cmp	r6, r0
 800269e:	d904      	bls.n	80026aa <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026a0:	69ca      	ldr	r2, [r1, #28]
 80026a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026a6:	4332      	orrs	r2, r6
 80026a8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026aa:	06d8      	lsls	r0, r3, #27
 80026ac:	d50b      	bpl.n	80026c6 <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026ae:	497c      	ldr	r1, [pc, #496]	; (80028a0 <HAL_RCC_ClockConfig+0x238>)
 80026b0:	69a6      	ldr	r6, [r4, #24]
 80026b2:	69c8      	ldr	r0, [r1, #28]
 80026b4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80026b8:	4286      	cmp	r6, r0
 80026ba:	d904      	bls.n	80026c6 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026bc:	69ca      	ldr	r2, [r1, #28]
 80026be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026c2:	4332      	orrs	r2, r6
 80026c4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026c6:	0699      	lsls	r1, r3, #26
 80026c8:	d50b      	bpl.n	80026e2 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026ca:	4975      	ldr	r1, [pc, #468]	; (80028a0 <HAL_RCC_ClockConfig+0x238>)
 80026cc:	69e6      	ldr	r6, [r4, #28]
 80026ce:	6a08      	ldr	r0, [r1, #32]
 80026d0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80026d4:	4286      	cmp	r6, r0
 80026d6:	d904      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80026d8:	6a0a      	ldr	r2, [r1, #32]
 80026da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026de:	4332      	orrs	r2, r6
 80026e0:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e2:	079a      	lsls	r2, r3, #30
 80026e4:	d50b      	bpl.n	80026fe <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80026e6:	496e      	ldr	r1, [pc, #440]	; (80028a0 <HAL_RCC_ClockConfig+0x238>)
 80026e8:	68e6      	ldr	r6, [r4, #12]
 80026ea:	6988      	ldr	r0, [r1, #24]
 80026ec:	f000 000f 	and.w	r0, r0, #15
 80026f0:	4286      	cmp	r6, r0
 80026f2:	d904      	bls.n	80026fe <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f4:	698a      	ldr	r2, [r1, #24]
 80026f6:	f022 020f 	bic.w	r2, r2, #15
 80026fa:	4332      	orrs	r2, r6
 80026fc:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fe:	07df      	lsls	r7, r3, #31
 8002700:	d46e      	bmi.n	80027e0 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002702:	6823      	ldr	r3, [r4, #0]
 8002704:	079e      	lsls	r6, r3, #30
 8002706:	f100 80a1 	bmi.w	800284c <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800270a:	4964      	ldr	r1, [pc, #400]	; (800289c <HAL_RCC_ClockConfig+0x234>)
 800270c:	680a      	ldr	r2, [r1, #0]
 800270e:	f002 020f 	and.w	r2, r2, #15
 8002712:	42aa      	cmp	r2, r5
 8002714:	f200 80a8 	bhi.w	8002868 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002718:	0758      	lsls	r0, r3, #29
 800271a:	f100 80b1 	bmi.w	8002880 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271e:	0719      	lsls	r1, r3, #28
 8002720:	d50b      	bpl.n	800273a <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002722:	495f      	ldr	r1, [pc, #380]	; (80028a0 <HAL_RCC_ClockConfig+0x238>)
 8002724:	6965      	ldr	r5, [r4, #20]
 8002726:	69c8      	ldr	r0, [r1, #28]
 8002728:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800272c:	4285      	cmp	r5, r0
 800272e:	d204      	bcs.n	800273a <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002730:	69ca      	ldr	r2, [r1, #28]
 8002732:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002736:	432a      	orrs	r2, r5
 8002738:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273a:	06da      	lsls	r2, r3, #27
 800273c:	d50b      	bpl.n	8002756 <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800273e:	4958      	ldr	r1, [pc, #352]	; (80028a0 <HAL_RCC_ClockConfig+0x238>)
 8002740:	69a5      	ldr	r5, [r4, #24]
 8002742:	69c8      	ldr	r0, [r1, #28]
 8002744:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8002748:	4285      	cmp	r5, r0
 800274a:	d204      	bcs.n	8002756 <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800274c:	69ca      	ldr	r2, [r1, #28]
 800274e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002752:	432a      	orrs	r2, r5
 8002754:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002756:	069b      	lsls	r3, r3, #26
 8002758:	d50b      	bpl.n	8002772 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800275a:	4a51      	ldr	r2, [pc, #324]	; (80028a0 <HAL_RCC_ClockConfig+0x238>)
 800275c:	69e0      	ldr	r0, [r4, #28]
 800275e:	6a11      	ldr	r1, [r2, #32]
 8002760:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8002764:	4288      	cmp	r0, r1
 8002766:	d204      	bcs.n	8002772 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002768:	6a13      	ldr	r3, [r2, #32]
 800276a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276e:	4303      	orrs	r3, r0
 8002770:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002772:	f7ff fed9 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 8002776:	494a      	ldr	r1, [pc, #296]	; (80028a0 <HAL_RCC_ClockConfig+0x238>)
 8002778:	4a4a      	ldr	r2, [pc, #296]	; (80028a4 <HAL_RCC_ClockConfig+0x23c>)
 800277a:	698b      	ldr	r3, [r1, #24]
 800277c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002788:	698b      	ldr	r3, [r1, #24]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	5cd3      	ldrb	r3, [r2, r3]
 8002790:	4a45      	ldr	r2, [pc, #276]	; (80028a8 <HAL_RCC_ClockConfig+0x240>)
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	fa20 f303 	lsr.w	r3, r0, r3
 800279a:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800279c:	4b43      	ldr	r3, [pc, #268]	; (80028ac <HAL_RCC_ClockConfig+0x244>)
 800279e:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80027a0:	4b43      	ldr	r3, [pc, #268]	; (80028b0 <HAL_RCC_ClockConfig+0x248>)
}
 80027a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	f7fe be9a 	b.w	80014e0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ac:	6813      	ldr	r3, [r2, #0]
 80027ae:	f023 030f 	bic.w	r3, r3, #15
 80027b2:	430b      	orrs	r3, r1
 80027b4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	6813      	ldr	r3, [r2, #0]
 80027b8:	f003 030f 	and.w	r3, r3, #15
 80027bc:	428b      	cmp	r3, r1
 80027be:	f47f af58 	bne.w	8002672 <HAL_RCC_ClockConfig+0xa>
 80027c2:	e760      	b.n	8002686 <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027c4:	4936      	ldr	r1, [pc, #216]	; (80028a0 <HAL_RCC_ClockConfig+0x238>)
 80027c6:	6926      	ldr	r6, [r4, #16]
 80027c8:	6988      	ldr	r0, [r1, #24]
 80027ca:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80027ce:	4286      	cmp	r6, r0
 80027d0:	f67f af5d 	bls.w	800268e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027d4:	698a      	ldr	r2, [r1, #24]
 80027d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027da:	4332      	orrs	r2, r6
 80027dc:	618a      	str	r2, [r1, #24]
 80027de:	e756      	b.n	800268e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80027e0:	4b2f      	ldr	r3, [pc, #188]	; (80028a0 <HAL_RCC_ClockConfig+0x238>)
 80027e2:	68a1      	ldr	r1, [r4, #8]
 80027e4:	699a      	ldr	r2, [r3, #24]
 80027e6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80027ea:	430a      	orrs	r2, r1
 80027ec:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ee:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027f0:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f2:	2a02      	cmp	r2, #2
 80027f4:	d11d      	bne.n	8002832 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027f6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027fa:	f43f af3a 	beq.w	8002672 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027fe:	4e28      	ldr	r6, [pc, #160]	; (80028a0 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002800:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002804:	6933      	ldr	r3, [r6, #16]
 8002806:	f023 0307 	bic.w	r3, r3, #7
 800280a:	4313      	orrs	r3, r2
 800280c:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 800280e:	f7fe fec7 	bl	80015a0 <HAL_GetTick>
 8002812:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002814:	6933      	ldr	r3, [r6, #16]
 8002816:	6862      	ldr	r2, [r4, #4]
 8002818:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800281c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8002820:	f43f af6f 	beq.w	8002702 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002824:	f7fe febc 	bl	80015a0 <HAL_GetTick>
 8002828:	1bc0      	subs	r0, r0, r7
 800282a:	4540      	cmp	r0, r8
 800282c:	d9f2      	bls.n	8002814 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 800282e:	2003      	movs	r0, #3
 8002830:	e720      	b.n	8002674 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002832:	2a03      	cmp	r2, #3
 8002834:	d102      	bne.n	800283c <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002836:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800283a:	e7de      	b.n	80027fa <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800283c:	2a01      	cmp	r2, #1
 800283e:	d102      	bne.n	8002846 <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002840:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002844:	e7d9      	b.n	80027fa <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002846:	f013 0f04 	tst.w	r3, #4
 800284a:	e7d6      	b.n	80027fa <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800284c:	4914      	ldr	r1, [pc, #80]	; (80028a0 <HAL_RCC_ClockConfig+0x238>)
 800284e:	68e6      	ldr	r6, [r4, #12]
 8002850:	6988      	ldr	r0, [r1, #24]
 8002852:	f000 000f 	and.w	r0, r0, #15
 8002856:	4286      	cmp	r6, r0
 8002858:	f4bf af57 	bcs.w	800270a <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285c:	698a      	ldr	r2, [r1, #24]
 800285e:	f022 020f 	bic.w	r2, r2, #15
 8002862:	4332      	orrs	r2, r6
 8002864:	618a      	str	r2, [r1, #24]
 8002866:	e750      	b.n	800270a <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002868:	680a      	ldr	r2, [r1, #0]
 800286a:	f022 020f 	bic.w	r2, r2, #15
 800286e:	432a      	orrs	r2, r5
 8002870:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	680a      	ldr	r2, [r1, #0]
 8002874:	f002 020f 	and.w	r2, r2, #15
 8002878:	42aa      	cmp	r2, r5
 800287a:	f47f aefa 	bne.w	8002672 <HAL_RCC_ClockConfig+0xa>
 800287e:	e74b      	b.n	8002718 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002880:	4907      	ldr	r1, [pc, #28]	; (80028a0 <HAL_RCC_ClockConfig+0x238>)
 8002882:	6925      	ldr	r5, [r4, #16]
 8002884:	6988      	ldr	r0, [r1, #24]
 8002886:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800288a:	4285      	cmp	r5, r0
 800288c:	f4bf af47 	bcs.w	800271e <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002890:	698a      	ldr	r2, [r1, #24]
 8002892:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002896:	432a      	orrs	r2, r5
 8002898:	618a      	str	r2, [r1, #24]
 800289a:	e740      	b.n	800271e <HAL_RCC_ClockConfig+0xb6>
 800289c:	52002000 	.word	0x52002000
 80028a0:	58024400 	.word	0x58024400
 80028a4:	0800b49c 	.word	0x0800b49c
 80028a8:	24000004 	.word	0x24000004
 80028ac:	24000000 	.word	0x24000000
 80028b0:	2400000c 	.word	0x2400000c

080028b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b4:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80028b6:	4c0c      	ldr	r4, [pc, #48]	; (80028e8 <HAL_RCC_GetHCLKFreq+0x34>)
 80028b8:	f7ff fe36 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 80028bc:	490b      	ldr	r1, [pc, #44]	; (80028ec <HAL_RCC_GetHCLKFreq+0x38>)
 80028be:	69a3      	ldr	r3, [r4, #24]
 80028c0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80028c4:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028c6:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80028c8:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028cc:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80028d0:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028d4:	5ccb      	ldrb	r3, [r1, r3]
 80028d6:	f003 031f 	and.w	r3, r3, #31
 80028da:	fa22 f003 	lsr.w	r0, r2, r3
 80028de:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <HAL_RCC_GetHCLKFreq+0x3c>)
 80028e0:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028e2:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <HAL_RCC_GetHCLKFreq+0x40>)
 80028e4:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80028e6:	bd10      	pop	{r4, pc}
 80028e8:	58024400 	.word	0x58024400
 80028ec:	0800b49c 	.word	0x0800b49c
 80028f0:	24000004 	.word	0x24000004
 80028f4:	24000000 	.word	0x24000000

080028f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f8:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80028fa:	f7ff ffdb 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 80028fe:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002900:	4a05      	ldr	r2, [pc, #20]	; (8002918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002908:	5cd3      	ldrb	r3, [r2, r3]
 800290a:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800290e:	40d8      	lsrs	r0, r3
 8002910:	bd08      	pop	{r3, pc}
 8002912:	bf00      	nop
 8002914:	58024400 	.word	0x58024400
 8002918:	0800b49c 	.word	0x0800b49c

0800291c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800291c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800291e:	f7ff ffc9 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 8002922:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002924:	4a05      	ldr	r2, [pc, #20]	; (800293c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800292c:	5cd3      	ldrb	r3, [r2, r3]
 800292e:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002932:	40d8      	lsrs	r0, r3
 8002934:	bd08      	pop	{r3, pc}
 8002936:	bf00      	nop
 8002938:	58024400 	.word	0x58024400
 800293c:	0800b49c 	.word	0x0800b49c

08002940 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8002940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002942:	4c3a      	ldr	r4, [pc, #232]	; (8002a2c <RCCEx_PLL2_Config+0xec>)
{
 8002944:	4606      	mov	r6, r0
 8002946:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002948:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	2b03      	cmp	r3, #3
 8002950:	d069      	beq.n	8002a26 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002958:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800295a:	f7fe fe21 	bl	80015a0 <HAL_GetTick>
 800295e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	011a      	lsls	r2, r3, #4
 8002964:	d44b      	bmi.n	80029fe <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002966:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002968:	6832      	ldr	r2, [r6, #0]
 800296a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800296e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002972:	62a3      	str	r3, [r4, #40]	; 0x28
 8002974:	68b3      	ldr	r3, [r6, #8]
 8002976:	68f2      	ldr	r2, [r6, #12]
 8002978:	3b01      	subs	r3, #1
 800297a:	3a01      	subs	r2, #1
 800297c:	025b      	lsls	r3, r3, #9
 800297e:	0412      	lsls	r2, r2, #16
 8002980:	b29b      	uxth	r3, r3
 8002982:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002986:	4313      	orrs	r3, r2
 8002988:	6872      	ldr	r2, [r6, #4]
 800298a:	3a01      	subs	r2, #1
 800298c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002990:	4313      	orrs	r3, r2
 8002992:	6932      	ldr	r2, [r6, #16]
 8002994:	3a01      	subs	r2, #1
 8002996:	0612      	lsls	r2, r2, #24
 8002998:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800299c:	4313      	orrs	r3, r2
 800299e:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80029a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029a2:	6972      	ldr	r2, [r6, #20]
 80029a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80029a8:	4313      	orrs	r3, r2
 80029aa:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80029ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029ae:	69b2      	ldr	r2, [r6, #24]
 80029b0:	f023 0320 	bic.w	r3, r3, #32
 80029b4:	4313      	orrs	r3, r2
 80029b6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80029b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029ba:	f023 0310 	bic.w	r3, r3, #16
 80029be:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80029c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029c2:	69f2      	ldr	r2, [r6, #28]
 80029c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029c8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80029cc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80029d0:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80029d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029d4:	f043 0310 	orr.w	r3, r3, #16
 80029d8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80029da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80029dc:	b9b5      	cbnz	r5, 8002a0c <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80029de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80029e2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80029e4:	4c11      	ldr	r4, [pc, #68]	; (8002a2c <RCCEx_PLL2_Config+0xec>)
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029ec:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ee:	f7fe fdd7 	bl	80015a0 <HAL_GetTick>
 80029f2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80029f4:	6823      	ldr	r3, [r4, #0]
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	d50f      	bpl.n	8002a1a <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 80029fa:	2000      	movs	r0, #0
 80029fc:	e005      	b.n	8002a0a <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80029fe:	f7fe fdcf 	bl	80015a0 <HAL_GetTick>
 8002a02:	1bc0      	subs	r0, r0, r7
 8002a04:	2802      	cmp	r0, #2
 8002a06:	d9ab      	bls.n	8002960 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8002a08:	2003      	movs	r0, #3
}
 8002a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8002a0c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002a0e:	bf0c      	ite	eq
 8002a10:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002a14:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8002a18:	e7e3      	b.n	80029e2 <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002a1a:	f7fe fdc1 	bl	80015a0 <HAL_GetTick>
 8002a1e:	1b40      	subs	r0, r0, r5
 8002a20:	2802      	cmp	r0, #2
 8002a22:	d9e7      	bls.n	80029f4 <RCCEx_PLL2_Config+0xb4>
 8002a24:	e7f0      	b.n	8002a08 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8002a26:	2001      	movs	r0, #1
 8002a28:	e7ef      	b.n	8002a0a <RCCEx_PLL2_Config+0xca>
 8002a2a:	bf00      	nop
 8002a2c:	58024400 	.word	0x58024400

08002a30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8002a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002a32:	4c3a      	ldr	r4, [pc, #232]	; (8002b1c <RCCEx_PLL3_Config+0xec>)
{
 8002a34:	4606      	mov	r6, r0
 8002a36:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002a38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d069      	beq.n	8002b16 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a48:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a4a:	f7fe fda9 	bl	80015a0 <HAL_GetTick>
 8002a4e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	009a      	lsls	r2, r3, #2
 8002a54:	d44b      	bmi.n	8002aee <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002a56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a58:	6832      	ldr	r2, [r6, #0]
 8002a5a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002a5e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002a62:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a64:	68b3      	ldr	r3, [r6, #8]
 8002a66:	68f2      	ldr	r2, [r6, #12]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	3a01      	subs	r2, #1
 8002a6c:	025b      	lsls	r3, r3, #9
 8002a6e:	0412      	lsls	r2, r2, #16
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002a76:	4313      	orrs	r3, r2
 8002a78:	6872      	ldr	r2, [r6, #4]
 8002a7a:	3a01      	subs	r2, #1
 8002a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a80:	4313      	orrs	r3, r2
 8002a82:	6932      	ldr	r2, [r6, #16]
 8002a84:	3a01      	subs	r2, #1
 8002a86:	0612      	lsls	r2, r2, #24
 8002a88:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8002a90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a92:	6972      	ldr	r2, [r6, #20]
 8002a94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8002a9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a9e:	69b2      	ldr	r2, [r6, #24]
 8002aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8002aa8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002aaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aae:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002ab0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ab2:	69f2      	ldr	r2, [r6, #28]
 8002ab4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ab8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002abc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002ac0:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8002ac2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002aca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8002acc:	b9b5      	cbnz	r5, 8002afc <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002ace:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002ad2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8002ad4:	4c11      	ldr	r4, [pc, #68]	; (8002b1c <RCCEx_PLL3_Config+0xec>)
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002adc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ade:	f7fe fd5f 	bl	80015a0 <HAL_GetTick>
 8002ae2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	d50f      	bpl.n	8002b0a <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8002aea:	2000      	movs	r0, #0
 8002aec:	e005      	b.n	8002afa <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002aee:	f7fe fd57 	bl	80015a0 <HAL_GetTick>
 8002af2:	1bc0      	subs	r0, r0, r7
 8002af4:	2802      	cmp	r0, #2
 8002af6:	d9ab      	bls.n	8002a50 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8002af8:	2003      	movs	r0, #3
}
 8002afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8002afc:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8002afe:	bf0c      	ite	eq
 8002b00:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002b04:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8002b08:	e7e3      	b.n	8002ad2 <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002b0a:	f7fe fd49 	bl	80015a0 <HAL_GetTick>
 8002b0e:	1b40      	subs	r0, r0, r5
 8002b10:	2802      	cmp	r0, #2
 8002b12:	d9e7      	bls.n	8002ae4 <RCCEx_PLL3_Config+0xb4>
 8002b14:	e7f0      	b.n	8002af8 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8002b16:	2001      	movs	r0, #1
 8002b18:	e7ef      	b.n	8002afa <RCCEx_PLL3_Config+0xca>
 8002b1a:	bf00      	nop
 8002b1c:	58024400 	.word	0x58024400

08002b20 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b24:	6806      	ldr	r6, [r0, #0]
{
 8002b26:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b28:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8002b2c:	d009      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002b2e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002b30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b34:	d02e      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002b36:	d813      	bhi.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002b38:	b1f3      	cbz	r3, 8002b78 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b3e:	d021      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b40:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b42:	682b      	ldr	r3, [r5, #0]
 8002b44:	05dc      	lsls	r4, r3, #23
 8002b46:	f140 80ea 	bpl.w	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002b4a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	f200 80e5 	bhi.w	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8002b52:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002b56:	0024      	.short	0x0024
 8002b58:	00dd002b 	.word	0x00dd002b
 8002b5c:	00290029 	.word	0x00290029
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002b60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b64:	d1ec      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b66:	4ab3      	ldr	r2, [pc, #716]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002b68:	2600      	movs	r6, #0
 8002b6a:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8002b6c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002b6e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002b72:	430b      	orrs	r3, r1
 8002b74:	6513      	str	r3, [r2, #80]	; 0x50
 8002b76:	e7e4      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b78:	4aae      	ldr	r2, [pc, #696]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002b7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b80:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002b82:	e7f0      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b84:	2102      	movs	r1, #2
 8002b86:	3004      	adds	r0, #4
 8002b88:	f7ff feda 	bl	8002940 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b8c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	d1d7      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8002b92:	e7e8      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b94:	2102      	movs	r1, #2
 8002b96:	3024      	adds	r0, #36	; 0x24
 8002b98:	f7ff ff4a 	bl	8002a30 <RCCEx_PLL3_Config>
 8002b9c:	e7f6      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b9e:	4aa5      	ldr	r2, [pc, #660]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002ba0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8002ba8:	4634      	mov	r4, r6
 8002baa:	e004      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bac:	2100      	movs	r1, #0
 8002bae:	1d28      	adds	r0, r5, #4
 8002bb0:	f7ff fec6 	bl	8002940 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002bb4:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8002bb6:	2c00      	cmp	r4, #0
 8002bb8:	f040 80b3 	bne.w	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x202>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bbc:	4a9d      	ldr	r2, [pc, #628]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002bbe:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8002bc0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002bc2:	f023 0307 	bic.w	r3, r3, #7
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002bca:	682b      	ldr	r3, [r5, #0]
 8002bcc:	0598      	lsls	r0, r3, #22
 8002bce:	d50d      	bpl.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002bd0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002bd2:	2b80      	cmp	r3, #128	; 0x80
 8002bd4:	f000 80c2 	beq.w	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8002bd8:	f200 80a5 	bhi.w	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80b1 	beq.w	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8002be2:	2b40      	cmp	r3, #64	; 0x40
 8002be4:	f000 80b4 	beq.w	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002be8:	2601      	movs	r6, #1
 8002bea:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002bec:	682b      	ldr	r3, [r5, #0]
 8002bee:	0559      	lsls	r1, r3, #21
 8002bf0:	d510      	bpl.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4AClockSelection)
 8002bf2:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8002bf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bfa:	f000 80d4 	beq.w	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002bfe:	f200 80b5 	bhi.w	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80c3 	beq.w	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002c08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c0c:	f000 80c5 	beq.w	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8002c10:	2601      	movs	r6, #1
 8002c12:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c14:	682b      	ldr	r3, [r5, #0]
 8002c16:	051a      	lsls	r2, r3, #20
 8002c18:	d510      	bpl.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002c1a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8002c1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c22:	f000 80e5 	beq.w	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002c26:	f200 80c6 	bhi.w	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80d4 	beq.w	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c34:	f000 80d6 	beq.w	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8002c38:	2601      	movs	r6, #1
 8002c3a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c3c:	682b      	ldr	r3, [r5, #0]
 8002c3e:	019b      	lsls	r3, r3, #6
 8002c40:	d50d      	bpl.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->QspiClockSelection)
 8002c42:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	f000 80ed 	beq.w	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002c4a:	f200 80d9 	bhi.w	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80d9 	beq.w	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002c54:	2b10      	cmp	r3, #16
 8002c56:	f000 80df 	beq.w	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8002c5a:	2601      	movs	r6, #1
 8002c5c:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c5e:	682b      	ldr	r3, [r5, #0]
 8002c60:	04df      	lsls	r7, r3, #19
 8002c62:	d50f      	bpl.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002c64:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c6a:	f000 8101 	beq.w	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002c6e:	f200 80e3 	bhi.w	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80f0 	beq.w	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8002c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7c:	f000 80f2 	beq.w	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002c80:	2601      	movs	r6, #1
 8002c82:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c84:	682b      	ldr	r3, [r5, #0]
 8002c86:	0498      	lsls	r0, r3, #18
 8002c88:	d50f      	bpl.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi45ClockSelection)
 8002c8a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002c8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c90:	f000 810e 	beq.w	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8002c94:	f200 80f4 	bhi.w	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80fa 	beq.w	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca2:	f000 80ff 	beq.w	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002ca6:	2601      	movs	r6, #1
 8002ca8:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002caa:	682b      	ldr	r3, [r5, #0]
 8002cac:	0459      	lsls	r1, r3, #17
 8002cae:	d510      	bpl.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    switch(PeriphClkInit->Spi6ClockSelection)
 8002cb0:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8002cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cb8:	f000 811b 	beq.w	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8002cbc:	f200 8100 	bhi.w	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 8106 	beq.w	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8002cc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cca:	f000 810c 	beq.w	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8002cce:	2601      	movs	r6, #1
 8002cd0:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cd2:	682b      	ldr	r3, [r5, #0]
 8002cd4:	041a      	lsls	r2, r3, #16
 8002cd6:	d50d      	bpl.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    switch(PeriphClkInit->FdcanClockSelection)
 8002cd8:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8002cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cde:	f000 8110 	beq.w	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8002ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ce6:	f000 811a 	beq.w	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 810e 	beq.w	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002cf0:	2601      	movs	r6, #1
 8002cf2:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002cf4:	682b      	ldr	r3, [r5, #0]
 8002cf6:	01db      	lsls	r3, r3, #7
 8002cf8:	f140 8127 	bpl.w	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x42a>
    switch(PeriphClkInit->FmcClockSelection)
 8002cfc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	f200 8167 	bhi.w	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002d04:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002d08:	01130118 	.word	0x01130118
 8002d0c:	0118015f 	.word	0x0118015f
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d10:	2100      	movs	r1, #0
 8002d12:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002d16:	f7ff fe8b 	bl	8002a30 <RCCEx_PLL3_Config>
 8002d1a:	e74b      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002d1c:	2601      	movs	r6, #1
 8002d1e:	4634      	mov	r4, r6
 8002d20:	e753      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8002d22:	4626      	mov	r6, r4
 8002d24:	e751      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002d26:	2bc0      	cmp	r3, #192	; 0xc0
 8002d28:	d003      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d2e:	f47f af5b 	bne.w	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    if(ret == HAL_OK)
 8002d32:	b9cc      	cbnz	r4, 8002d68 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002d34:	4a3f      	ldr	r2, [pc, #252]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002d36:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8002d38:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002d3a:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	6513      	str	r3, [r2, #80]	; 0x50
 8002d42:	e753      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xcc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d44:	4a3b      	ldr	r2, [pc, #236]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002d46:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d4c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002d4e:	e7f0      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d50:	2100      	movs	r1, #0
 8002d52:	1d28      	adds	r0, r5, #4
 8002d54:	f7ff fdf4 	bl	8002940 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d58:	4604      	mov	r4, r0
      break;
 8002d5a:	e7ea      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002d62:	f7ff fe65 	bl	8002a30 <RCCEx_PLL3_Config>
 8002d66:	e7f7      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002d68:	4626      	mov	r6, r4
 8002d6a:	e73f      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai4AClockSelection)
 8002d6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002d70:	d003      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8002d72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d76:	f47f af4b 	bne.w	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if(ret == HAL_OK)
 8002d7a:	b9d4      	cbnz	r4, 8002db2 <HAL_RCCEx_PeriphCLKConfig+0x292>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002d7c:	4a2d      	ldr	r2, [pc, #180]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002d7e:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8002d82:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002d84:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d8c:	e742      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d8e:	4a29      	ldr	r2, [pc, #164]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002d90:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d96:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002d98:	e7ef      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	1d28      	adds	r0, r5, #4
 8002d9e:	f7ff fdcf 	bl	8002940 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002da2:	4604      	mov	r4, r0
      break;
 8002da4:	e7e9      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002da6:	2100      	movs	r1, #0
 8002da8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002dac:	f7ff fe40 	bl	8002a30 <RCCEx_PLL3_Config>
 8002db0:	e7f7      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8002db2:	4626      	mov	r6, r4
 8002db4:	e72e      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002db6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002dba:	d003      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8002dbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dc0:	f47f af3a 	bne.w	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    if(ret == HAL_OK)
 8002dc4:	b9d4      	cbnz	r4, 8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002dc6:	4a1b      	ldr	r2, [pc, #108]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002dc8:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8002dcc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002dce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8002dd6:	e731      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dd8:	4a16      	ldr	r2, [pc, #88]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002dda:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002de2:	e7ef      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002de4:	2100      	movs	r1, #0
 8002de6:	1d28      	adds	r0, r5, #4
 8002de8:	f7ff fdaa 	bl	8002940 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dec:	4604      	mov	r4, r0
      break;
 8002dee:	e7e9      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002df0:	2100      	movs	r1, #0
 8002df2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002df6:	f7ff fe1b 	bl	8002a30 <RCCEx_PLL3_Config>
 8002dfa:	e7f7      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002dfc:	4626      	mov	r6, r4
 8002dfe:	e71d      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch(PeriphClkInit->QspiClockSelection)
 8002e00:	2b30      	cmp	r3, #48	; 0x30
 8002e02:	f47f af2a 	bne.w	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 8002e06:	b99c      	cbnz	r4, 8002e30 <HAL_RCCEx_PeriphCLKConfig+0x310>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e08:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002e0a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8002e0c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002e0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002e12:	430b      	orrs	r3, r1
 8002e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e16:	e722      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e18:	4a06      	ldr	r2, [pc, #24]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002e1a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e20:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002e22:	e7f0      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e24:	2102      	movs	r1, #2
 8002e26:	1d28      	adds	r0, r5, #4
 8002e28:	f7ff fd8a 	bl	8002940 <RCCEx_PLL2_Config>
 8002e2c:	4604      	mov	r4, r0
      break;
 8002e2e:	e7ea      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002e30:	4626      	mov	r6, r4
 8002e32:	e714      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8002e34:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi123ClockSelection)
 8002e38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8002e3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e42:	f47f af1d 	bne.w	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 8002e46:	b9cc      	cbnz	r4, 8002e7c <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002e48:	4aa2      	ldr	r2, [pc, #648]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002e4a:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8002e4c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e52:	430b      	orrs	r3, r1
 8002e54:	6513      	str	r3, [r2, #80]	; 0x50
 8002e56:	e715      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x164>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e58:	4a9e      	ldr	r2, [pc, #632]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002e5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e60:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002e62:	e7f0      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e64:	2100      	movs	r1, #0
 8002e66:	1d28      	adds	r0, r5, #4
 8002e68:	f7ff fd6a 	bl	8002940 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e6c:	4604      	mov	r4, r0
      break;
 8002e6e:	e7ea      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e70:	2100      	movs	r1, #0
 8002e72:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002e76:	f7ff fddb 	bl	8002a30 <RCCEx_PLL3_Config>
 8002e7a:	e7f7      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002e7c:	4626      	mov	r6, r4
 8002e7e:	e701      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 8002e80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e84:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002e88:	d003      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002e8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e8e:	f47f af0a 	bne.w	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x186>
    if(ret == HAL_OK)
 8002e92:	b99c      	cbnz	r4, 8002ebc <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002e94:	4a8f      	ldr	r2, [pc, #572]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002e96:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8002e98:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002e9a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002e9e:	430b      	orrs	r3, r1
 8002ea0:	6513      	str	r3, [r2, #80]	; 0x50
 8002ea2:	e702      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x18a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	1d28      	adds	r0, r5, #4
 8002ea8:	f7ff fd4a 	bl	8002940 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002eac:	4604      	mov	r4, r0
      break;
 8002eae:	e7f0      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x372>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002eb6:	f7ff fdbb 	bl	8002a30 <RCCEx_PLL3_Config>
 8002eba:	e7f7      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8002ebc:	4626      	mov	r6, r4
 8002ebe:	e6f4      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi6ClockSelection)
 8002ec0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ec4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002ec8:	d003      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8002eca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ece:	f47f aefe 	bne.w	8002cce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    if(ret == HAL_OK)
 8002ed2:	b9a4      	cbnz	r4, 8002efe <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ed4:	4a7f      	ldr	r2, [pc, #508]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002ed6:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8002eda:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002edc:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ee4:	e6f5      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	1d28      	adds	r0, r5, #4
 8002eea:	f7ff fd29 	bl	8002940 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002eee:	4604      	mov	r4, r0
      break;
 8002ef0:	e7ef      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002ef8:	f7ff fd9a 	bl	8002a30 <RCCEx_PLL3_Config>
 8002efc:	e7f7      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002efe:	4626      	mov	r6, r4
 8002f00:	e6e7      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f02:	4a74      	ldr	r2, [pc, #464]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002f0c:	b96c      	cbnz	r4, 8002f2a <HAL_RCCEx_PeriphCLKConfig+0x40a>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f0e:	4a71      	ldr	r2, [pc, #452]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f10:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8002f12:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002f14:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	6513      	str	r3, [r2, #80]	; 0x50
 8002f1c:	e6ea      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f1e:	2101      	movs	r1, #1
 8002f20:	1d28      	adds	r0, r5, #4
 8002f22:	f7ff fd0d 	bl	8002940 <RCCEx_PLL2_Config>
 8002f26:	4604      	mov	r4, r0
      break;
 8002f28:	e7f0      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002f2a:	4626      	mov	r6, r4
 8002f2c:	e6e2      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f2e:	4a69      	ldr	r2, [pc, #420]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f30:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f36:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002f38:	2c00      	cmp	r4, #0
 8002f3a:	d14d      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f3c:	4a65      	ldr	r2, [pc, #404]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f3e:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002f40:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002f42:	f023 0303 	bic.w	r3, r3, #3
 8002f46:	430b      	orrs	r3, r1
 8002f48:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f4a:	682b      	ldr	r3, [r5, #0]
 8002f4c:	025f      	lsls	r7, r3, #9
 8002f4e:	d54d      	bpl.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f50:	4f61      	ldr	r7, [pc, #388]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f58:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8002f5a:	f7fe fb21 	bl	80015a0 <HAL_GetTick>
 8002f5e:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	05d8      	lsls	r0, r3, #23
 8002f64:	d53a      	bpl.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    if(ret == HAL_OK)
 8002f66:	2c00      	cmp	r4, #0
 8002f68:	d16c      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x524>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f6a:	4b5a      	ldr	r3, [pc, #360]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f6c:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 8002f70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f72:	4042      	eors	r2, r0
 8002f74:	f412 7f40 	tst.w	r2, #768	; 0x300
 8002f78:	d00b      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x472>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f7c:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f7e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f82:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002f86:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f88:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002f8a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002f8e:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8002f90:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f92:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002f96:	d040      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f98:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8002f9c:	494d      	ldr	r1, [pc, #308]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f9e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002fa2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002fa6:	d149      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8002fa8:	6908      	ldr	r0, [r1, #16]
 8002faa:	4a4c      	ldr	r2, [pc, #304]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 8002fac:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8002fb0:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8002fb4:	4302      	orrs	r2, r0
 8002fb6:	610a      	str	r2, [r1, #16]
 8002fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fbc:	4a45      	ldr	r2, [pc, #276]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002fbe:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc4:	e012      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	1d28      	adds	r0, r5, #4
 8002fca:	f7ff fcb9 	bl	8002940 <RCCEx_PLL2_Config>
 8002fce:	4604      	mov	r4, r0
      break;
 8002fd0:	e7b2      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x418>
    switch(PeriphClkInit->FmcClockSelection)
 8002fd2:	2601      	movs	r6, #1
 8002fd4:	4634      	mov	r4, r6
 8002fd6:	e7b8      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002fd8:	4626      	mov	r6, r4
 8002fda:	e7b6      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x42a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fdc:	f7fe fae0 	bl	80015a0 <HAL_GetTick>
 8002fe0:	eba0 0008 	sub.w	r0, r0, r8
 8002fe4:	2864      	cmp	r0, #100	; 0x64
 8002fe6:	d9bb      	bls.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x440>
        ret = HAL_TIMEOUT;
 8002fe8:	2603      	movs	r6, #3
 8002fea:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002fec:	682b      	ldr	r3, [r5, #0]
 8002fee:	07da      	lsls	r2, r3, #31
 8002ff0:	d508      	bpl.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002ff2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8002ff4:	2b10      	cmp	r3, #16
 8002ff6:	d03c      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x552>
 8002ff8:	d826      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002ffa:	b35b      	cbz	r3, 8003054 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d032      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x546>
 8003000:	2601      	movs	r6, #1
 8003002:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	079b      	lsls	r3, r3, #30
 8003008:	d548      	bpl.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800300a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800300c:	2b05      	cmp	r3, #5
 800300e:	d85b      	bhi.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 8003010:	e8df f003 	tbb	[pc, r3]
 8003014:	3c54373c 	.word	0x3c54373c
 8003018:	3c3c      	.short	0x3c3c
        tickstart = HAL_GetTick();
 800301a:	f7fe fac1 	bl	80015a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800301e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80030d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
        tickstart = HAL_GetTick();
 8003022:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003028:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800302c:	0799      	lsls	r1, r3, #30
 800302e:	d4b3      	bmi.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x478>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fe fab6 	bl	80015a0 <HAL_GetTick>
 8003034:	1bc0      	subs	r0, r0, r7
 8003036:	4548      	cmp	r0, r9
 8003038:	d9f6      	bls.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800303a:	e7d5      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800303c:	690a      	ldr	r2, [r1, #16]
 800303e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8003042:	e7b8      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003044:	4626      	mov	r6, r4
 8003046:	e7d1      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    switch(PeriphClkInit->Usart16ClockSelection)
 8003048:	f023 0208 	bic.w	r2, r3, #8
 800304c:	2a20      	cmp	r2, #32
 800304e:	d001      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003050:	2b18      	cmp	r3, #24
 8003052:	d1d5      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if(ret == HAL_OK)
 8003054:	b99c      	cbnz	r4, 800307e <HAL_RCCEx_PeriphCLKConfig+0x55e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003056:	4a1f      	ldr	r2, [pc, #124]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003058:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 800305a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800305c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003060:	430b      	orrs	r3, r1
 8003062:	6553      	str	r3, [r2, #84]	; 0x54
 8003064:	e7ce      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003066:	2101      	movs	r1, #1
 8003068:	1d28      	adds	r0, r5, #4
 800306a:	f7ff fc69 	bl	8002940 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800306e:	4604      	mov	r4, r0
      break;
 8003070:	e7f0      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x534>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003072:	2101      	movs	r1, #1
 8003074:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8003078:	f7ff fcda 	bl	8002a30 <RCCEx_PLL3_Config>
 800307c:	e7f7      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800307e:	4626      	mov	r6, r4
 8003080:	e7c0      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003082:	2101      	movs	r1, #1
 8003084:	1d28      	adds	r0, r5, #4
 8003086:	f7ff fc5b 	bl	8002940 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800308a:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800308c:	b9fc      	cbnz	r4, 80030ce <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800308e:	4a11      	ldr	r2, [pc, #68]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003090:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8003092:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003094:	f023 0307 	bic.w	r3, r3, #7
 8003098:	430b      	orrs	r3, r1
 800309a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800309c:	682b      	ldr	r3, [r5, #0]
 800309e:	075f      	lsls	r7, r3, #29
 80030a0:	d52e      	bpl.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80030a2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80030a6:	2b05      	cmp	r3, #5
 80030a8:	f200 8140 	bhi.w	800332c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80030ac:	e8df f013 	tbh	[pc, r3, lsl #1]
 80030b0:	0018001d 	.word	0x0018001d
 80030b4:	001d0138 	.word	0x001d0138
 80030b8:	001d001d 	.word	0x001d001d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030bc:	2101      	movs	r1, #1
 80030be:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80030c2:	f7ff fcb5 	bl	8002a30 <RCCEx_PLL3_Config>
 80030c6:	e7e0      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x56a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80030c8:	2601      	movs	r6, #1
 80030ca:	4634      	mov	r4, r6
 80030cc:	e7e6      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80030ce:	4626      	mov	r6, r4
 80030d0:	e7e4      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80030d2:	bf00      	nop
 80030d4:	58024400 	.word	0x58024400
 80030d8:	58024800 	.word	0x58024800
 80030dc:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030e0:	2101      	movs	r1, #1
 80030e2:	1d28      	adds	r0, r5, #4
 80030e4:	f7ff fc2c 	bl	8002940 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030e8:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80030ea:	2c00      	cmp	r4, #0
 80030ec:	f040 8121 	bne.w	8003332 <HAL_RCCEx_PeriphCLKConfig+0x812>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030f0:	4ab2      	ldr	r2, [pc, #712]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 80030f2:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 80030f6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80030f8:	f023 0307 	bic.w	r3, r3, #7
 80030fc:	430b      	orrs	r3, r1
 80030fe:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003100:	682b      	ldr	r3, [r5, #0]
 8003102:	0698      	lsls	r0, r3, #26
 8003104:	d510      	bpl.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003106:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800310a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800310e:	f000 812b 	beq.w	8003368 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8003112:	f200 8110 	bhi.w	8003336 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8116 	beq.w	8003348 <HAL_RCCEx_PeriphCLKConfig+0x828>
 800311c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003120:	f000 811c 	beq.w	800335c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003124:	2601      	movs	r6, #1
 8003126:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	0659      	lsls	r1, r3, #25
 800312c:	d510      	bpl.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x630>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800312e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8003132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003136:	f000 8138 	beq.w	80033aa <HAL_RCCEx_PeriphCLKConfig+0x88a>
 800313a:	f200 811d 	bhi.w	8003378 <HAL_RCCEx_PeriphCLKConfig+0x858>
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 8123 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x86a>
 8003144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003148:	f000 8129 	beq.w	800339e <HAL_RCCEx_PeriphCLKConfig+0x87e>
 800314c:	2601      	movs	r6, #1
 800314e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003150:	682b      	ldr	r3, [r5, #0]
 8003152:	061a      	lsls	r2, r3, #24
 8003154:	d510      	bpl.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x658>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003156:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800315a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800315e:	f000 8148 	beq.w	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8003162:	f200 812d 	bhi.w	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8133 	beq.w	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 800316c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003170:	f000 8139 	beq.w	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8003174:	2601      	movs	r6, #1
 8003176:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003178:	682b      	ldr	r3, [r5, #0]
 800317a:	071b      	lsls	r3, r3, #28
 800317c:	d514      	bpl.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800317e:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8003182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003186:	d107      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x678>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003188:	2102      	movs	r1, #2
 800318a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800318e:	f7ff fc4f 	bl	8002a30 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8003192:	2800      	cmp	r0, #0
 8003194:	bf18      	it	ne
 8003196:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003198:	4a88      	ldr	r2, [pc, #544]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 800319a:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 800319e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80031a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031a4:	430b      	orrs	r3, r1
 80031a6:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031a8:	682b      	ldr	r3, [r5, #0]
 80031aa:	06df      	lsls	r7, r3, #27
 80031ac:	d514      	bpl.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80031ae:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80031b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b6:	d107      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80031b8:	2102      	movs	r1, #2
 80031ba:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80031be:	f7ff fc37 	bl	8002a30 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 80031c2:	2800      	cmp	r0, #0
 80031c4:	bf18      	it	ne
 80031c6:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031c8:	4a7c      	ldr	r2, [pc, #496]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 80031ca:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 80031ce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80031d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031d8:	682b      	ldr	r3, [r5, #0]
 80031da:	0318      	lsls	r0, r3, #12
 80031dc:	d51a      	bpl.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->AdcClockSelection)
 80031de:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 80031e2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80031e6:	f000 810c 	beq.w	8003402 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80031ea:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80031ee:	d006      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x6de>
 80031f0:	2900      	cmp	r1, #0
 80031f2:	f040 810c 	bne.w	800340e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031f6:	1d28      	adds	r0, r5, #4
 80031f8:	f7ff fba2 	bl	8002940 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031fc:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80031fe:	2c00      	cmp	r4, #0
 8003200:	f040 8108 	bne.w	8003414 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003204:	4a6d      	ldr	r2, [pc, #436]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 8003206:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 800320a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800320c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003210:	430b      	orrs	r3, r1
 8003212:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003214:	682b      	ldr	r3, [r5, #0]
 8003216:	0359      	lsls	r1, r3, #13
 8003218:	d51c      	bpl.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x734>
    switch(PeriphClkInit->UsbClockSelection)
 800321a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800321e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003222:	f000 80f9 	beq.w	8003418 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8003226:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800322a:	d008      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x71e>
 800322c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003230:	f040 80f9 	bne.w	8003426 <HAL_RCCEx_PeriphCLKConfig+0x906>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003234:	4a61      	ldr	r2, [pc, #388]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 8003236:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800323e:	2c00      	cmp	r4, #0
 8003240:	f040 80f4 	bne.w	800342c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003244:	4a5d      	ldr	r2, [pc, #372]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 8003246:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 800324a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800324c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003250:	430b      	orrs	r3, r1
 8003252:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003254:	682b      	ldr	r3, [r5, #0]
 8003256:	03da      	lsls	r2, r3, #15
 8003258:	d509      	bpl.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x74e>
    switch(PeriphClkInit->SdmmcClockSelection)
 800325a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80e7 	beq.w	8003430 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8003262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003266:	f000 80f1 	beq.w	800344c <HAL_RCCEx_PeriphCLKConfig+0x92c>
 800326a:	2601      	movs	r6, #1
 800326c:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800326e:	682b      	ldr	r3, [r5, #0]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	d507      	bpl.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x764>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003274:	2102      	movs	r1, #2
 8003276:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800327a:	f7ff fbd9 	bl	8002a30 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 800327e:	2800      	cmp	r0, #0
 8003280:	bf18      	it	ne
 8003282:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003284:	682b      	ldr	r3, [r5, #0]
 8003286:	039f      	lsls	r7, r3, #14
 8003288:	d50a      	bpl.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    switch(PeriphClkInit->RngClockSelection)
 800328a:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 800328c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003290:	f000 80f2 	beq.w	8003478 <HAL_RCCEx_PeriphCLKConfig+0x958>
 8003294:	f200 80e2 	bhi.w	800345c <HAL_RCCEx_PeriphCLKConfig+0x93c>
 8003298:	2900      	cmp	r1, #0
 800329a:	f000 80e5 	beq.w	8003468 <HAL_RCCEx_PeriphCLKConfig+0x948>
 800329e:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032a0:	02dc      	lsls	r4, r3, #11
 80032a2:	d506      	bpl.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x792>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032a4:	4945      	ldr	r1, [pc, #276]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 80032a6:	6f28      	ldr	r0, [r5, #112]	; 0x70
 80032a8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80032aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032ae:	4302      	orrs	r2, r0
 80032b0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80032b2:	00d8      	lsls	r0, r3, #3
 80032b4:	d507      	bpl.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80032b6:	4941      	ldr	r1, [pc, #260]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 80032b8:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 80032bc:	690a      	ldr	r2, [r1, #16]
 80032be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032c2:	4302      	orrs	r2, r0
 80032c4:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032c6:	0299      	lsls	r1, r3, #10
 80032c8:	d506      	bpl.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032ca:	493c      	ldr	r1, [pc, #240]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 80032cc:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 80032ce:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80032d0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80032d4:	4302      	orrs	r2, r0
 80032d6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80032d8:	005a      	lsls	r2, r3, #1
 80032da:	d509      	bpl.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032dc:	4a37      	ldr	r2, [pc, #220]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 80032de:	6911      	ldr	r1, [r2, #16]
 80032e0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80032e4:	6111      	str	r1, [r2, #16]
 80032e6:	6911      	ldr	r1, [r2, #16]
 80032e8:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 80032ec:	4301      	orrs	r1, r0
 80032ee:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	da06      	bge.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80032f4:	4931      	ldr	r1, [pc, #196]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 80032f6:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80032f8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80032fa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032fe:	4302      	orrs	r2, r0
 8003300:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	d507      	bpl.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003306:	4a2d      	ldr	r2, [pc, #180]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 8003308:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 800330c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800330e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003312:	430b      	orrs	r3, r1
 8003314:	6553      	str	r3, [r2, #84]	; 0x54
}
 8003316:	1e30      	subs	r0, r6, #0
 8003318:	bf18      	it	ne
 800331a:	2001      	movne	r0, #1
 800331c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003320:	2101      	movs	r1, #1
 8003322:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8003326:	f7ff fb83 	bl	8002a30 <RCCEx_PLL3_Config>
 800332a:	e6dd      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800332c:	2601      	movs	r6, #1
 800332e:	4634      	mov	r4, r6
 8003330:	e6e6      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 8003332:	4626      	mov	r6, r4
 8003334:	e6e4      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003336:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800333a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800333e:	d003      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x828>
 8003340:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003344:	f47f aeee 	bne.w	8003124 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(ret == HAL_OK)
 8003348:	b9a4      	cbnz	r4, 8003374 <HAL_RCCEx_PeriphCLKConfig+0x854>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800334a:	4a1c      	ldr	r2, [pc, #112]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 800334c:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8003350:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003352:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003356:	430b      	orrs	r3, r1
 8003358:	6553      	str	r3, [r2, #84]	; 0x54
 800335a:	e6e5      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x608>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800335c:	2100      	movs	r1, #0
 800335e:	1d28      	adds	r0, r5, #4
 8003360:	f7ff faee 	bl	8002940 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003364:	4604      	mov	r4, r0
      break;
 8003366:	e7ef      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x828>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003368:	2102      	movs	r1, #2
 800336a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800336e:	f7ff fb5f 	bl	8002a30 <RCCEx_PLL3_Config>
 8003372:	e7f7      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8003374:	4626      	mov	r6, r4
 8003376:	e6d7      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003378:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800337c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003380:	d003      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x86a>
 8003382:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003386:	f47f aee1 	bne.w	800314c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    if(ret == HAL_OK)
 800338a:	b9a4      	cbnz	r4, 80033b6 <HAL_RCCEx_PeriphCLKConfig+0x896>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800338c:	4a0b      	ldr	r2, [pc, #44]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 800338e:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8003392:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003394:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003398:	430b      	orrs	r3, r1
 800339a:	6593      	str	r3, [r2, #88]	; 0x58
 800339c:	e6d8      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x630>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800339e:	2100      	movs	r1, #0
 80033a0:	1d28      	adds	r0, r5, #4
 80033a2:	f7ff facd 	bl	8002940 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033a6:	4604      	mov	r4, r0
      break;
 80033a8:	e7ef      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033aa:	2102      	movs	r1, #2
 80033ac:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80033b0:	f7ff fb3e 	bl	8002a30 <RCCEx_PLL3_Config>
 80033b4:	e7f7      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x886>
 80033b6:	4626      	mov	r6, r4
 80033b8:	e6ca      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x630>
 80033ba:	bf00      	nop
 80033bc:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Lptim345ClockSelection)
 80033c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80033c4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80033c8:	d003      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 80033ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80033ce:	f47f aed1 	bne.w	8003174 <HAL_RCCEx_PeriphCLKConfig+0x654>
    if(ret == HAL_OK)
 80033d2:	b9a4      	cbnz	r4, 80033fe <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80033d4:	4a2c      	ldr	r2, [pc, #176]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80033d6:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 80033da:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80033dc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80033e0:	430b      	orrs	r3, r1
 80033e2:	6593      	str	r3, [r2, #88]	; 0x58
 80033e4:	e6c8      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x658>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033e6:	2100      	movs	r1, #0
 80033e8:	1d28      	adds	r0, r5, #4
 80033ea:	f7ff faa9 	bl	8002940 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033ee:	4604      	mov	r4, r0
      break;
 80033f0:	e7ef      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033f2:	2102      	movs	r1, #2
 80033f4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80033f8:	f7ff fb1a 	bl	8002a30 <RCCEx_PLL3_Config>
 80033fc:	e7f7      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 80033fe:	4626      	mov	r6, r4
 8003400:	e6ba      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x658>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003402:	2102      	movs	r1, #2
 8003404:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8003408:	f7ff fb12 	bl	8002a30 <RCCEx_PLL3_Config>
 800340c:	e6f6      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
    switch(PeriphClkInit->AdcClockSelection)
 800340e:	2601      	movs	r6, #1
 8003410:	4634      	mov	r4, r6
 8003412:	e6ff      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8003414:	4626      	mov	r6, r4
 8003416:	e6fd      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003418:	2101      	movs	r1, #1
 800341a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800341e:	f7ff fb07 	bl	8002a30 <RCCEx_PLL3_Config>
 8003422:	4604      	mov	r4, r0
      break;
 8003424:	e70b      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x71e>
    switch(PeriphClkInit->UsbClockSelection)
 8003426:	2601      	movs	r6, #1
 8003428:	4634      	mov	r4, r6
 800342a:	e713      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x734>
 800342c:	4626      	mov	r6, r4
 800342e:	e711      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003430:	4a15      	ldr	r2, [pc, #84]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8003432:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003438:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800343a:	b96c      	cbnz	r4, 8003458 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800343c:	4a12      	ldr	r2, [pc, #72]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800343e:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8003440:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003446:	430b      	orrs	r3, r1
 8003448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800344a:	e710      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800344c:	2102      	movs	r1, #2
 800344e:	1d28      	adds	r0, r5, #4
 8003450:	f7ff fa76 	bl	8002940 <RCCEx_PLL2_Config>
 8003454:	4604      	mov	r4, r0
      break;
 8003456:	e7f0      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x91a>
 8003458:	4626      	mov	r6, r4
 800345a:	e708      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x74e>
    switch(PeriphClkInit->RngClockSelection)
 800345c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003460:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003464:	f47f af1b 	bne.w	800329e <HAL_RCCEx_PeriphCLKConfig+0x77e>
    if(ret == HAL_OK)
 8003468:	b964      	cbnz	r4, 8003484 <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800346a:	4807      	ldr	r0, [pc, #28]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800346c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800346e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003472:	430a      	orrs	r2, r1
 8003474:	6542      	str	r2, [r0, #84]	; 0x54
 8003476:	e713      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x780>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003478:	4803      	ldr	r0, [pc, #12]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800347a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800347c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003480:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8003482:	e7f1      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8003484:	4626      	mov	r6, r4
 8003486:	e70b      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x780>
 8003488:	58024400 	.word	0x58024400

0800348c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800348c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800348e:	f7ff fa11 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 8003492:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8003494:	4a05      	ldr	r2, [pc, #20]	; (80034ac <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800349c:	5cd3      	ldrb	r3, [r2, r3]
 800349e:	f003 031f 	and.w	r3, r3, #31
}
 80034a2:	40d8      	lsrs	r0, r3
 80034a4:	bd08      	pop	{r3, pc}
 80034a6:	bf00      	nop
 80034a8:	58024400 	.word	0x58024400
 80034ac:	0800b49c 	.word	0x0800b49c

080034b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034b0:	4a4e      	ldr	r2, [pc, #312]	; (80035ec <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 80034b2:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034b4:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80034b6:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80034b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 80034ba:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80034be:	f3c6 3105 	ubfx	r1, r6, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80034c2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 80034c4:	f000 808d 	beq.w	80035e2 <HAL_RCCEx_GetPLL2ClockFreq+0x132>
    switch (pllsource)
 80034c8:	ee07 1a90 	vmov	s15, r1
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80034cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80034d0:	f3c5 01cc 	ubfx	r1, r5, #3, #13
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034d4:	f004 0403 	and.w	r4, r4, #3
 80034d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80034dc:	434b      	muls	r3, r1
    switch (pllsource)
 80034de:	2c01      	cmp	r4, #1
 80034e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80034e4:	ee07 3a90 	vmov	s15, r3
 80034e8:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 80034ec:	d06b      	beq.n	80035c6 <HAL_RCCEx_GetPLL2ClockFreq+0x116>
 80034ee:	2c02      	cmp	r4, #2
 80034f0:	d05b      	beq.n	80035aa <HAL_RCCEx_GetPLL2ClockFreq+0xfa>
 80034f2:	2c00      	cmp	r4, #0
 80034f4:	d167      	bne.n	80035c6 <HAL_RCCEx_GetPLL2ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034f6:	6813      	ldr	r3, [r2, #0]
 80034f8:	069b      	lsls	r3, r3, #26
 80034fa:	d546      	bpl.n	800358a <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034fc:	6811      	ldr	r1, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034fe:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003500:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8003504:	4a3a      	ldr	r2, [pc, #232]	; (80035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003506:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800350a:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800350c:	ee07 2a10 	vmov	s14, r2
 8003510:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8003514:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8003518:	ee06 3a90 	vmov	s13, r3
 800351c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003520:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003524:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003528:	4a30      	ldr	r2, [pc, #192]	; (80035ec <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800352a:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800352e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003530:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003534:	ee07 3a10 	vmov	s14, r3
 8003538:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800353c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003540:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003544:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8003548:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800354c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800354e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003552:	ee07 3a10 	vmov	s14, r3
 8003556:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800355a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800355e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003562:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8003566:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800356a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800356c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003570:	ee07 3a10 	vmov	s14, r3
 8003574:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003578:	ee37 6a06 	vadd.f32	s12, s14, s12
 800357c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8003580:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003584:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8003588:	bd70      	pop	{r4, r5, r6, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800358a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800358c:	eddf 5a19 	vldr	s11, [pc, #100]	; 80035f4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8003590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003594:	ee07 3a10 	vmov	s14, r3
 8003598:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800359c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a0:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035a4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80035a8:	e7be      	b.n	8003528 <HAL_RCCEx_GetPLL2ClockFreq+0x78>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035aa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80035ac:	eddf 5a12 	vldr	s11, [pc, #72]	; 80035f8 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80035b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b4:	ee07 3a10 	vmov	s14, r3
 80035b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80035bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035c0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80035c4:	e7ee      	b.n	80035a4 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035c6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80035c8:	eddf 5a0c 	vldr	s11, [pc, #48]	; 80035fc <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 80035cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d0:	ee07 3a10 	vmov	s14, r3
 80035d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80035d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035dc:	ee77 7a86 	vadd.f32	s15, s15, s12
 80035e0:	e7e0      	b.n	80035a4 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80035e2:	e9c0 1100 	strd	r1, r1, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80035e6:	6081      	str	r1, [r0, #8]
}
 80035e8:	e7ce      	b.n	8003588 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 80035ea:	bf00      	nop
 80035ec:	58024400 	.word	0x58024400
 80035f0:	03d09000 	.word	0x03d09000
 80035f4:	4c742400 	.word	0x4c742400
 80035f8:	4af42400 	.word	0x4af42400
 80035fc:	4a742400 	.word	0x4a742400

08003600 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003600:	4a4e      	ldr	r2, [pc, #312]	; (800373c <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 8003602:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003604:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003606:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003608:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 800360a:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800360e:	f3c6 5105 	ubfx	r1, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003612:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8003614:	f000 808d 	beq.w	8003732 <HAL_RCCEx_GetPLL3ClockFreq+0x132>
    switch (pllsource)
 8003618:	ee07 1a90 	vmov	s15, r1
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800361c:	f3c3 2300 	ubfx	r3, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003620:	f3c5 01cc 	ubfx	r1, r5, #3, #13
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003624:	f004 0403 	and.w	r4, r4, #3
 8003628:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800362c:	434b      	muls	r3, r1
    switch (pllsource)
 800362e:	2c01      	cmp	r4, #1
 8003630:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003634:	ee07 3a90 	vmov	s15, r3
 8003638:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 800363c:	d06b      	beq.n	8003716 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
 800363e:	2c02      	cmp	r4, #2
 8003640:	d05b      	beq.n	80036fa <HAL_RCCEx_GetPLL3ClockFreq+0xfa>
 8003642:	2c00      	cmp	r4, #0
 8003644:	d167      	bne.n	8003716 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003646:	6813      	ldr	r3, [r2, #0]
 8003648:	069b      	lsls	r3, r3, #26
 800364a:	d546      	bpl.n	80036da <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800364c:	6811      	ldr	r1, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800364e:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003650:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8003654:	4a3a      	ldr	r2, [pc, #232]	; (8003740 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003656:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800365a:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800365c:	ee07 2a10 	vmov	s14, r2
 8003660:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8003664:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8003668:	ee06 3a90 	vmov	s13, r3
 800366c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003674:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003678:	4a30      	ldr	r2, [pc, #192]	; (800373c <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800367a:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800367e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003680:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003684:	ee07 3a10 	vmov	s14, r3
 8003688:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800368c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003690:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003694:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8003698:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800369c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800369e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80036a2:	ee07 3a10 	vmov	s14, r3
 80036a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80036aa:	ee37 7a06 	vadd.f32	s14, s14, s12
 80036ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80036b2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80036b6:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80036ba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80036bc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80036c0:	ee07 3a10 	vmov	s14, r3
 80036c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80036c8:	ee37 6a06 	vadd.f32	s12, s14, s12
 80036cc:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80036d0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80036d4:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80036d8:	bd70      	pop	{r4, r5, r6, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80036dc:	eddf 5a19 	vldr	s11, [pc, #100]	; 8003744 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80036e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e4:	ee07 3a10 	vmov	s14, r3
 80036e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80036ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f0:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036f4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80036f8:	e7be      	b.n	8003678 <HAL_RCCEx_GetPLL3ClockFreq+0x78>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036fa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80036fc:	eddf 5a12 	vldr	s11, [pc, #72]	; 8003748 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8003700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003704:	ee07 3a10 	vmov	s14, r3
 8003708:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800370c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003710:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003714:	e7ee      	b.n	80036f4 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003716:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003718:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800374c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800371c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003720:	ee07 3a10 	vmov	s14, r3
 8003724:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800372c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003730:	e7e0      	b.n	80036f4 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003732:	e9c0 1100 	strd	r1, r1, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003736:	6081      	str	r1, [r0, #8]
}
 8003738:	e7ce      	b.n	80036d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 800373a:	bf00      	nop
 800373c:	58024400 	.word	0x58024400
 8003740:	03d09000 	.word	0x03d09000
 8003744:	4c742400 	.word	0x4c742400
 8003748:	4af42400 	.word	0x4af42400
 800374c:	4a742400 	.word	0x4a742400

08003750 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003750:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003754:	2b01      	cmp	r3, #1
 8003756:	d12b      	bne.n	80037b0 <HAL_TIM_Base_Start+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375a:	4a16      	ldr	r2, [pc, #88]	; (80037b4 <HAL_TIM_Base_Start+0x64>)
  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003760:	6803      	ldr	r3, [r0, #0]
 8003762:	4293      	cmp	r3, r2
 8003764:	d016      	beq.n	8003794 <HAL_TIM_Base_Start+0x44>
 8003766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376a:	d013      	beq.n	8003794 <HAL_TIM_Base_Start+0x44>
 800376c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003770:	4293      	cmp	r3, r2
 8003772:	d00f      	beq.n	8003794 <HAL_TIM_Base_Start+0x44>
 8003774:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003778:	4293      	cmp	r3, r2
 800377a:	d00b      	beq.n	8003794 <HAL_TIM_Base_Start+0x44>
 800377c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003780:	4293      	cmp	r3, r2
 8003782:	d007      	beq.n	8003794 <HAL_TIM_Base_Start+0x44>
 8003784:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003788:	4293      	cmp	r3, r2
 800378a:	d003      	beq.n	8003794 <HAL_TIM_Base_Start+0x44>
 800378c:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8003790:	4293      	cmp	r3, r2
 8003792:	d107      	bne.n	80037a4 <HAL_TIM_Base_Start+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003794:	6899      	ldr	r1, [r3, #8]
 8003796:	4a08      	ldr	r2, [pc, #32]	; (80037b8 <HAL_TIM_Base_Start+0x68>)
 8003798:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379a:	2a06      	cmp	r2, #6
 800379c:	d006      	beq.n	80037ac <HAL_TIM_Base_Start+0x5c>
 800379e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80037a2:	d003      	beq.n	80037ac <HAL_TIM_Base_Start+0x5c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037ac:	2000      	movs	r0, #0
}
 80037ae:	4770      	bx	lr
    return HAL_ERROR;
 80037b0:	2001      	movs	r0, #1
 80037b2:	4770      	bx	lr
 80037b4:	40010000 	.word	0x40010000
 80037b8:	00010007 	.word	0x00010007

080037bc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037bc:	4a30      	ldr	r2, [pc, #192]	; (8003880 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80037be:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c0:	4290      	cmp	r0, r2
 80037c2:	d012      	beq.n	80037ea <TIM_Base_SetConfig+0x2e>
 80037c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80037c8:	d00f      	beq.n	80037ea <TIM_Base_SetConfig+0x2e>
 80037ca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80037ce:	4290      	cmp	r0, r2
 80037d0:	d00b      	beq.n	80037ea <TIM_Base_SetConfig+0x2e>
 80037d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037d6:	4290      	cmp	r0, r2
 80037d8:	d007      	beq.n	80037ea <TIM_Base_SetConfig+0x2e>
 80037da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037de:	4290      	cmp	r0, r2
 80037e0:	d003      	beq.n	80037ea <TIM_Base_SetConfig+0x2e>
 80037e2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80037e6:	4290      	cmp	r0, r2
 80037e8:	d119      	bne.n	800381e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80037ea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80037f0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037f2:	4a23      	ldr	r2, [pc, #140]	; (8003880 <TIM_Base_SetConfig+0xc4>)
 80037f4:	4290      	cmp	r0, r2
 80037f6:	d01d      	beq.n	8003834 <TIM_Base_SetConfig+0x78>
 80037f8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80037fc:	d01a      	beq.n	8003834 <TIM_Base_SetConfig+0x78>
 80037fe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003802:	4290      	cmp	r0, r2
 8003804:	d016      	beq.n	8003834 <TIM_Base_SetConfig+0x78>
 8003806:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800380a:	4290      	cmp	r0, r2
 800380c:	d012      	beq.n	8003834 <TIM_Base_SetConfig+0x78>
 800380e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003812:	4290      	cmp	r0, r2
 8003814:	d00e      	beq.n	8003834 <TIM_Base_SetConfig+0x78>
 8003816:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800381a:	4290      	cmp	r0, r2
 800381c:	d00a      	beq.n	8003834 <TIM_Base_SetConfig+0x78>
 800381e:	4a19      	ldr	r2, [pc, #100]	; (8003884 <TIM_Base_SetConfig+0xc8>)
 8003820:	4290      	cmp	r0, r2
 8003822:	d007      	beq.n	8003834 <TIM_Base_SetConfig+0x78>
 8003824:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003828:	4290      	cmp	r0, r2
 800382a:	d003      	beq.n	8003834 <TIM_Base_SetConfig+0x78>
 800382c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003830:	4290      	cmp	r0, r2
 8003832:	d103      	bne.n	800383c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003838:	68ca      	ldr	r2, [r1, #12]
 800383a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800383c:	694a      	ldr	r2, [r1, #20]
 800383e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003842:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003844:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003846:	688b      	ldr	r3, [r1, #8]
 8003848:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800384a:	680b      	ldr	r3, [r1, #0]
 800384c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800384e:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <TIM_Base_SetConfig+0xc4>)
 8003850:	4298      	cmp	r0, r3
 8003852:	d00f      	beq.n	8003874 <TIM_Base_SetConfig+0xb8>
 8003854:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003858:	4298      	cmp	r0, r3
 800385a:	d00b      	beq.n	8003874 <TIM_Base_SetConfig+0xb8>
 800385c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8003860:	4298      	cmp	r0, r3
 8003862:	d007      	beq.n	8003874 <TIM_Base_SetConfig+0xb8>
 8003864:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003868:	4298      	cmp	r0, r3
 800386a:	d003      	beq.n	8003874 <TIM_Base_SetConfig+0xb8>
 800386c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003870:	4298      	cmp	r0, r3
 8003872:	d101      	bne.n	8003878 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003874:	690b      	ldr	r3, [r1, #16]
 8003876:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003878:	2301      	movs	r3, #1
 800387a:	6143      	str	r3, [r0, #20]
}
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40010000 	.word	0x40010000
 8003884:	40014000 	.word	0x40014000

08003888 <HAL_TIM_Base_Init>:
{
 8003888:	b510      	push	{r4, lr}
  if (htim == NULL)
 800388a:	4604      	mov	r4, r0
 800388c:	b350      	cbz	r0, 80038e4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800388e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003892:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003896:	b91b      	cbnz	r3, 80038a0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003898:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800389c:	f7fd fd04 	bl	80012a8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a2:	6820      	ldr	r0, [r4, #0]
 80038a4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80038a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038aa:	f7ff ff87 	bl	80037bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ae:	2301      	movs	r3, #1
  return HAL_OK;
 80038b0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80038ba:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80038be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80038c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80038c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80038d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038d6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80038da:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80038de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80038e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80038e4:	2001      	movs	r0, #1
 80038e6:	e7fc      	b.n	80038e2 <HAL_TIM_Base_Init+0x5a>

080038e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ea:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80038ec:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038ee:	69c0      	ldr	r0, [r0, #28]
{
 80038f0:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038f2:	6921      	ldr	r1, [r4, #16]
 80038f4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038f6:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038f8:	430a      	orrs	r2, r1
 80038fa:	6961      	ldr	r1, [r4, #20]
 80038fc:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038fe:	49a4      	ldr	r1, [pc, #656]	; (8003b90 <UART_SetConfig+0x2a8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003900:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003902:	4029      	ands	r1, r5
 8003904:	430a      	orrs	r2, r1

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003906:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003908:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003910:	430a      	orrs	r2, r1
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003912:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003914:	605a      	str	r2, [r3, #4]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003916:	4a9f      	ldr	r2, [pc, #636]	; (8003b94 <UART_SetConfig+0x2ac>)
 8003918:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 800391a:	bf1c      	itt	ne
 800391c:	6a22      	ldrne	r2, [r4, #32]
 800391e:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8003926:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800392a:	430a      	orrs	r2, r1

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800392c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800392e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003932:	f022 020f 	bic.w	r2, r2, #15
 8003936:	430a      	orrs	r2, r1
 8003938:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800393a:	4a97      	ldr	r2, [pc, #604]	; (8003b98 <UART_SetConfig+0x2b0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d11b      	bne.n	8003978 <UART_SetConfig+0x90>
 8003940:	4b96      	ldr	r3, [pc, #600]	; (8003b9c <UART_SetConfig+0x2b4>)
 8003942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003944:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003948:	2b28      	cmp	r3, #40	; 0x28
 800394a:	d86c      	bhi.n	8003a26 <UART_SetConfig+0x13e>
 800394c:	4a94      	ldr	r2, [pc, #592]	; (8003ba0 <UART_SetConfig+0x2b8>)
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800394e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003952:	5cd3      	ldrb	r3, [r2, r3]
 8003954:	f040 8102 	bne.w	8003b5c <UART_SetConfig+0x274>
  {
    switch (clocksource)
 8003958:	2b08      	cmp	r3, #8
 800395a:	f200 80bf 	bhi.w	8003adc <UART_SetConfig+0x1f4>
 800395e:	2b08      	cmp	r3, #8
 8003960:	d861      	bhi.n	8003a26 <UART_SetConfig+0x13e>
 8003962:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003966:	00e7      	.short	0x00e7
 8003968:	006000ec 	.word	0x006000ec
 800396c:	00ef0060 	.word	0x00ef0060
 8003970:	00600060 	.word	0x00600060
 8003974:	00f40060 	.word	0x00f40060
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003978:	4a8a      	ldr	r2, [pc, #552]	; (8003ba4 <UART_SetConfig+0x2bc>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d107      	bne.n	800398e <UART_SetConfig+0xa6>
 800397e:	4b87      	ldr	r3, [pc, #540]	; (8003b9c <UART_SetConfig+0x2b4>)
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	2b05      	cmp	r3, #5
 8003988:	d84d      	bhi.n	8003a26 <UART_SetConfig+0x13e>
 800398a:	4a87      	ldr	r2, [pc, #540]	; (8003ba8 <UART_SetConfig+0x2c0>)
 800398c:	e7df      	b.n	800394e <UART_SetConfig+0x66>
 800398e:	4a87      	ldr	r2, [pc, #540]	; (8003bac <UART_SetConfig+0x2c4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d107      	bne.n	80039a4 <UART_SetConfig+0xbc>
 8003994:	4b81      	ldr	r3, [pc, #516]	; (8003b9c <UART_SetConfig+0x2b4>)
 8003996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	2b05      	cmp	r3, #5
 800399e:	d842      	bhi.n	8003a26 <UART_SetConfig+0x13e>
 80039a0:	4a83      	ldr	r2, [pc, #524]	; (8003bb0 <UART_SetConfig+0x2c8>)
 80039a2:	e7d4      	b.n	800394e <UART_SetConfig+0x66>
 80039a4:	4a83      	ldr	r2, [pc, #524]	; (8003bb4 <UART_SetConfig+0x2cc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d107      	bne.n	80039ba <UART_SetConfig+0xd2>
 80039aa:	4b7c      	ldr	r3, [pc, #496]	; (8003b9c <UART_SetConfig+0x2b4>)
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	2b05      	cmp	r3, #5
 80039b4:	d837      	bhi.n	8003a26 <UART_SetConfig+0x13e>
 80039b6:	4a80      	ldr	r2, [pc, #512]	; (8003bb8 <UART_SetConfig+0x2d0>)
 80039b8:	e7c9      	b.n	800394e <UART_SetConfig+0x66>
 80039ba:	4a80      	ldr	r2, [pc, #512]	; (8003bbc <UART_SetConfig+0x2d4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d107      	bne.n	80039d0 <UART_SetConfig+0xe8>
 80039c0:	4b76      	ldr	r3, [pc, #472]	; (8003b9c <UART_SetConfig+0x2b4>)
 80039c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	2b05      	cmp	r3, #5
 80039ca:	d82c      	bhi.n	8003a26 <UART_SetConfig+0x13e>
 80039cc:	4a7c      	ldr	r2, [pc, #496]	; (8003bc0 <UART_SetConfig+0x2d8>)
 80039ce:	e7be      	b.n	800394e <UART_SetConfig+0x66>
 80039d0:	4a7c      	ldr	r2, [pc, #496]	; (8003bc4 <UART_SetConfig+0x2dc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d107      	bne.n	80039e6 <UART_SetConfig+0xfe>
 80039d6:	4b71      	ldr	r3, [pc, #452]	; (8003b9c <UART_SetConfig+0x2b4>)
 80039d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039de:	2b28      	cmp	r3, #40	; 0x28
 80039e0:	d821      	bhi.n	8003a26 <UART_SetConfig+0x13e>
 80039e2:	4a79      	ldr	r2, [pc, #484]	; (8003bc8 <UART_SetConfig+0x2e0>)
 80039e4:	e7b3      	b.n	800394e <UART_SetConfig+0x66>
 80039e6:	4a79      	ldr	r2, [pc, #484]	; (8003bcc <UART_SetConfig+0x2e4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d107      	bne.n	80039fc <UART_SetConfig+0x114>
 80039ec:	4b6b      	ldr	r3, [pc, #428]	; (8003b9c <UART_SetConfig+0x2b4>)
 80039ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	2b05      	cmp	r3, #5
 80039f6:	d816      	bhi.n	8003a26 <UART_SetConfig+0x13e>
 80039f8:	4a75      	ldr	r2, [pc, #468]	; (8003bd0 <UART_SetConfig+0x2e8>)
 80039fa:	e7a8      	b.n	800394e <UART_SetConfig+0x66>
 80039fc:	4a75      	ldr	r2, [pc, #468]	; (8003bd4 <UART_SetConfig+0x2ec>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d107      	bne.n	8003a12 <UART_SetConfig+0x12a>
 8003a02:	4b66      	ldr	r3, [pc, #408]	; (8003b9c <UART_SetConfig+0x2b4>)
 8003a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	2b05      	cmp	r3, #5
 8003a0c:	d80b      	bhi.n	8003a26 <UART_SetConfig+0x13e>
 8003a0e:	4a72      	ldr	r2, [pc, #456]	; (8003bd8 <UART_SetConfig+0x2f0>)
 8003a10:	e79d      	b.n	800394e <UART_SetConfig+0x66>
 8003a12:	4a60      	ldr	r2, [pc, #384]	; (8003b94 <UART_SetConfig+0x2ac>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d106      	bne.n	8003a26 <UART_SetConfig+0x13e>
 8003a18:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8003a1c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	2b05      	cmp	r3, #5
 8003a24:	d901      	bls.n	8003a2a <UART_SetConfig+0x142>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a26:	2001      	movs	r0, #1
 8003a28:	e00e      	b.n	8003a48 <UART_SetConfig+0x160>
 8003a2a:	496c      	ldr	r1, [pc, #432]	; (8003bdc <UART_SetConfig+0x2f4>)
 8003a2c:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d023      	beq.n	8003a7a <UART_SetConfig+0x192>
 8003a32:	d811      	bhi.n	8003a58 <UART_SetConfig+0x170>
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d016      	beq.n	8003a66 <UART_SetConfig+0x17e>
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d019      	beq.n	8003a70 <UART_SetConfig+0x188>
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d1f2      	bne.n	8003a26 <UART_SetConfig+0x13e>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8003a40:	f7ff fd24 	bl	800348c <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8003a44:	bb10      	cbnz	r0, 8003a8c <UART_SetConfig+0x1a4>
 8003a46:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8003a48:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003a4c:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a4e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003a50:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70

  return ret;
}
 8003a54:	b007      	add	sp, #28
 8003a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (clocksource)
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d03d      	beq.n	8003ad8 <UART_SetConfig+0x1f0>
 8003a5c:	2b40      	cmp	r3, #64	; 0x40
 8003a5e:	d1e2      	bne.n	8003a26 <UART_SetConfig+0x13e>
 8003a60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a64:	e012      	b.n	8003a8c <UART_SetConfig+0x1a4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003a66:	4668      	mov	r0, sp
 8003a68:	f7ff fd22 	bl	80034b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003a6c:	9801      	ldr	r0, [sp, #4]
        break;
 8003a6e:	e7e9      	b.n	8003a44 <UART_SetConfig+0x15c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a70:	a803      	add	r0, sp, #12
 8003a72:	f7ff fdc5 	bl	8003600 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003a76:	9804      	ldr	r0, [sp, #16]
        break;
 8003a78:	e7e4      	b.n	8003a44 <UART_SetConfig+0x15c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a7a:	6813      	ldr	r3, [r2, #0]
 8003a7c:	4858      	ldr	r0, [pc, #352]	; (8003be0 <UART_SetConfig+0x2f8>)
 8003a7e:	f013 0f20 	tst.w	r3, #32
 8003a82:	d003      	beq.n	8003a8c <UART_SetConfig+0x1a4>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003a84:	6813      	ldr	r3, [r2, #0]
 8003a86:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003a8a:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a8c:	4b55      	ldr	r3, [pc, #340]	; (8003be4 <UART_SetConfig+0x2fc>)
 8003a8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a90:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a92:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a96:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a9a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a9e:	4299      	cmp	r1, r3
 8003aa0:	d8c1      	bhi.n	8003a26 <UART_SetConfig+0x13e>
 8003aa2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8003aa6:	d8be      	bhi.n	8003a26 <UART_SetConfig+0x13e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	2100      	movs	r1, #0
 8003aac:	f7fc fe2c 	bl	8000708 <__aeabi_uldivmod>
 8003ab0:	462a      	mov	r2, r5
 8003ab2:	020f      	lsls	r7, r1, #8
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	0206      	lsls	r6, r0, #8
 8003ab8:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8003abc:	0868      	lsrs	r0, r5, #1
 8003abe:	1830      	adds	r0, r6, r0
 8003ac0:	f147 0100 	adc.w	r1, r7, #0
 8003ac4:	f7fc fe20 	bl	8000708 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ac8:	4b47      	ldr	r3, [pc, #284]	; (8003be8 <UART_SetConfig+0x300>)
 8003aca:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d8a9      	bhi.n	8003a26 <UART_SetConfig+0x13e>
          huart->Instance->BRR = usartdiv;
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	60d8      	str	r0, [r3, #12]
 8003ad6:	e7b6      	b.n	8003a46 <UART_SetConfig+0x15e>
        pclk = (uint32_t) CSI_VALUE;
 8003ad8:	4844      	ldr	r0, [pc, #272]	; (8003bec <UART_SetConfig+0x304>)
 8003ada:	e7d7      	b.n	8003a8c <UART_SetConfig+0x1a4>
    switch (clocksource)
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d03b      	beq.n	8003b58 <UART_SetConfig+0x270>
 8003ae0:	2b40      	cmp	r3, #64	; 0x40
 8003ae2:	d00b      	beq.n	8003afc <UART_SetConfig+0x214>
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d19e      	bne.n	8003a26 <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ae8:	4b2c      	ldr	r3, [pc, #176]	; (8003b9c <UART_SetConfig+0x2b4>)
 8003aea:	483d      	ldr	r0, [pc, #244]	; (8003be0 <UART_SetConfig+0x2f8>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	f012 0f20 	tst.w	r2, #32
 8003af2:	d003      	beq.n	8003afc <UART_SetConfig+0x214>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003afa:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003afc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003afe:	4b39      	ldr	r3, [pc, #228]	; (8003be4 <UART_SetConfig+0x2fc>)
 8003b00:	6862      	ldr	r2, [r4, #4]
 8003b02:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b0a:	0850      	lsrs	r0, r2, #1
 8003b0c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8003b10:	fbb0 f0f2 	udiv	r0, r0, r2
 8003b14:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b16:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003b1a:	f1a3 0110 	sub.w	r1, r3, #16
 8003b1e:	4291      	cmp	r1, r2
 8003b20:	d881      	bhi.n	8003a26 <UART_SetConfig+0x13e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b22:	f020 000f 	bic.w	r0, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b26:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8003b2a:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b2c:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8003b2e:	4318      	orrs	r0, r3
 8003b30:	60d0      	str	r0, [r2, #12]
 8003b32:	e788      	b.n	8003a46 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b34:	f7fe fee0 	bl	80028f8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d084      	beq.n	8003a46 <UART_SetConfig+0x15e>
 8003b3c:	e7de      	b.n	8003afc <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b3e:	f7fe feed 	bl	800291c <HAL_RCC_GetPCLK2Freq>
        break;
 8003b42:	e7f9      	b.n	8003b38 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b44:	4668      	mov	r0, sp
 8003b46:	f7ff fcb3 	bl	80034b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003b4a:	9801      	ldr	r0, [sp, #4]
        break;
 8003b4c:	e7f4      	b.n	8003b38 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b4e:	a803      	add	r0, sp, #12
 8003b50:	f7ff fd56 	bl	8003600 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003b54:	9804      	ldr	r0, [sp, #16]
        break;
 8003b56:	e7ef      	b.n	8003b38 <UART_SetConfig+0x250>
        pclk = (uint32_t) CSI_VALUE;
 8003b58:	4824      	ldr	r0, [pc, #144]	; (8003bec <UART_SetConfig+0x304>)
 8003b5a:	e7cf      	b.n	8003afc <UART_SetConfig+0x214>
    switch (clocksource)
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d847      	bhi.n	8003bf0 <UART_SetConfig+0x308>
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	f63f af60 	bhi.w	8003a26 <UART_SetConfig+0x13e>
 8003b66:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <UART_SetConfig+0x284>)
 8003b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6c:	08003c41 	.word	0x08003c41
 8003b70:	08003c4d 	.word	0x08003c4d
 8003b74:	08003a27 	.word	0x08003a27
 8003b78:	08003a27 	.word	0x08003a27
 8003b7c:	08003c53 	.word	0x08003c53
 8003b80:	08003a27 	.word	0x08003a27
 8003b84:	08003a27 	.word	0x08003a27
 8003b88:	08003a27 	.word	0x08003a27
 8003b8c:	08003c5d 	.word	0x08003c5d
 8003b90:	cfff69f3 	.word	0xcfff69f3
 8003b94:	58000c00 	.word	0x58000c00
 8003b98:	40011000 	.word	0x40011000
 8003b9c:	58024400 	.word	0x58024400
 8003ba0:	0800b57e 	.word	0x0800b57e
 8003ba4:	40004400 	.word	0x40004400
 8003ba8:	0800b5a7 	.word	0x0800b5a7
 8003bac:	40004800 	.word	0x40004800
 8003bb0:	0800b5a7 	.word	0x0800b5a7
 8003bb4:	40004c00 	.word	0x40004c00
 8003bb8:	0800b5a7 	.word	0x0800b5a7
 8003bbc:	40005000 	.word	0x40005000
 8003bc0:	0800b5a7 	.word	0x0800b5a7
 8003bc4:	40011400 	.word	0x40011400
 8003bc8:	0800b57e 	.word	0x0800b57e
 8003bcc:	40007800 	.word	0x40007800
 8003bd0:	0800b5a7 	.word	0x0800b5a7
 8003bd4:	40007c00 	.word	0x40007c00
 8003bd8:	0800b5a7 	.word	0x0800b5a7
 8003bdc:	0800b5ad 	.word	0x0800b5ad
 8003be0:	03d09000 	.word	0x03d09000
 8003be4:	0800b5b4 	.word	0x0800b5b4
 8003be8:	000ffcff 	.word	0x000ffcff
 8003bec:	003d0900 	.word	0x003d0900
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	d038      	beq.n	8003c66 <UART_SetConfig+0x37e>
 8003bf4:	2b40      	cmp	r3, #64	; 0x40
 8003bf6:	d038      	beq.n	8003c6a <UART_SetConfig+0x382>
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	f47f af14 	bne.w	8003a26 <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bfe:	4a1d      	ldr	r2, [pc, #116]	; (8003c74 <UART_SetConfig+0x38c>)
 8003c00:	6813      	ldr	r3, [r2, #0]
 8003c02:	f013 0f20 	tst.w	r3, #32
 8003c06:	4b1c      	ldr	r3, [pc, #112]	; (8003c78 <UART_SetConfig+0x390>)
 8003c08:	d032      	beq.n	8003c70 <UART_SetConfig+0x388>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003c0a:	6810      	ldr	r0, [r2, #0]
 8003c0c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8003c10:	fa23 f000 	lsr.w	r0, r3, r0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c16:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <UART_SetConfig+0x394>)
 8003c18:	6862      	ldr	r2, [r4, #4]
 8003c1a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c22:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003c26:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c2a:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c2c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003c30:	f1a3 0110 	sub.w	r1, r3, #16
 8003c34:	4291      	cmp	r1, r2
 8003c36:	f63f aef6 	bhi.w	8003a26 <UART_SetConfig+0x13e>
        huart->Instance->BRR = usartdiv;
 8003c3a:	6822      	ldr	r2, [r4, #0]
 8003c3c:	60d3      	str	r3, [r2, #12]
 8003c3e:	e702      	b.n	8003a46 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c40:	f7fe fe5a 	bl	80028f8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003c44:	2800      	cmp	r0, #0
 8003c46:	f43f aefe 	beq.w	8003a46 <UART_SetConfig+0x15e>
 8003c4a:	e7e3      	b.n	8003c14 <UART_SetConfig+0x32c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c4c:	f7fe fe66 	bl	800291c <HAL_RCC_GetPCLK2Freq>
        break;
 8003c50:	e7f8      	b.n	8003c44 <UART_SetConfig+0x35c>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c52:	4668      	mov	r0, sp
 8003c54:	f7ff fc2c 	bl	80034b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003c58:	9801      	ldr	r0, [sp, #4]
        break;
 8003c5a:	e7f3      	b.n	8003c44 <UART_SetConfig+0x35c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003c5c:	a803      	add	r0, sp, #12
 8003c5e:	f7ff fccf 	bl	8003600 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003c62:	9804      	ldr	r0, [sp, #16]
        break;
 8003c64:	e7ee      	b.n	8003c44 <UART_SetConfig+0x35c>
        pclk = (uint32_t) CSI_VALUE;
 8003c66:	4806      	ldr	r0, [pc, #24]	; (8003c80 <UART_SetConfig+0x398>)
 8003c68:	e7d4      	b.n	8003c14 <UART_SetConfig+0x32c>
    switch (clocksource)
 8003c6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003c6e:	e7d1      	b.n	8003c14 <UART_SetConfig+0x32c>
          pclk = (uint32_t) HSI_VALUE;
 8003c70:	4618      	mov	r0, r3
 8003c72:	e7cf      	b.n	8003c14 <UART_SetConfig+0x32c>
 8003c74:	58024400 	.word	0x58024400
 8003c78:	03d09000 	.word	0x03d09000
 8003c7c:	0800b5b4 	.word	0x0800b5b4
 8003c80:	003d0900 	.word	0x003d0900

08003c84 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c84:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003c86:	07da      	lsls	r2, r3, #31
{
 8003c88:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c8a:	d506      	bpl.n	8003c9a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c8c:	6801      	ldr	r1, [r0, #0]
 8003c8e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003c90:	684a      	ldr	r2, [r1, #4]
 8003c92:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003c96:	4322      	orrs	r2, r4
 8003c98:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c9a:	079c      	lsls	r4, r3, #30
 8003c9c:	d506      	bpl.n	8003cac <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c9e:	6801      	ldr	r1, [r0, #0]
 8003ca0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003ca2:	684a      	ldr	r2, [r1, #4]
 8003ca4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ca8:	4322      	orrs	r2, r4
 8003caa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cac:	0759      	lsls	r1, r3, #29
 8003cae:	d506      	bpl.n	8003cbe <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cb0:	6801      	ldr	r1, [r0, #0]
 8003cb2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003cb4:	684a      	ldr	r2, [r1, #4]
 8003cb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cba:	4322      	orrs	r2, r4
 8003cbc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cbe:	071a      	lsls	r2, r3, #28
 8003cc0:	d506      	bpl.n	8003cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cc2:	6801      	ldr	r1, [r0, #0]
 8003cc4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003cc6:	684a      	ldr	r2, [r1, #4]
 8003cc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ccc:	4322      	orrs	r2, r4
 8003cce:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cd0:	06dc      	lsls	r4, r3, #27
 8003cd2:	d506      	bpl.n	8003ce2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cd4:	6801      	ldr	r1, [r0, #0]
 8003cd6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003cd8:	688a      	ldr	r2, [r1, #8]
 8003cda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cde:	4322      	orrs	r2, r4
 8003ce0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ce2:	0699      	lsls	r1, r3, #26
 8003ce4:	d506      	bpl.n	8003cf4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ce6:	6801      	ldr	r1, [r0, #0]
 8003ce8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003cea:	688a      	ldr	r2, [r1, #8]
 8003cec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cf0:	4322      	orrs	r2, r4
 8003cf2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cf4:	065a      	lsls	r2, r3, #25
 8003cf6:	d510      	bpl.n	8003d1a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cf8:	6801      	ldr	r1, [r0, #0]
 8003cfa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003cfc:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cfe:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d02:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003d06:	ea42 0204 	orr.w	r2, r2, r4
 8003d0a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d0c:	d105      	bne.n	8003d1a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d0e:	684a      	ldr	r2, [r1, #4]
 8003d10:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003d12:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003d16:	4322      	orrs	r2, r4
 8003d18:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d1a:	061b      	lsls	r3, r3, #24
 8003d1c:	d506      	bpl.n	8003d2c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d1e:	6802      	ldr	r2, [r0, #0]
 8003d20:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003d22:	6853      	ldr	r3, [r2, #4]
 8003d24:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	6053      	str	r3, [r2, #4]
  }
}
 8003d2c:	bd10      	pop	{r4, pc}

08003d2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d32:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003d36:	4604      	mov	r4, r0
 8003d38:	460e      	mov	r6, r1
 8003d3a:	4615      	mov	r5, r2
 8003d3c:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3e:	6822      	ldr	r2, [r4, #0]
 8003d40:	69d3      	ldr	r3, [r2, #28]
 8003d42:	ea36 0303 	bics.w	r3, r6, r3
 8003d46:	bf0c      	ite	eq
 8003d48:	2301      	moveq	r3, #1
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	42ab      	cmp	r3, r5
 8003d4e:	d001      	beq.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003d50:	2000      	movs	r0, #0
 8003d52:	e01c      	b.n	8003d8e <UART_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8003d54:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003d58:	d0f2      	beq.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5a:	f7fd fc21 	bl	80015a0 <HAL_GetTick>
 8003d5e:	1bc0      	subs	r0, r0, r7
 8003d60:	4540      	cmp	r0, r8
 8003d62:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003d64:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d66:	d802      	bhi.n	8003d6e <UART_WaitOnFlagUntilTimeout+0x40>
 8003d68:	f1b8 0f00 	cmp.w	r8, #0
 8003d6c:	d111      	bne.n	8003d92 <UART_WaitOnFlagUntilTimeout+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003d6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d72:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d74:	6883      	ldr	r3, [r0, #8]
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003d7c:	2320      	movs	r3, #32
 8003d7e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003d82:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 8003d86:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8003d88:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8003d8a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8003d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d92:	075a      	lsls	r2, r3, #29
 8003d94:	d5d3      	bpl.n	8003d3e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d96:	69c3      	ldr	r3, [r0, #28]
 8003d98:	051b      	lsls	r3, r3, #20
 8003d9a:	d5d0      	bpl.n	8003d3e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003da0:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003da2:	6803      	ldr	r3, [r0, #0]
 8003da4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003da8:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003daa:	6883      	ldr	r3, [r0, #8]
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003db2:	2320      	movs	r3, #32
 8003db4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003db8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dbc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003dc0:	e7e1      	b.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x58>

08003dc2 <HAL_UART_Transmit>:
{
 8003dc2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003dc6:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003dc8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8003dcc:	4604      	mov	r4, r0
 8003dce:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8003dd0:	2b20      	cmp	r3, #32
{
 8003dd2:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003dd4:	d150      	bne.n	8003e78 <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 8003dd6:	2900      	cmp	r1, #0
 8003dd8:	d04c      	beq.n	8003e74 <HAL_UART_Transmit+0xb2>
 8003dda:	2a00      	cmp	r2, #0
 8003ddc:	d04a      	beq.n	8003e74 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8003dde:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d048      	beq.n	8003e78 <HAL_UART_Transmit+0xb6>
 8003de6:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de8:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003dea:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dee:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df0:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003df4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 8003df8:	f7fd fbd2 	bl	80015a0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dfc:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8003dfe:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 8003e00:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e04:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 8003e08:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e0c:	d103      	bne.n	8003e16 <HAL_UART_Transmit+0x54>
 8003e0e:	6922      	ldr	r2, [r4, #16]
 8003e10:	b90a      	cbnz	r2, 8003e16 <HAL_UART_Transmit+0x54>
 8003e12:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003e14:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8003e16:	2200      	movs	r2, #0
 8003e18:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8003e1c:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e20:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8003e24:	b292      	uxth	r2, r2
 8003e26:	b942      	cbnz	r2, 8003e3a <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e28:	2140      	movs	r1, #64	; 0x40
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	f7ff ff7f 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8003e30:	b958      	cbnz	r0, 8003e4a <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8003e32:	2320      	movs	r3, #32
 8003e34:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8003e38:	e008      	b.n	8003e4c <HAL_UART_Transmit+0x8a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2180      	movs	r1, #128	; 0x80
 8003e3e:	4620      	mov	r0, r4
 8003e40:	9303      	str	r3, [sp, #12]
 8003e42:	f7ff ff74 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8003e46:	9b03      	ldr	r3, [sp, #12]
 8003e48:	b118      	cbz	r0, 8003e52 <HAL_UART_Transmit+0x90>
        return HAL_TIMEOUT;
 8003e4a:	2003      	movs	r0, #3
}
 8003e4c:	b004      	add	sp, #16
 8003e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdata8bits == NULL)
 8003e52:	6821      	ldr	r1, [r4, #0]
 8003e54:	b95e      	cbnz	r6, 8003e6e <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e56:	f835 2b02 	ldrh.w	r2, [r5], #2
 8003e5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e5e:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8003e60:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8003e64:	3a01      	subs	r2, #1
 8003e66:	b292      	uxth	r2, r2
 8003e68:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 8003e6c:	e7d6      	b.n	8003e1c <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e6e:	f816 2b01 	ldrb.w	r2, [r6], #1
 8003e72:	e7f4      	b.n	8003e5e <HAL_UART_Transmit+0x9c>
      return  HAL_ERROR;
 8003e74:	2001      	movs	r0, #1
 8003e76:	e7e9      	b.n	8003e4c <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 8003e78:	2002      	movs	r0, #2
 8003e7a:	e7e7      	b.n	8003e4c <HAL_UART_Transmit+0x8a>

08003e7c <UART_CheckIdleState>:
{
 8003e7c:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7e:	2500      	movs	r5, #0
{
 8003e80:	4604      	mov	r4, r0
 8003e82:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e84:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8003e88:	f7fd fb8a 	bl	80015a0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e8c:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8003e8e:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	0711      	lsls	r1, r2, #28
 8003e94:	d417      	bmi.n	8003ec6 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e96:	6822      	ldr	r2, [r4, #0]
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	0752      	lsls	r2, r2, #29
 8003e9c:	d509      	bpl.n	8003eb2 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e9e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003ea2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	9200      	str	r2, [sp, #0]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f7ff ff3f 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8003eb0:	b9b0      	cbnz	r0, 8003ee0 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 8003eb2:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003eb6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8003eba:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003ebe:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec2:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 8003ec4:	e00d      	b.n	8003ee2 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ec6:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003eca:	9003      	str	r0, [sp, #12]
 8003ecc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	9200      	str	r2, [sp, #0]
 8003ed4:	462a      	mov	r2, r5
 8003ed6:	f7ff ff2a 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8003eda:	9b03      	ldr	r3, [sp, #12]
 8003edc:	2800      	cmp	r0, #0
 8003ede:	d0da      	beq.n	8003e96 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003ee0:	2003      	movs	r0, #3
}
 8003ee2:	b005      	add	sp, #20
 8003ee4:	bd30      	pop	{r4, r5, pc}

08003ee6 <HAL_UART_Init>:
{
 8003ee6:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003ee8:	4604      	mov	r4, r0
 8003eea:	b350      	cbz	r0, 8003f42 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003eec:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8003ef0:	b91b      	cbnz	r3, 8003efa <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8003ef2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8003ef6:	f7fd f9ef 	bl	80012d8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003efa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003efc:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003efe:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8003f00:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8003f04:	6813      	ldr	r3, [r2, #0]
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f0c:	f7ff fcec 	bl	80038e8 <UART_SetConfig>
 8003f10:	2801      	cmp	r0, #1
 8003f12:	d016      	beq.n	8003f42 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003f16:	b113      	cbz	r3, 8003f1e <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8003f18:	4620      	mov	r0, r4
 8003f1a:	f7ff feb3 	bl	8003c84 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f1e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003f20:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f30:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	f042 0201 	orr.w	r2, r2, #1
}
 8003f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8003f3c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003f3e:	f7ff bf9d 	b.w	8003e7c <UART_CheckIdleState>
}
 8003f42:	2001      	movs	r0, #1
 8003f44:	bd10      	pop	{r4, pc}
	...

08003f48 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f48:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8003f4a:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f4c:	b91b      	cbnz	r3, 8003f56 <UARTEx_SetNbDataToProcess+0xe>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 8003f4e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003f52:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f54:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f56:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f58:	4d0a      	ldr	r5, [pc, #40]	; (8003f84 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f5a:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f5c:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f5e:	4c0a      	ldr	r4, [pc, #40]	; (8003f88 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f60:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f64:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f66:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f68:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f70:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f74:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8003f76:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f7e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8003f82:	e7e7      	b.n	8003f54 <UARTEx_SetNbDataToProcess+0xc>
 8003f84:	0800b5d4 	.word	0x0800b5d4
 8003f88:	0800b5cc 	.word	0x0800b5cc

08003f8c <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8003f8c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d014      	beq.n	8003fbe <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f94:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003f96:	2324      	movs	r3, #36	; 0x24
 8003f98:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f9c:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003f9e:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003fa0:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8003fa4:	f023 0301 	bic.w	r3, r3, #1
 8003fa8:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003faa:	2300      	movs	r3, #0
 8003fac:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fae:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003fb0:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8003fb2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8003fb6:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  return HAL_OK;
 8003fba:	4618      	mov	r0, r3
 8003fbc:	4770      	bx	lr
  __HAL_LOCK(huart);
 8003fbe:	2002      	movs	r0, #2
}
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003fc2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003fc4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8003fc8:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d01b      	beq.n	8004006 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8003fd4:	2324      	movs	r3, #36	; 0x24
 8003fd6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fda:	6803      	ldr	r3, [r0, #0]
 8003fdc:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8003fec:	4311      	orrs	r1, r2
 8003fee:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003ff0:	f7ff ffaa 	bl	8003f48 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ff4:	6803      	ldr	r3, [r0, #0]
 8003ff6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003ff8:	2320      	movs	r3, #32
 8003ffa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8003ffe:	2000      	movs	r0, #0
 8004000:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8004004:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004006:	2002      	movs	r0, #2
 8004008:	e7fc      	b.n	8004004 <HAL_UARTEx_SetTxFifoThreshold+0x42>

0800400a <HAL_UARTEx_SetRxFifoThreshold>:
{
 800400a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800400c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8004010:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8004012:	2b01      	cmp	r3, #1
 8004014:	d01b      	beq.n	800404e <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8004016:	2301      	movs	r3, #1
 8004018:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800401c:	2324      	movs	r3, #36	; 0x24
 800401e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004022:	6803      	ldr	r3, [r0, #0]
 8004024:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	f022 0201 	bic.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8004034:	4311      	orrs	r1, r2
 8004036:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004038:	f7ff ff86 	bl	8003f48 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800403c:	6803      	ldr	r3, [r0, #0]
 800403e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004040:	2320      	movs	r3, #32
 8004042:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8004046:	2000      	movs	r0, #0
 8004048:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800404c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800404e:	2002      	movs	r0, #2
 8004050:	e7fc      	b.n	800404c <HAL_UARTEx_SetRxFifoThreshold+0x42>
	...

08004054 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004054:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004056:	3b01      	subs	r3, #1
 8004058:	d00f      	beq.n	800407a <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800405a:	6902      	ldr	r2, [r0, #16]
 800405c:	2a00      	cmp	r2, #0
 800405e:	dafa      	bge.n	8004056 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004060:	6903      	ldr	r3, [r0, #16]
 8004062:	4a07      	ldr	r2, [pc, #28]	; (8004080 <USB_CoreReset+0x2c>)
 8004064:	f043 0301 	orr.w	r3, r3, #1
 8004068:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800406a:	3a01      	subs	r2, #1
 800406c:	d005      	beq.n	800407a <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800406e:	6903      	ldr	r3, [r0, #16]
 8004070:	f013 0301 	ands.w	r3, r3, #1
 8004074:	d1f9      	bne.n	800406a <USB_CoreReset+0x16>

  return HAL_OK;
 8004076:	4618      	mov	r0, r3
 8004078:	4770      	bx	lr
      return HAL_TIMEOUT;
 800407a:	2003      	movs	r0, #3
}
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	00030d41 	.word	0x00030d41

08004084 <USB_CoreInit>:
{
 8004084:	b084      	sub	sp, #16
 8004086:	b538      	push	{r3, r4, r5, lr}
 8004088:	ad05      	add	r5, sp, #20
 800408a:	4604      	mov	r4, r0
 800408c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004092:	2b01      	cmp	r3, #1
 8004094:	d12f      	bne.n	80040f6 <USB_CoreInit+0x72>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004096:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800409c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800409e:	68c3      	ldr	r3, [r0, #12]
 80040a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80040a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a8:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80040aa:	68c3      	ldr	r3, [r0, #12]
 80040ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80040b0:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80040b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d103      	bne.n	80040c0 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040b8:	68c3      	ldr	r3, [r0, #12]
 80040ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040be:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80040c0:	4620      	mov	r0, r4
 80040c2:	f7ff ffc7 	bl	8004054 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80040c6:	9b08      	ldr	r3, [sp, #32]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d110      	bne.n	80040ee <USB_CoreInit+0x6a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80040cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80040d2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80040d4:	f043 737b 	orr.w	r3, r3, #65798144	; 0x3ec0000
 80040d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040dc:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040de:	68a3      	ldr	r3, [r4, #8]
 80040e0:	f043 0306 	orr.w	r3, r3, #6
 80040e4:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040e6:	68a3      	ldr	r3, [r4, #8]
 80040e8:	f043 0320 	orr.w	r3, r3, #32
 80040ec:	60a3      	str	r3, [r4, #8]
}
 80040ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040f2:	b004      	add	sp, #16
 80040f4:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040f6:	68c3      	ldr	r3, [r0, #12]
 80040f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040fc:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80040fe:	f7ff ffa9 	bl	8004054 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8004102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004104:	b923      	cbnz	r3, 8004110 <USB_CoreInit+0x8c>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004106:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800410c:	63a3      	str	r3, [r4, #56]	; 0x38
 800410e:	e7da      	b.n	80040c6 <USB_CoreInit+0x42>
 8004110:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004116:	e7f9      	b.n	800410c <USB_CoreInit+0x88>

08004118 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004118:	6883      	ldr	r3, [r0, #8]
 800411a:	f023 0301 	bic.w	r3, r3, #1
 800411e:	6083      	str	r3, [r0, #8]
}
 8004120:	2000      	movs	r0, #0
 8004122:	4770      	bx	lr

08004124 <USB_SetCurrentMode>:
{
 8004124:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004126:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004128:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800412a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800412e:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004130:	d108      	bne.n	8004144 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004132:	68c3      	ldr	r3, [r0, #12]
 8004134:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004138:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800413a:	2032      	movs	r0, #50	; 0x32
 800413c:	f7fd fa36 	bl	80015ac <HAL_Delay>
  return HAL_OK;
 8004140:	2000      	movs	r0, #0
}
 8004142:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8004144:	b919      	cbnz	r1, 800414e <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004146:	68c3      	ldr	r3, [r0, #12]
 8004148:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800414c:	e7f4      	b.n	8004138 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800414e:	2001      	movs	r0, #1
 8004150:	e7f7      	b.n	8004142 <USB_SetCurrentMode+0x1e>
	...

08004154 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004154:	0189      	lsls	r1, r1, #6
 8004156:	4a07      	ldr	r2, [pc, #28]	; (8004174 <USB_FlushTxFifo+0x20>)
 8004158:	f041 0120 	orr.w	r1, r1, #32
 800415c:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800415e:	3a01      	subs	r2, #1
 8004160:	d005      	beq.n	800416e <USB_FlushTxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004162:	6903      	ldr	r3, [r0, #16]
 8004164:	f013 0320 	ands.w	r3, r3, #32
 8004168:	d1f9      	bne.n	800415e <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800416a:	4618      	mov	r0, r3
 800416c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800416e:	2003      	movs	r0, #3
}
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	00030d41 	.word	0x00030d41

08004178 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004178:	2310      	movs	r3, #16
 800417a:	4a06      	ldr	r2, [pc, #24]	; (8004194 <USB_FlushRxFifo+0x1c>)
 800417c:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800417e:	3a01      	subs	r2, #1
 8004180:	d005      	beq.n	800418e <USB_FlushRxFifo+0x16>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004182:	6903      	ldr	r3, [r0, #16]
 8004184:	f013 0310 	ands.w	r3, r3, #16
 8004188:	d1f9      	bne.n	800417e <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800418a:	4618      	mov	r0, r3
 800418c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800418e:	2003      	movs	r0, #3
}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	00030d41 	.word	0x00030d41

08004198 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8004198:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800419c:	4319      	orrs	r1, r3
 800419e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80041a2:	2000      	movs	r0, #0
 80041a4:	4770      	bx	lr
	...

080041a8 <USB_DevInit>:
{
 80041a8:	b084      	sub	sp, #16
 80041aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041ae:	4604      	mov	r4, r0
 80041b0:	a809      	add	r0, sp, #36	; 0x24
 80041b2:	460e      	mov	r6, r1
 80041b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80041b8:	2300      	movs	r3, #0
 80041ba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    USBx->DIEPTXF[i] = 0U;
 80041bc:	4619      	mov	r1, r3
 80041be:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 80041c2:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 80041c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 80041c8:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80041ca:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80041cc:	d1f7      	bne.n	80041be <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 80041ce:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 80041d2:	2d00      	cmp	r5, #0
 80041d4:	d16c      	bne.n	80042b0 <USB_DevInit+0x108>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f043 0302 	orr.w	r3, r3, #2
 80041dc:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80041de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041e4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041ec:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f4:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80041fc:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8004200:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004206:	2b01      	cmp	r3, #1
 8004208:	d159      	bne.n	80042be <USB_DevInit+0x116>
    if (cfg.speed == USBD_HS_SPEED)
 800420a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800420c:	2900      	cmp	r1, #0
 800420e:	d154      	bne.n	80042ba <USB_DevInit+0x112>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004210:	4620      	mov	r0, r4
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004212:	f64f 387f 	movw	r8, #64383	; 0xfb7f
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004216:	f7ff ffbf 	bl	8004198 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800421a:	2110      	movs	r1, #16
 800421c:	4620      	mov	r0, r4
 800421e:	f7ff ff99 	bl	8004154 <USB_FlushTxFifo>
 8004222:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004224:	4620      	mov	r0, r4
 8004226:	f7ff ffa7 	bl	8004178 <USB_FlushRxFifo>
 800422a:	4308      	orrs	r0, r1
  USBx_DEVICE->DIEPMSK = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004232:	b2c0      	uxtb	r0, r0
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004234:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8004238:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800423a:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    ret = HAL_ERROR;
 800423e:	3800      	subs	r0, #0
  USBx_DEVICE->DIEPMSK = 0U;
 8004240:	613b      	str	r3, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004242:	617b      	str	r3, [r7, #20]
    ret = HAL_ERROR;
 8004244:	bf18      	it	ne
 8004246:	2001      	movne	r0, #1
  USBx_DEVICE->DAINTMSK = 0U;
 8004248:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800424a:	42b3      	cmp	r3, r6
 800424c:	d139      	bne.n	80042c2 <USB_DevInit+0x11a>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800424e:	2200      	movs	r2, #0
 8004250:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004254:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004258:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800425c:	4611      	mov	r1, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800425e:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004262:	42b2      	cmp	r2, r6
 8004264:	d140      	bne.n	80042e8 <USB_DevInit+0x140>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800426c:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004272:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004276:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8004278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800427a:	b91b      	cbnz	r3, 8004284 <USB_DevInit+0xdc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800427c:	69a3      	ldr	r3, [r4, #24]
 800427e:	f043 0310 	orr.w	r3, r3, #16
 8004282:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004284:	69a2      	ldr	r2, [r4, #24]
 8004286:	4b22      	ldr	r3, [pc, #136]	; (8004310 <USB_DevInit+0x168>)
 8004288:	4313      	orrs	r3, r2
 800428a:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800428c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800428e:	b11b      	cbz	r3, 8004298 <USB_DevInit+0xf0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004290:	69a3      	ldr	r3, [r4, #24]
 8004292:	f043 0308 	orr.w	r3, r3, #8
 8004296:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8004298:	2d01      	cmp	r5, #1
 800429a:	d105      	bne.n	80042a8 <USB_DevInit+0x100>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800429c:	69a3      	ldr	r3, [r4, #24]
 800429e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042a2:	f043 0304 	orr.w	r3, r3, #4
 80042a6:	61a3      	str	r3, [r4, #24]
}
 80042a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042ac:	b004      	add	sp, #16
 80042ae:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80042b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80042b8:	e79d      	b.n	80041f6 <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042ba:	4619      	mov	r1, r3
 80042bc:	e7a8      	b.n	8004210 <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042be:	2103      	movs	r1, #3
 80042c0:	e7a6      	b.n	8004210 <USB_DevInit+0x68>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042c2:	f8d2 9000 	ldr.w	r9, [r2]
 80042c6:	f1b9 0f00 	cmp.w	r9, #0
 80042ca:	da0b      	bge.n	80042e4 <USB_DevInit+0x13c>
      if (i == 0U)
 80042cc:	b93b      	cbnz	r3, 80042de <USB_DevInit+0x136>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042ce:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042d2:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042d4:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042d6:	f8c2 8008 	str.w	r8, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042da:	3220      	adds	r2, #32
 80042dc:	e7b5      	b.n	800424a <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042de:	f8c2 c000 	str.w	ip, [r2]
 80042e2:	e7f6      	b.n	80042d2 <USB_DevInit+0x12a>
      USBx_INEP(i)->DIEPCTL = 0U;
 80042e4:	6011      	str	r1, [r2, #0]
 80042e6:	e7f4      	b.n	80042d2 <USB_DevInit+0x12a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042e8:	f8d3 9000 	ldr.w	r9, [r3]
 80042ec:	f1b9 0f00 	cmp.w	r9, #0
 80042f0:	da0b      	bge.n	800430a <USB_DevInit+0x162>
      if (i == 0U)
 80042f2:	b93a      	cbnz	r2, 8004304 <USB_DevInit+0x15c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042f4:	f8c3 e000 	str.w	lr, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042f8:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042fa:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80042fc:	f8c3 8008 	str.w	r8, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004300:	3320      	adds	r3, #32
 8004302:	e7ae      	b.n	8004262 <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004304:	f8c3 c000 	str.w	ip, [r3]
 8004308:	e7f6      	b.n	80042f8 <USB_DevInit+0x150>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800430a:	6019      	str	r1, [r3, #0]
 800430c:	e7f4      	b.n	80042f8 <USB_DevInit+0x150>
 800430e:	bf00      	nop
 8004310:	803c3800 	.word	0x803c3800

08004314 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004314:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8004318:	f023 0303 	bic.w	r3, r3, #3
 800431c:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004320:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8004324:	f043 0302 	orr.w	r3, r3, #2
 8004328:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800432c:	2000      	movs	r0, #0
 800432e:	4770      	bx	lr

08004330 <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004330:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8004332:	2304      	movs	r3, #4
 8004334:	2200      	movs	r2, #0
 8004336:	e9cd 3200 	strd	r3, r2, [sp]
 800433a:	2301      	movs	r3, #1
 800433c:	4a02      	ldr	r2, [pc, #8]	; (8004348 <ai_sine_model_create+0x18>)
 800433e:	f000 f921 	bl	8004584 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004342:	b003      	add	sp, #12
 8004344:	f85d fb04 	ldr.w	pc, [sp], #4
 8004348:	240006a0 	.word	0x240006a0

0800434c <ai_sine_model_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 800434c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800434e:	b085      	sub	sp, #20
 8004350:	4606      	mov	r6, r0
 8004352:	9101      	str	r1, [sp, #4]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004354:	f000 fa66 	bl	8004824 <ai_platform_network_init>
  if (!net_ctx) return false;
 8004358:	2800      	cmp	r0, #0
 800435a:	d07a      	beq.n	8004452 <ai_sine_model_init+0x106>
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 800435c:	2300      	movs	r3, #0
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 800435e:	9a01      	ldr	r2, [sp, #4]
 8004360:	2101      	movs	r1, #1
 8004362:	a803      	add	r0, sp, #12
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8004364:	9303      	str	r3, [sp, #12]
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8004366:	f000 f8a1 	bl	80044ac <ai_platform_get_weights_map>
 800436a:	9a01      	ldr	r2, [sp, #4]
 800436c:	4604      	mov	r4, r0
 800436e:	2800      	cmp	r0, #0
 8004370:	d046      	beq.n	8004400 <ai_sine_model_init+0xb4>
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8004372:	4939      	ldr	r1, [pc, #228]	; (8004458 <ai_sine_model_init+0x10c>)
 8004374:	680b      	ldr	r3, [r1, #0]
 8004376:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800437a:	600b      	str	r3, [r1, #0]
    dense_0_weights_array.data = AI_PTR(weights_map[0] + 0);
 800437c:	9b03      	ldr	r3, [sp, #12]
    dense_0_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 800437e:	e9c1 3302 	strd	r3, r3, [r1, #8]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8004382:	4936      	ldr	r1, [pc, #216]	; (800445c <ai_sine_model_init+0x110>)
    dense_2_bias_array.data = AI_PTR(weights_map[0] + 99840);
 8004384:	f503 35c3 	add.w	r5, r3, #99840	; 0x18600
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8004388:	6808      	ldr	r0, [r1, #0]
 800438a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800438e:	6008      	str	r0, [r1, #0]
    dense_0_bias_array.data = AI_PTR(weights_map[0] + 512);
 8004390:	f503 7000 	add.w	r0, r3, #512	; 0x200
    dense_0_bias_array.data_start = AI_PTR(weights_map[0] + 512);
 8004394:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004398:	4931      	ldr	r1, [pc, #196]	; (8004460 <ai_sine_model_init+0x114>)
 800439a:	6808      	ldr	r0, [r1, #0]
 800439c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80043a0:	6008      	str	r0, [r1, #0]
    dense_1_weights_array.data = AI_PTR(weights_map[0] + 1024);
 80043a2:	f503 6080 	add.w	r0, r3, #1024	; 0x400
    dense_1_weights_array.data_start = AI_PTR(weights_map[0] + 1024);
 80043a6:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80043aa:	492e      	ldr	r1, [pc, #184]	; (8004464 <ai_sine_model_init+0x118>)
 80043ac:	6808      	ldr	r0, [r1, #0]
 80043ae:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80043b2:	6008      	str	r0, [r1, #0]
    dense_1_bias_array.data = AI_PTR(weights_map[0] + 66560);
 80043b4:	f503 3082 	add.w	r0, r3, #66560	; 0x10400
    dense_1_bias_array.data_start = AI_PTR(weights_map[0] + 66560);
 80043b8:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80043bc:	492a      	ldr	r1, [pc, #168]	; (8004468 <ai_sine_model_init+0x11c>)
 80043be:	6808      	ldr	r0, [r1, #0]
 80043c0:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80043c4:	6008      	str	r0, [r1, #0]
    dense_2_weights_array.data = AI_PTR(weights_map[0] + 67072);
 80043c6:	f503 3083 	add.w	r0, r3, #67072	; 0x10600
    dense_3_bias_array.data = AI_PTR(weights_map[0] + 100352);
 80043ca:	f503 33c4 	add.w	r3, r3, #100352	; 0x18800
    dense_2_weights_array.data_start = AI_PTR(weights_map[0] + 67072);
 80043ce:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80043d2:	4926      	ldr	r1, [pc, #152]	; (800446c <ai_sine_model_init+0x120>)
 80043d4:	6808      	ldr	r0, [r1, #0]
 80043d6:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    dense_2_bias_array.data_start = AI_PTR(weights_map[0] + 99840);
 80043da:	e9c1 5502 	strd	r5, r5, [r1, #8]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80043de:	6008      	str	r0, [r1, #0]
    dense_3_weights_array.data = AI_PTR(weights_map[0] + 100096);
 80043e0:	f505 7580 	add.w	r5, r5, #256	; 0x100
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80043e4:	4922      	ldr	r1, [pc, #136]	; (8004470 <ai_sine_model_init+0x124>)
 80043e6:	6808      	ldr	r0, [r1, #0]
 80043e8:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    dense_3_weights_array.data_start = AI_PTR(weights_map[0] + 100096);
 80043ec:	e9c1 5502 	strd	r5, r5, [r1, #8]
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80043f0:	6008      	str	r0, [r1, #0]
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 80043f2:	4920      	ldr	r1, [pc, #128]	; (8004474 <ai_sine_model_init+0x128>)
 80043f4:	6808      	ldr	r0, [r1, #0]
 80043f6:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80043fa:	6008      	str	r0, [r1, #0]
    dense_3_bias_array.data_start = AI_PTR(weights_map[0] + 100352);
 80043fc:	e9c1 3302 	strd	r3, r3, [r1, #8]
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8004400:	2500      	movs	r5, #0
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8004402:	2101      	movs	r1, #1
 8004404:	a803      	add	r0, sp, #12
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8004406:	9503      	str	r5, [sp, #12]
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8004408:	f000 f886 	bl	8004518 <ai_platform_get_activations_map>
 800440c:	4607      	mov	r7, r0
 800440e:	b1d0      	cbz	r0, 8004446 <ai_sine_model_init+0xfa>
    serving_default_dense_input0_output_array.data = AI_PTR(NULL);
 8004410:	4b19      	ldr	r3, [pc, #100]	; (8004478 <ai_sine_model_init+0x12c>)
    dense_0_output_array.data = AI_PTR(activations_map[0] + 0);
 8004412:	4a1a      	ldr	r2, [pc, #104]	; (800447c <ai_sine_model_init+0x130>)
    dense_1_output_array.data = AI_PTR(activations_map[0] + 512);
 8004414:	491a      	ldr	r1, [pc, #104]	; (8004480 <ai_sine_model_init+0x134>)
    serving_default_dense_input0_output_array.data_start = AI_PTR(NULL);
 8004416:	e9c3 5502 	strd	r5, r5, [r3, #8]
    dense_0_output_array.data = AI_PTR(activations_map[0] + 0);
 800441a:	9b03      	ldr	r3, [sp, #12]
    dense_0_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800441c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_0_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 8004420:	4a18      	ldr	r2, [pc, #96]	; (8004484 <ai_sine_model_init+0x138>)
    nl_0_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8004422:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_output_array.data = AI_PTR(activations_map[0] + 512);
 8004426:	f503 7200 	add.w	r2, r3, #512	; 0x200
    dense_1_output_array.data_start = AI_PTR(activations_map[0] + 512);
 800442a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_1_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 800442e:	4916      	ldr	r1, [pc, #88]	; (8004488 <ai_sine_model_init+0x13c>)
    nl_1_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8004430:	e9c1 3302 	strd	r3, r3, [r1, #8]
    dense_2_output_array.data = AI_PTR(activations_map[0] + 512);
 8004434:	4915      	ldr	r1, [pc, #84]	; (800448c <ai_sine_model_init+0x140>)
    dense_2_output_array.data_start = AI_PTR(activations_map[0] + 512);
 8004436:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_2_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 800443a:	4a15      	ldr	r2, [pc, #84]	; (8004490 <ai_sine_model_init+0x144>)
    nl_2_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800443c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_3_output_array.data = AI_PTR(NULL);
 8004440:	4b14      	ldr	r3, [pc, #80]	; (8004494 <ai_sine_model_init+0x148>)
    dense_3_output_array.data_start = AI_PTR(NULL);
 8004442:	e9c3 5502 	strd	r5, r5, [r3, #8]

  ai_bool ok = true;
  ok &= sine_model_configure_weights(net_ctx, params);
  ok &= sine_model_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8004446:	4630      	mov	r0, r6
 8004448:	f000 fb58 	bl	8004afc <ai_platform_network_post_init>
 800444c:	4038      	ands	r0, r7
 800444e:	4020      	ands	r0, r4
 8004450:	b2c0      	uxtb	r0, r0

  return ok;
}
 8004452:	b005      	add	sp, #20
 8004454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004456:	bf00      	nop
 8004458:	240004b0 	.word	0x240004b0
 800445c:	2400043c 	.word	0x2400043c
 8004460:	24000550 	.word	0x24000550
 8004464:	240004dc 	.word	0x240004dc
 8004468:	240005f0 	.word	0x240005f0
 800446c:	2400057c 	.word	0x2400057c
 8004470:	24000690 	.word	0x24000690
 8004474:	2400061c 	.word	0x2400061c
 8004478:	240007e8 	.word	0x240007e8
 800447c:	24000484 	.word	0x24000484
 8004480:	24000524 	.word	0x24000524
 8004484:	24000724 	.word	0x24000724
 8004488:	24000770 	.word	0x24000770
 800448c:	240005c4 	.word	0x240005c4
 8004490:	240007bc 	.word	0x240007bc
 8004494:	24000664 	.word	0x24000664

08004498 <ai_sine_model_run>:

AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8004498:	f000 bc12 	b.w	8004cc0 <ai_platform_network_process>

0800449c <ai_sine_model_data_weights_get>:
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_sine_model_weights_map);

}
 800449c:	4800      	ldr	r0, [pc, #0]	; (80044a0 <ai_sine_model_data_weights_get+0x4>)
 800449e:	4770      	bx	lr
 80044a0:	08023e28 	.word	0x08023e28

080044a4 <_ai_platform_acquire_crc>:
 80044a4:	2001      	movs	r0, #1
 80044a6:	4770      	bx	lr

080044a8 <_ai_platform_release_crc>:
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop

080044ac <ai_platform_get_weights_map>:
 80044ac:	b14a      	cbz	r2, 80044c2 <ai_platform_get_weights_map+0x16>
 80044ae:	6913      	ldr	r3, [r2, #16]
 80044b0:	b133      	cbz	r3, 80044c0 <ai_platform_get_weights_map+0x14>
 80044b2:	fab1 f281 	clz	r2, r1
 80044b6:	0952      	lsrs	r2, r2, #5
 80044b8:	2800      	cmp	r0, #0
 80044ba:	bf08      	it	eq
 80044bc:	2201      	moveq	r2, #1
 80044be:	b112      	cbz	r2, 80044c6 <ai_platform_get_weights_map+0x1a>
 80044c0:	2200      	movs	r2, #0
 80044c2:	4610      	mov	r0, r2
 80044c4:	4770      	bx	lr
 80044c6:	b4f0      	push	{r4, r5, r6, r7}
 80044c8:	4c12      	ldr	r4, [pc, #72]	; (8004514 <ai_platform_get_weights_map+0x68>)
 80044ca:	681e      	ldr	r6, [r3, #0]
 80044cc:	42a6      	cmp	r6, r4
 80044ce:	d008      	beq.n	80044e2 <ai_platform_get_weights_map+0x36>
 80044d0:	f1a1 0201 	sub.w	r2, r1, #1
 80044d4:	6003      	str	r3, [r0, #0]
 80044d6:	fab2 f282 	clz	r2, r2
 80044da:	0952      	lsrs	r2, r2, #5
 80044dc:	4610      	mov	r0, r2
 80044de:	bcf0      	pop	{r4, r5, r6, r7}
 80044e0:	4770      	bx	lr
 80044e2:	685c      	ldr	r4, [r3, #4]
 80044e4:	3304      	adds	r3, #4
 80044e6:	42b4      	cmp	r4, r6
 80044e8:	d0f8      	beq.n	80044dc <ai_platform_get_weights_map+0x30>
 80044ea:	3804      	subs	r0, #4
 80044ec:	461f      	mov	r7, r3
 80044ee:	4615      	mov	r5, r2
 80044f0:	e003      	b.n	80044fa <ai_platform_get_weights_map+0x4e>
 80044f2:	f857 4f04 	ldr.w	r4, [r7, #4]!
 80044f6:	42b4      	cmp	r4, r6
 80044f8:	d0f0      	beq.n	80044dc <ai_platform_get_weights_map+0x30>
 80044fa:	3501      	adds	r5, #1
 80044fc:	f840 4f04 	str.w	r4, [r0, #4]!
 8004500:	42a9      	cmp	r1, r5
 8004502:	d1f6      	bne.n	80044f2 <ai_platform_get_weights_map+0x46>
 8004504:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004508:	4b02      	ldr	r3, [pc, #8]	; (8004514 <ai_platform_get_weights_map+0x68>)
 800450a:	4299      	cmp	r1, r3
 800450c:	bf08      	it	eq
 800450e:	2201      	moveq	r2, #1
 8004510:	e7e4      	b.n	80044dc <ai_platform_get_weights_map+0x30>
 8004512:	bf00      	nop
 8004514:	a1facade 	.word	0xa1facade

08004518 <ai_platform_get_activations_map>:
 8004518:	b14a      	cbz	r2, 800452e <ai_platform_get_activations_map+0x16>
 800451a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800451c:	b133      	cbz	r3, 800452c <ai_platform_get_activations_map+0x14>
 800451e:	fab1 f281 	clz	r2, r1
 8004522:	0952      	lsrs	r2, r2, #5
 8004524:	2800      	cmp	r0, #0
 8004526:	bf08      	it	eq
 8004528:	2201      	moveq	r2, #1
 800452a:	b112      	cbz	r2, 8004532 <ai_platform_get_activations_map+0x1a>
 800452c:	2200      	movs	r2, #0
 800452e:	4610      	mov	r0, r2
 8004530:	4770      	bx	lr
 8004532:	b4f0      	push	{r4, r5, r6, r7}
 8004534:	4c12      	ldr	r4, [pc, #72]	; (8004580 <ai_platform_get_activations_map+0x68>)
 8004536:	681e      	ldr	r6, [r3, #0]
 8004538:	42a6      	cmp	r6, r4
 800453a:	d008      	beq.n	800454e <ai_platform_get_activations_map+0x36>
 800453c:	f1a1 0201 	sub.w	r2, r1, #1
 8004540:	6003      	str	r3, [r0, #0]
 8004542:	fab2 f282 	clz	r2, r2
 8004546:	0952      	lsrs	r2, r2, #5
 8004548:	4610      	mov	r0, r2
 800454a:	bcf0      	pop	{r4, r5, r6, r7}
 800454c:	4770      	bx	lr
 800454e:	685c      	ldr	r4, [r3, #4]
 8004550:	3304      	adds	r3, #4
 8004552:	42b4      	cmp	r4, r6
 8004554:	d0f8      	beq.n	8004548 <ai_platform_get_activations_map+0x30>
 8004556:	3804      	subs	r0, #4
 8004558:	461f      	mov	r7, r3
 800455a:	4615      	mov	r5, r2
 800455c:	e003      	b.n	8004566 <ai_platform_get_activations_map+0x4e>
 800455e:	f857 4f04 	ldr.w	r4, [r7, #4]!
 8004562:	42b4      	cmp	r4, r6
 8004564:	d0f0      	beq.n	8004548 <ai_platform_get_activations_map+0x30>
 8004566:	3501      	adds	r5, #1
 8004568:	f840 4f04 	str.w	r4, [r0, #4]!
 800456c:	42a9      	cmp	r1, r5
 800456e:	d1f6      	bne.n	800455e <ai_platform_get_activations_map+0x46>
 8004570:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004574:	4b02      	ldr	r3, [pc, #8]	; (8004580 <ai_platform_get_activations_map+0x68>)
 8004576:	4299      	cmp	r1, r3
 8004578:	bf08      	it	eq
 800457a:	2201      	moveq	r2, #1
 800457c:	e7e4      	b.n	8004548 <ai_platform_get_activations_map+0x30>
 800457e:	bf00      	nop
 8004580:	a1facade 	.word	0xa1facade

08004584 <ai_platform_network_create>:
 8004584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	4680      	mov	r8, r0
 800458c:	4616      	mov	r6, r2
 800458e:	461d      	mov	r5, r3
 8004590:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8004594:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8004598:	f7ff ff84 	bl	80044a4 <_ai_platform_acquire_crc>
 800459c:	2800      	cmp	r0, #0
 800459e:	d069      	beq.n	8004674 <ai_platform_network_create+0xf0>
 80045a0:	4b95      	ldr	r3, [pc, #596]	; (80047f8 <ai_platform_network_create+0x274>)
 80045a2:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 80045a6:	4602      	mov	r2, r0
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045ae:	eb03 010c 	add.w	r1, r3, ip
 80045b2:	2901      	cmp	r1, #1
 80045b4:	d955      	bls.n	8004662 <ai_platform_network_create+0xde>
 80045b6:	f240 4149 	movw	r1, #1097	; 0x449
 80045ba:	428b      	cmp	r3, r1
 80045bc:	d051      	beq.n	8004662 <ai_platform_network_create+0xde>
 80045be:	498f      	ldr	r1, [pc, #572]	; (80047fc <ai_platform_network_create+0x278>)
 80045c0:	680b      	ldr	r3, [r1, #0]
 80045c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045c6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80045ca:	d067      	beq.n	800469c <ai_platform_network_create+0x118>
 80045cc:	680b      	ldr	r3, [r1, #0]
 80045ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045d2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80045d6:	d07c      	beq.n	80046d2 <ai_platform_network_create+0x14e>
 80045d8:	f7ff ff66 	bl	80044a8 <_ai_platform_release_crc>
 80045dc:	4a88      	ldr	r2, [pc, #544]	; (8004800 <ai_platform_network_create+0x27c>)
 80045de:	6813      	ldr	r3, [r2, #0]
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	f7ff ff5d 	bl	80044a4 <_ai_platform_acquire_crc>
 80045ea:	4b83      	ldr	r3, [pc, #524]	; (80047f8 <ai_platform_network_create+0x274>)
 80045ec:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045f6:	185a      	adds	r2, r3, r1
 80045f8:	2a01      	cmp	r2, #1
 80045fa:	d940      	bls.n	800467e <ai_platform_network_create+0xfa>
 80045fc:	f240 4249 	movw	r2, #1097	; 0x449
 8004600:	4293      	cmp	r3, r2
 8004602:	d03c      	beq.n	800467e <ai_platform_network_create+0xfa>
 8004604:	4a7d      	ldr	r2, [pc, #500]	; (80047fc <ai_platform_network_create+0x278>)
 8004606:	6813      	ldr	r3, [r2, #0]
 8004608:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800460c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004610:	f000 80a8 	beq.w	8004764 <ai_platform_network_create+0x1e0>
 8004614:	6813      	ldr	r3, [r2, #0]
 8004616:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800461a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800461e:	f000 8091 	beq.w	8004744 <ai_platform_network_create+0x1c0>
 8004622:	f7ff ff41 	bl	80044a8 <_ai_platform_release_crc>
 8004626:	f1b8 0f00 	cmp.w	r8, #0
 800462a:	d045      	beq.n	80046b8 <ai_platform_network_create+0x134>
 800462c:	4b75      	ldr	r3, [pc, #468]	; (8004804 <ai_platform_network_create+0x280>)
 800462e:	6033      	str	r3, [r6, #0]
 8004630:	f8c8 6000 	str.w	r6, [r8]
 8004634:	f000 fe0c 	bl	8005250 <core_init>
 8004638:	2800      	cmp	r0, #0
 800463a:	d157      	bne.n	80046ec <ai_platform_network_create+0x168>
 800463c:	062d      	lsls	r5, r5, #24
 800463e:	2230      	movs	r2, #48	; 0x30
 8004640:	0424      	lsls	r4, r4, #16
 8004642:	2300      	movs	r3, #0
 8004644:	2110      	movs	r1, #16
 8004646:	f8c8 3000 	str.w	r3, [r8]
 800464a:	2000      	movs	r0, #0
 800464c:	ea44 2307 	orr.w	r3, r4, r7, lsl #8
 8004650:	f362 0007 	bfi	r0, r2, #0, #8
 8004654:	432b      	orrs	r3, r5
 8004656:	f361 201f 	bfi	r0, r1, #8, #24
 800465a:	6473      	str	r3, [r6, #68]	; 0x44
 800465c:	b002      	add	sp, #8
 800465e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004662:	4b69      	ldr	r3, [pc, #420]	; (8004808 <ai_platform_network_create+0x284>)
 8004664:	2118      	movs	r1, #24
 8004666:	6019      	str	r1, [r3, #0]
 8004668:	6819      	ldr	r1, [r3, #0]
 800466a:	2918      	cmp	r1, #24
 800466c:	d029      	beq.n	80046c2 <ai_platform_network_create+0x13e>
 800466e:	4610      	mov	r0, r2
 8004670:	f7ff ff1a 	bl	80044a8 <_ai_platform_release_crc>
 8004674:	f241 0033 	movw	r0, #4147	; 0x1033
 8004678:	b002      	add	sp, #8
 800467a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800467e:	4b62      	ldr	r3, [pc, #392]	; (8004808 <ai_platform_network_create+0x284>)
 8004680:	2201      	movs	r2, #1
 8004682:	4619      	mov	r1, r3
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	680b      	ldr	r3, [r1, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1fc      	bne.n	8004686 <ai_platform_network_create+0x102>
 800468c:	4b5f      	ldr	r3, [pc, #380]	; (800480c <ai_platform_network_create+0x288>)
 800468e:	4960      	ldr	r1, [pc, #384]	; (8004810 <ai_platform_network_create+0x28c>)
 8004690:	4a60      	ldr	r2, [pc, #384]	; (8004814 <ai_platform_network_create+0x290>)
 8004692:	6019      	str	r1, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4293      	cmp	r3, r2
 8004698:	d0c3      	beq.n	8004622 <ai_platform_network_create+0x9e>
 800469a:	e7fe      	b.n	800469a <ai_platform_network_create+0x116>
 800469c:	4b5e      	ldr	r3, [pc, #376]	; (8004818 <ai_platform_network_create+0x294>)
 800469e:	2118      	movs	r1, #24
 80046a0:	6019      	str	r1, [r3, #0]
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	2918      	cmp	r1, #24
 80046a6:	d1e3      	bne.n	8004670 <ai_platform_network_create+0xec>
 80046a8:	2101      	movs	r1, #1
 80046aa:	4618      	mov	r0, r3
 80046ac:	6019      	str	r1, [r3, #0]
 80046ae:	6803      	ldr	r3, [r0, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1fc      	bne.n	80046ae <ai_platform_network_create+0x12a>
 80046b4:	4610      	mov	r0, r2
 80046b6:	e78f      	b.n	80045d8 <ai_platform_network_create+0x54>
 80046b8:	f241 0010 	movw	r0, #4112	; 0x1010
 80046bc:	b002      	add	sp, #8
 80046be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c2:	2101      	movs	r1, #1
 80046c4:	4618      	mov	r0, r3
 80046c6:	6019      	str	r1, [r3, #0]
 80046c8:	6803      	ldr	r3, [r0, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1fc      	bne.n	80046c8 <ai_platform_network_create+0x144>
 80046ce:	4610      	mov	r0, r2
 80046d0:	e782      	b.n	80045d8 <ai_platform_network_create+0x54>
 80046d2:	4b4d      	ldr	r3, [pc, #308]	; (8004808 <ai_platform_network_create+0x284>)
 80046d4:	2118      	movs	r1, #24
 80046d6:	6019      	str	r1, [r3, #0]
 80046d8:	6819      	ldr	r1, [r3, #0]
 80046da:	2918      	cmp	r1, #24
 80046dc:	d1c8      	bne.n	8004670 <ai_platform_network_create+0xec>
 80046de:	2101      	movs	r1, #1
 80046e0:	4618      	mov	r0, r3
 80046e2:	6019      	str	r1, [r3, #0]
 80046e4:	6803      	ldr	r3, [r0, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1fc      	bne.n	80046e4 <ai_platform_network_create+0x160>
 80046ea:	e7e3      	b.n	80046b4 <ai_platform_network_create+0x130>
 80046ec:	4a44      	ldr	r2, [pc, #272]	; (8004800 <ai_platform_network_create+0x27c>)
 80046ee:	6813      	ldr	r3, [r2, #0]
 80046f0:	f023 0301 	bic.w	r3, r3, #1
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	f7ff fed5 	bl	80044a4 <_ai_platform_acquire_crc>
 80046fa:	4b3f      	ldr	r3, [pc, #252]	; (80047f8 <ai_platform_network_create+0x274>)
 80046fc:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004706:	189a      	adds	r2, r3, r2
 8004708:	2a01      	cmp	r2, #1
 800470a:	d965      	bls.n	80047d8 <ai_platform_network_create+0x254>
 800470c:	f240 4249 	movw	r2, #1097	; 0x449
 8004710:	4293      	cmp	r3, r2
 8004712:	d061      	beq.n	80047d8 <ai_platform_network_create+0x254>
 8004714:	4a39      	ldr	r2, [pc, #228]	; (80047fc <ai_platform_network_create+0x278>)
 8004716:	6813      	ldr	r3, [r2, #0]
 8004718:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800471c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004720:	d04b      	beq.n	80047ba <ai_platform_network_create+0x236>
 8004722:	6813      	ldr	r3, [r2, #0]
 8004724:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004728:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800472c:	d034      	beq.n	8004798 <ai_platform_network_create+0x214>
 800472e:	062d      	lsls	r5, r5, #24
 8004730:	0424      	lsls	r4, r4, #16
 8004732:	f7ff feb9 	bl	80044a8 <_ai_platform_release_crc>
 8004736:	ea45 0304 	orr.w	r3, r5, r4
 800473a:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800473e:	d021      	beq.n	8004784 <ai_platform_network_create+0x200>
 8004740:	2201      	movs	r2, #1
 8004742:	e77e      	b.n	8004642 <ai_platform_network_create+0xbe>
 8004744:	4b30      	ldr	r3, [pc, #192]	; (8004808 <ai_platform_network_create+0x284>)
 8004746:	2201      	movs	r2, #1
 8004748:	4619      	mov	r1, r3
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	680b      	ldr	r3, [r1, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1fc      	bne.n	800474c <ai_platform_network_create+0x1c8>
 8004752:	4b2e      	ldr	r3, [pc, #184]	; (800480c <ai_platform_network_create+0x288>)
 8004754:	492e      	ldr	r1, [pc, #184]	; (8004810 <ai_platform_network_create+0x28c>)
 8004756:	4a2f      	ldr	r2, [pc, #188]	; (8004814 <ai_platform_network_create+0x290>)
 8004758:	6019      	str	r1, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4293      	cmp	r3, r2
 800475e:	f43f af60 	beq.w	8004622 <ai_platform_network_create+0x9e>
 8004762:	e7fe      	b.n	8004762 <ai_platform_network_create+0x1de>
 8004764:	4b2c      	ldr	r3, [pc, #176]	; (8004818 <ai_platform_network_create+0x294>)
 8004766:	2201      	movs	r2, #1
 8004768:	4619      	mov	r1, r3
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	680b      	ldr	r3, [r1, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1fc      	bne.n	800476c <ai_platform_network_create+0x1e8>
 8004772:	4b2a      	ldr	r3, [pc, #168]	; (800481c <ai_platform_network_create+0x298>)
 8004774:	4926      	ldr	r1, [pc, #152]	; (8004810 <ai_platform_network_create+0x28c>)
 8004776:	4a27      	ldr	r2, [pc, #156]	; (8004814 <ai_platform_network_create+0x290>)
 8004778:	6019      	str	r1, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4293      	cmp	r3, r2
 800477e:	f43f af50 	beq.w	8004622 <ai_platform_network_create+0x9e>
 8004782:	e7fe      	b.n	8004782 <ai_platform_network_create+0x1fe>
 8004784:	4b26      	ldr	r3, [pc, #152]	; (8004820 <ai_platform_network_create+0x29c>)
 8004786:	a802      	add	r0, sp, #8
 8004788:	f840 3d04 	str.w	r3, [r0, #-4]!
 800478c:	f001 fb98 	bl	8005ec0 <ai_check_custom_types>
 8004790:	b188      	cbz	r0, 80047b6 <ai_platform_network_create+0x232>
 8004792:	2100      	movs	r1, #0
 8004794:	460a      	mov	r2, r1
 8004796:	e758      	b.n	800464a <ai_platform_network_create+0xc6>
 8004798:	4b1b      	ldr	r3, [pc, #108]	; (8004808 <ai_platform_network_create+0x284>)
 800479a:	2201      	movs	r2, #1
 800479c:	4619      	mov	r1, r3
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	680b      	ldr	r3, [r1, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1fc      	bne.n	80047a0 <ai_platform_network_create+0x21c>
 80047a6:	4b19      	ldr	r3, [pc, #100]	; (800480c <ai_platform_network_create+0x288>)
 80047a8:	4919      	ldr	r1, [pc, #100]	; (8004810 <ai_platform_network_create+0x28c>)
 80047aa:	4a1a      	ldr	r2, [pc, #104]	; (8004814 <ai_platform_network_create+0x290>)
 80047ac:	6019      	str	r1, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d0bc      	beq.n	800472e <ai_platform_network_create+0x1aa>
 80047b4:	e7fe      	b.n	80047b4 <ai_platform_network_create+0x230>
 80047b6:	2202      	movs	r2, #2
 80047b8:	e743      	b.n	8004642 <ai_platform_network_create+0xbe>
 80047ba:	4b17      	ldr	r3, [pc, #92]	; (8004818 <ai_platform_network_create+0x294>)
 80047bc:	2201      	movs	r2, #1
 80047be:	4619      	mov	r1, r3
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	680b      	ldr	r3, [r1, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1fc      	bne.n	80047c2 <ai_platform_network_create+0x23e>
 80047c8:	4b14      	ldr	r3, [pc, #80]	; (800481c <ai_platform_network_create+0x298>)
 80047ca:	4911      	ldr	r1, [pc, #68]	; (8004810 <ai_platform_network_create+0x28c>)
 80047cc:	4a11      	ldr	r2, [pc, #68]	; (8004814 <ai_platform_network_create+0x290>)
 80047ce:	6019      	str	r1, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d0ab      	beq.n	800472e <ai_platform_network_create+0x1aa>
 80047d6:	e7fe      	b.n	80047d6 <ai_platform_network_create+0x252>
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <ai_platform_network_create+0x284>)
 80047da:	2201      	movs	r2, #1
 80047dc:	4619      	mov	r1, r3
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	680b      	ldr	r3, [r1, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1fc      	bne.n	80047e0 <ai_platform_network_create+0x25c>
 80047e6:	4b09      	ldr	r3, [pc, #36]	; (800480c <ai_platform_network_create+0x288>)
 80047e8:	4909      	ldr	r1, [pc, #36]	; (8004810 <ai_platform_network_create+0x28c>)
 80047ea:	4a0a      	ldr	r2, [pc, #40]	; (8004814 <ai_platform_network_create+0x290>)
 80047ec:	6019      	str	r1, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d09c      	beq.n	800472e <ai_platform_network_create+0x1aa>
 80047f4:	e7fe      	b.n	80047f4 <ai_platform_network_create+0x270>
 80047f6:	bf00      	nop
 80047f8:	e0042000 	.word	0xe0042000
 80047fc:	5c001000 	.word	0x5c001000
 8004800:	e0002000 	.word	0xe0002000
 8004804:	a1c00100 	.word	0xa1c00100
 8004808:	40023008 	.word	0x40023008
 800480c:	40023000 	.word	0x40023000
 8004810:	f407a5c2 	.word	0xf407a5c2
 8004814:	b5e8b5cd 	.word	0xb5e8b5cd
 8004818:	58024c08 	.word	0x58024c08
 800481c:	58024c00 	.word	0x58024c00
 8004820:	84048403 	.word	0x84048403

08004824 <ai_platform_network_init>:
 8004824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004828:	2800      	cmp	r0, #0
 800482a:	f000 8092 	beq.w	8004952 <ai_platform_network_init+0x12e>
 800482e:	4ba8      	ldr	r3, [pc, #672]	; (8004ad0 <ai_platform_network_init+0x2ac>)
 8004830:	4604      	mov	r4, r0
 8004832:	6802      	ldr	r2, [r0, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	f040 808c 	bne.w	8004952 <ai_platform_network_init+0x12e>
 800483a:	4aa6      	ldr	r2, [pc, #664]	; (8004ad4 <ai_platform_network_init+0x2b0>)
 800483c:	460d      	mov	r5, r1
 800483e:	6813      	ldr	r3, [r2, #0]
 8004840:	f023 0301 	bic.w	r3, r3, #1
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	f7ff fe2d 	bl	80044a4 <_ai_platform_acquire_crc>
 800484a:	4ba3      	ldr	r3, [pc, #652]	; (8004ad8 <ai_platform_network_init+0x2b4>)
 800484c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004856:	189a      	adds	r2, r3, r2
 8004858:	2a01      	cmp	r2, #1
 800485a:	d96b      	bls.n	8004934 <ai_platform_network_init+0x110>
 800485c:	f240 4249 	movw	r2, #1097	; 0x449
 8004860:	4293      	cmp	r3, r2
 8004862:	d067      	beq.n	8004934 <ai_platform_network_init+0x110>
 8004864:	4a9d      	ldr	r2, [pc, #628]	; (8004adc <ai_platform_network_init+0x2b8>)
 8004866:	6813      	ldr	r3, [r2, #0]
 8004868:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800486c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004870:	f000 80e2 	beq.w	8004a38 <ai_platform_network_init+0x214>
 8004874:	6813      	ldr	r3, [r2, #0]
 8004876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800487a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800487e:	f000 80cb 	beq.w	8004a18 <ai_platform_network_init+0x1f4>
 8004882:	f7ff fe11 	bl	80044a8 <_ai_platform_release_crc>
 8004886:	2d00      	cmp	r5, #0
 8004888:	f000 80be 	beq.w	8004a08 <ai_platform_network_init+0x1e4>
 800488c:	4b94      	ldr	r3, [pc, #592]	; (8004ae0 <ai_platform_network_init+0x2bc>)
 800488e:	682a      	ldr	r2, [r5, #0]
 8004890:	692f      	ldr	r7, [r5, #16]
 8004892:	429a      	cmp	r2, r3
 8004894:	f000 810c 	beq.w	8004ab0 <ai_platform_network_init+0x28c>
 8004898:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800489a:	46a9      	mov	r9, r5
 800489c:	f105 0118 	add.w	r1, r5, #24
 80048a0:	2e00      	cmp	r6, #0
 80048a2:	f000 80f3 	beq.w	8004a8c <ai_platform_network_init+0x268>
 80048a6:	2f00      	cmp	r7, #0
 80048a8:	f000 80de 	beq.w	8004a68 <ai_platform_network_init+0x244>
 80048ac:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 80048b0:	f1b8 0f01 	cmp.w	r8, #1
 80048b4:	f040 80d0 	bne.w	8004a58 <ai_platform_network_init+0x234>
 80048b8:	f04f 0c00 	mov.w	ip, #0
 80048bc:	460f      	mov	r7, r1
 80048be:	f8a4 c01c 	strh.w	ip, [r4, #28]
 80048c2:	f04f 0e00 	mov.w	lr, #0
 80048c6:	46f2      	mov	sl, lr
 80048c8:	6a25      	ldr	r5, [r4, #32]
 80048ca:	eb09 060e 	add.w	r6, r9, lr
 80048ce:	f10a 0a01 	add.w	sl, sl, #1
 80048d2:	4475      	add	r5, lr
 80048d4:	f10e 0e18 	add.w	lr, lr, #24
 80048d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80048da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048dc:	e896 0003 	ldmia.w	r6, {r0, r1}
 80048e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80048e4:	8be3      	ldrh	r3, [r4, #30]
 80048e6:	459a      	cmp	sl, r3
 80048e8:	d3ee      	bcc.n	80048c8 <ai_platform_network_init+0xa4>
 80048ea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80048ec:	4598      	cmp	r8, r3
 80048ee:	f040 8083 	bne.w	80049f8 <ai_platform_network_init+0x1d4>
 80048f2:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
 80048f6:	f1b8 0f00 	cmp.w	r8, #0
 80048fa:	d013      	beq.n	8004924 <ai_platform_network_init+0x100>
 80048fc:	f04f 0c00 	mov.w	ip, #0
 8004900:	46e6      	mov	lr, ip
 8004902:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004904:	eb07 060c 	add.w	r6, r7, ip
 8004908:	f10e 0e01 	add.w	lr, lr, #1
 800490c:	4465      	add	r5, ip
 800490e:	f10c 0c18 	add.w	ip, ip, #24
 8004912:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004916:	e896 0003 	ldmia.w	r6, {r0, r1}
 800491a:	e885 0003 	stmia.w	r5, {r0, r1}
 800491e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004920:	459e      	cmp	lr, r3
 8004922:	d3ee      	bcc.n	8004902 <ai_platform_network_init+0xde>
 8004924:	2303      	movs	r3, #3
 8004926:	4620      	mov	r0, r4
 8004928:	60e3      	str	r3, [r4, #12]
 800492a:	f001 faf3 	bl	8005f14 <ai_layers_init_all>
 800492e:	4620      	mov	r0, r4
 8004930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004934:	4b6b      	ldr	r3, [pc, #428]	; (8004ae4 <ai_platform_network_init+0x2c0>)
 8004936:	2201      	movs	r2, #1
 8004938:	4619      	mov	r1, r3
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	680b      	ldr	r3, [r1, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1fc      	bne.n	800493c <ai_platform_network_init+0x118>
 8004942:	4b69      	ldr	r3, [pc, #420]	; (8004ae8 <ai_platform_network_init+0x2c4>)
 8004944:	4969      	ldr	r1, [pc, #420]	; (8004aec <ai_platform_network_init+0x2c8>)
 8004946:	4a6a      	ldr	r2, [pc, #424]	; (8004af0 <ai_platform_network_init+0x2cc>)
 8004948:	6019      	str	r1, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4293      	cmp	r3, r2
 800494e:	d098      	beq.n	8004882 <ai_platform_network_init+0x5e>
 8004950:	e7fe      	b.n	8004950 <ai_platform_network_init+0x12c>
 8004952:	4a60      	ldr	r2, [pc, #384]	; (8004ad4 <ai_platform_network_init+0x2b0>)
 8004954:	6813      	ldr	r3, [r2, #0]
 8004956:	f023 0301 	bic.w	r3, r3, #1
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	f7ff fda2 	bl	80044a4 <_ai_platform_acquire_crc>
 8004960:	4b5d      	ldr	r3, [pc, #372]	; (8004ad8 <ai_platform_network_init+0x2b4>)
 8004962:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800496c:	185a      	adds	r2, r3, r1
 800496e:	2a01      	cmp	r2, #1
 8004970:	d915      	bls.n	800499e <ai_platform_network_init+0x17a>
 8004972:	f240 4249 	movw	r2, #1097	; 0x449
 8004976:	4293      	cmp	r3, r2
 8004978:	d011      	beq.n	800499e <ai_platform_network_init+0x17a>
 800497a:	4a58      	ldr	r2, [pc, #352]	; (8004adc <ai_platform_network_init+0x2b8>)
 800497c:	6813      	ldr	r3, [r2, #0]
 800497e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004982:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004986:	d028      	beq.n	80049da <ai_platform_network_init+0x1b6>
 8004988:	6813      	ldr	r3, [r2, #0]
 800498a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800498e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8004992:	d013      	beq.n	80049bc <ai_platform_network_init+0x198>
 8004994:	f7ff fd88 	bl	80044a8 <_ai_platform_release_crc>
 8004998:	2000      	movs	r0, #0
 800499a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499e:	4b51      	ldr	r3, [pc, #324]	; (8004ae4 <ai_platform_network_init+0x2c0>)
 80049a0:	2201      	movs	r2, #1
 80049a2:	4619      	mov	r1, r3
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	680b      	ldr	r3, [r1, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1fc      	bne.n	80049a6 <ai_platform_network_init+0x182>
 80049ac:	4b4e      	ldr	r3, [pc, #312]	; (8004ae8 <ai_platform_network_init+0x2c4>)
 80049ae:	494f      	ldr	r1, [pc, #316]	; (8004aec <ai_platform_network_init+0x2c8>)
 80049b0:	4a4f      	ldr	r2, [pc, #316]	; (8004af0 <ai_platform_network_init+0x2cc>)
 80049b2:	6019      	str	r1, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d0ec      	beq.n	8004994 <ai_platform_network_init+0x170>
 80049ba:	e7fe      	b.n	80049ba <ai_platform_network_init+0x196>
 80049bc:	4b49      	ldr	r3, [pc, #292]	; (8004ae4 <ai_platform_network_init+0x2c0>)
 80049be:	2201      	movs	r2, #1
 80049c0:	4619      	mov	r1, r3
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	680b      	ldr	r3, [r1, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1fc      	bne.n	80049c4 <ai_platform_network_init+0x1a0>
 80049ca:	4b47      	ldr	r3, [pc, #284]	; (8004ae8 <ai_platform_network_init+0x2c4>)
 80049cc:	4947      	ldr	r1, [pc, #284]	; (8004aec <ai_platform_network_init+0x2c8>)
 80049ce:	4a48      	ldr	r2, [pc, #288]	; (8004af0 <ai_platform_network_init+0x2cc>)
 80049d0:	6019      	str	r1, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d0dd      	beq.n	8004994 <ai_platform_network_init+0x170>
 80049d8:	e7fe      	b.n	80049d8 <ai_platform_network_init+0x1b4>
 80049da:	4b46      	ldr	r3, [pc, #280]	; (8004af4 <ai_platform_network_init+0x2d0>)
 80049dc:	2201      	movs	r2, #1
 80049de:	4619      	mov	r1, r3
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	680b      	ldr	r3, [r1, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1fc      	bne.n	80049e2 <ai_platform_network_init+0x1be>
 80049e8:	4b43      	ldr	r3, [pc, #268]	; (8004af8 <ai_platform_network_init+0x2d4>)
 80049ea:	4940      	ldr	r1, [pc, #256]	; (8004aec <ai_platform_network_init+0x2c8>)
 80049ec:	4a40      	ldr	r2, [pc, #256]	; (8004af0 <ai_platform_network_init+0x2cc>)
 80049ee:	6019      	str	r1, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d0ce      	beq.n	8004994 <ai_platform_network_init+0x170>
 80049f6:	e7fe      	b.n	80049f6 <ai_platform_network_init+0x1d2>
 80049f8:	f104 0010 	add.w	r0, r4, #16
 80049fc:	2213      	movs	r2, #19
 80049fe:	2116      	movs	r1, #22
 8004a00:	f000 fc28 	bl	8005254 <core_set_error>
 8004a04:	2000      	movs	r0, #0
 8004a06:	e793      	b.n	8004930 <ai_platform_network_init+0x10c>
 8004a08:	f104 0010 	add.w	r0, r4, #16
 8004a0c:	2211      	movs	r2, #17
 8004a0e:	2110      	movs	r1, #16
 8004a10:	f000 fc20 	bl	8005254 <core_set_error>
 8004a14:	4628      	mov	r0, r5
 8004a16:	e78b      	b.n	8004930 <ai_platform_network_init+0x10c>
 8004a18:	4b32      	ldr	r3, [pc, #200]	; (8004ae4 <ai_platform_network_init+0x2c0>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	680b      	ldr	r3, [r1, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1fc      	bne.n	8004a20 <ai_platform_network_init+0x1fc>
 8004a26:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <ai_platform_network_init+0x2c4>)
 8004a28:	4930      	ldr	r1, [pc, #192]	; (8004aec <ai_platform_network_init+0x2c8>)
 8004a2a:	4a31      	ldr	r2, [pc, #196]	; (8004af0 <ai_platform_network_init+0x2cc>)
 8004a2c:	6019      	str	r1, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4293      	cmp	r3, r2
 8004a32:	f43f af26 	beq.w	8004882 <ai_platform_network_init+0x5e>
 8004a36:	e7fe      	b.n	8004a36 <ai_platform_network_init+0x212>
 8004a38:	4b2e      	ldr	r3, [pc, #184]	; (8004af4 <ai_platform_network_init+0x2d0>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	680b      	ldr	r3, [r1, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1fc      	bne.n	8004a40 <ai_platform_network_init+0x21c>
 8004a46:	4b2c      	ldr	r3, [pc, #176]	; (8004af8 <ai_platform_network_init+0x2d4>)
 8004a48:	4928      	ldr	r1, [pc, #160]	; (8004aec <ai_platform_network_init+0x2c8>)
 8004a4a:	4a29      	ldr	r2, [pc, #164]	; (8004af0 <ai_platform_network_init+0x2cc>)
 8004a4c:	6019      	str	r1, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4293      	cmp	r3, r2
 8004a52:	f43f af16 	beq.w	8004882 <ai_platform_network_init+0x5e>
 8004a56:	e7fe      	b.n	8004a56 <ai_platform_network_init+0x232>
 8004a58:	f104 0010 	add.w	r0, r4, #16
 8004a5c:	2212      	movs	r2, #18
 8004a5e:	2116      	movs	r1, #22
 8004a60:	f000 fbf8 	bl	8005254 <core_set_error>
 8004a64:	2000      	movs	r0, #0
 8004a66:	e763      	b.n	8004930 <ai_platform_network_init+0x10c>
 8004a68:	8928      	ldrh	r0, [r5, #8]
 8004a6a:	88ea      	ldrh	r2, [r5, #6]
 8004a6c:	68eb      	ldr	r3, [r5, #12]
 8004a6e:	fb02 f200 	mul.w	r2, r2, r0
 8004a72:	fb03 f302 	mul.w	r3, r3, r2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f43f af18 	beq.w	80048ac <ai_platform_network_init+0x88>
 8004a7c:	f104 0010 	add.w	r0, r4, #16
 8004a80:	2212      	movs	r2, #18
 8004a82:	2110      	movs	r1, #16
 8004a84:	f000 fbe6 	bl	8005254 <core_set_error>
 8004a88:	4638      	mov	r0, r7
 8004a8a:	e751      	b.n	8004930 <ai_platform_network_init+0x10c>
 8004a8c:	8c28      	ldrh	r0, [r5, #32]
 8004a8e:	8bea      	ldrh	r2, [r5, #30]
 8004a90:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004a92:	fb02 f200 	mul.w	r2, r2, r0
 8004a96:	fb03 f302 	mul.w	r3, r3, r2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f43f af03 	beq.w	80048a6 <ai_platform_network_init+0x82>
 8004aa0:	f104 0010 	add.w	r0, r4, #16
 8004aa4:	2213      	movs	r2, #19
 8004aa6:	2110      	movs	r1, #16
 8004aa8:	f000 fbd4 	bl	8005254 <core_set_error>
 8004aac:	4630      	mov	r0, r6
 8004aae:	e73f      	b.n	8004930 <ai_platform_network_init+0x10c>
 8004ab0:	8be1      	ldrh	r1, [r4, #30]
 8004ab2:	88eb      	ldrh	r3, [r5, #6]
 8004ab4:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 8004ab8:	428b      	cmp	r3, r1
 8004aba:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 8004abe:	88aa      	ldrh	r2, [r5, #4]
 8004ac0:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8004ac4:	d1c8      	bne.n	8004a58 <ai_platform_network_init+0x234>
 8004ac6:	83a2      	strh	r2, [r4, #28]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f47f aefa 	bne.w	80048c2 <ai_platform_network_init+0x9e>
 8004ace:	e70c      	b.n	80048ea <ai_platform_network_init+0xc6>
 8004ad0:	a1c00100 	.word	0xa1c00100
 8004ad4:	e0002000 	.word	0xe0002000
 8004ad8:	e0042000 	.word	0xe0042000
 8004adc:	5c001000 	.word	0x5c001000
 8004ae0:	a1facade 	.word	0xa1facade
 8004ae4:	40023008 	.word	0x40023008
 8004ae8:	40023000 	.word	0x40023000
 8004aec:	f407a5c2 	.word	0xf407a5c2
 8004af0:	b5e8b5cd 	.word	0xb5e8b5cd
 8004af4:	58024c08 	.word	0x58024c08
 8004af8:	58024c00 	.word	0x58024c00

08004afc <ai_platform_network_post_init>:
 8004afc:	b538      	push	{r3, r4, r5, lr}
 8004afe:	b120      	cbz	r0, 8004b0a <ai_platform_network_post_init+0xe>
 8004b00:	4b65      	ldr	r3, [pc, #404]	; (8004c98 <ai_platform_network_post_init+0x19c>)
 8004b02:	4604      	mov	r4, r0
 8004b04:	6802      	ldr	r2, [r0, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d033      	beq.n	8004b72 <ai_platform_network_post_init+0x76>
 8004b0a:	4a64      	ldr	r2, [pc, #400]	; (8004c9c <ai_platform_network_post_init+0x1a0>)
 8004b0c:	6813      	ldr	r3, [r2, #0]
 8004b0e:	f023 0301 	bic.w	r3, r3, #1
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	f7ff fcc6 	bl	80044a4 <_ai_platform_acquire_crc>
 8004b18:	4b61      	ldr	r3, [pc, #388]	; (8004ca0 <ai_platform_network_post_init+0x1a4>)
 8004b1a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b24:	185a      	adds	r2, r3, r1
 8004b26:	2a01      	cmp	r2, #1
 8004b28:	d914      	bls.n	8004b54 <ai_platform_network_post_init+0x58>
 8004b2a:	f240 4249 	movw	r2, #1097	; 0x449
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d010      	beq.n	8004b54 <ai_platform_network_post_init+0x58>
 8004b32:	4a5c      	ldr	r2, [pc, #368]	; (8004ca4 <ai_platform_network_post_init+0x1a8>)
 8004b34:	6813      	ldr	r3, [r2, #0]
 8004b36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b3a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004b3e:	d067      	beq.n	8004c10 <ai_platform_network_post_init+0x114>
 8004b40:	6813      	ldr	r3, [r2, #0]
 8004b42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b46:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8004b4a:	d052      	beq.n	8004bf2 <ai_platform_network_post_init+0xf6>
 8004b4c:	f7ff fcac 	bl	80044a8 <_ai_platform_release_crc>
 8004b50:	2000      	movs	r0, #0
 8004b52:	bd38      	pop	{r3, r4, r5, pc}
 8004b54:	4b54      	ldr	r3, [pc, #336]	; (8004ca8 <ai_platform_network_post_init+0x1ac>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	4619      	mov	r1, r3
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	680b      	ldr	r3, [r1, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1fc      	bne.n	8004b5c <ai_platform_network_post_init+0x60>
 8004b62:	4b52      	ldr	r3, [pc, #328]	; (8004cac <ai_platform_network_post_init+0x1b0>)
 8004b64:	4952      	ldr	r1, [pc, #328]	; (8004cb0 <ai_platform_network_post_init+0x1b4>)
 8004b66:	4a53      	ldr	r2, [pc, #332]	; (8004cb4 <ai_platform_network_post_init+0x1b8>)
 8004b68:	6019      	str	r1, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d0ed      	beq.n	8004b4c <ai_platform_network_post_init+0x50>
 8004b70:	e7fe      	b.n	8004b70 <ai_platform_network_post_init+0x74>
 8004b72:	4a4a      	ldr	r2, [pc, #296]	; (8004c9c <ai_platform_network_post_init+0x1a0>)
 8004b74:	6813      	ldr	r3, [r2, #0]
 8004b76:	f023 0301 	bic.w	r3, r3, #1
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	f7ff fc92 	bl	80044a4 <_ai_platform_acquire_crc>
 8004b80:	4b47      	ldr	r3, [pc, #284]	; (8004ca0 <ai_platform_network_post_init+0x1a4>)
 8004b82:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b8c:	189a      	adds	r2, r3, r2
 8004b8e:	2a01      	cmp	r2, #1
 8004b90:	d973      	bls.n	8004c7a <ai_platform_network_post_init+0x17e>
 8004b92:	f240 4249 	movw	r2, #1097	; 0x449
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d06f      	beq.n	8004c7a <ai_platform_network_post_init+0x17e>
 8004b9a:	4a42      	ldr	r2, [pc, #264]	; (8004ca4 <ai_platform_network_post_init+0x1a8>)
 8004b9c:	6813      	ldr	r3, [r2, #0]
 8004b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ba2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004ba6:	d059      	beq.n	8004c5c <ai_platform_network_post_init+0x160>
 8004ba8:	6813      	ldr	r3, [r2, #0]
 8004baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bae:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8004bb2:	d044      	beq.n	8004c3e <ai_platform_network_post_init+0x142>
 8004bb4:	f7ff fc78 	bl	80044a8 <_ai_platform_release_crc>
 8004bb8:	68e3      	ldr	r3, [r4, #12]
 8004bba:	f013 0502 	ands.w	r5, r3, #2
 8004bbe:	d036      	beq.n	8004c2e <ai_platform_network_post_init+0x132>
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	f001 f9bb 	bl	8005f3c <ai_layers_post_init_all>
 8004bc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004bc8:	b18b      	cbz	r3, 8004bee <ai_platform_network_post_init+0xf2>
 8004bca:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004bcc:	b90d      	cbnz	r5, 8004bd2 <ai_platform_network_post_init+0xd6>
 8004bce:	e00e      	b.n	8004bee <ai_platform_network_post_init+0xf2>
 8004bd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004bd2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	4798      	blx	r3
 8004bda:	692a      	ldr	r2, [r5, #16]
 8004bdc:	1b53      	subs	r3, r2, r5
 8004bde:	4615      	mov	r5, r2
 8004be0:	bf18      	it	ne
 8004be2:	2301      	movne	r3, #1
 8004be4:	2a00      	cmp	r2, #0
 8004be6:	bf08      	it	eq
 8004be8:	2300      	moveq	r3, #0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <ai_platform_network_post_init+0xd4>
 8004bee:	2001      	movs	r0, #1
 8004bf0:	bd38      	pop	{r3, r4, r5, pc}
 8004bf2:	4b2d      	ldr	r3, [pc, #180]	; (8004ca8 <ai_platform_network_post_init+0x1ac>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	680b      	ldr	r3, [r1, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1fc      	bne.n	8004bfa <ai_platform_network_post_init+0xfe>
 8004c00:	4b2a      	ldr	r3, [pc, #168]	; (8004cac <ai_platform_network_post_init+0x1b0>)
 8004c02:	492b      	ldr	r1, [pc, #172]	; (8004cb0 <ai_platform_network_post_init+0x1b4>)
 8004c04:	4a2b      	ldr	r2, [pc, #172]	; (8004cb4 <ai_platform_network_post_init+0x1b8>)
 8004c06:	6019      	str	r1, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d09e      	beq.n	8004b4c <ai_platform_network_post_init+0x50>
 8004c0e:	e7fe      	b.n	8004c0e <ai_platform_network_post_init+0x112>
 8004c10:	4b29      	ldr	r3, [pc, #164]	; (8004cb8 <ai_platform_network_post_init+0x1bc>)
 8004c12:	2201      	movs	r2, #1
 8004c14:	4619      	mov	r1, r3
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	680b      	ldr	r3, [r1, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1fc      	bne.n	8004c18 <ai_platform_network_post_init+0x11c>
 8004c1e:	4b27      	ldr	r3, [pc, #156]	; (8004cbc <ai_platform_network_post_init+0x1c0>)
 8004c20:	4923      	ldr	r1, [pc, #140]	; (8004cb0 <ai_platform_network_post_init+0x1b4>)
 8004c22:	4a24      	ldr	r2, [pc, #144]	; (8004cb4 <ai_platform_network_post_init+0x1b8>)
 8004c24:	6019      	str	r1, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d08f      	beq.n	8004b4c <ai_platform_network_post_init+0x50>
 8004c2c:	e7fe      	b.n	8004c2c <ai_platform_network_post_init+0x130>
 8004c2e:	f104 0010 	add.w	r0, r4, #16
 8004c32:	2210      	movs	r2, #16
 8004c34:	2111      	movs	r1, #17
 8004c36:	f000 fb0d 	bl	8005254 <core_set_error>
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	bd38      	pop	{r3, r4, r5, pc}
 8004c3e:	4b1a      	ldr	r3, [pc, #104]	; (8004ca8 <ai_platform_network_post_init+0x1ac>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	4619      	mov	r1, r3
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	680b      	ldr	r3, [r1, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1fc      	bne.n	8004c46 <ai_platform_network_post_init+0x14a>
 8004c4c:	4b17      	ldr	r3, [pc, #92]	; (8004cac <ai_platform_network_post_init+0x1b0>)
 8004c4e:	4918      	ldr	r1, [pc, #96]	; (8004cb0 <ai_platform_network_post_init+0x1b4>)
 8004c50:	4a18      	ldr	r2, [pc, #96]	; (8004cb4 <ai_platform_network_post_init+0x1b8>)
 8004c52:	6019      	str	r1, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d0ac      	beq.n	8004bb4 <ai_platform_network_post_init+0xb8>
 8004c5a:	e7fe      	b.n	8004c5a <ai_platform_network_post_init+0x15e>
 8004c5c:	4b16      	ldr	r3, [pc, #88]	; (8004cb8 <ai_platform_network_post_init+0x1bc>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	4619      	mov	r1, r3
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	680b      	ldr	r3, [r1, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1fc      	bne.n	8004c64 <ai_platform_network_post_init+0x168>
 8004c6a:	4b14      	ldr	r3, [pc, #80]	; (8004cbc <ai_platform_network_post_init+0x1c0>)
 8004c6c:	4910      	ldr	r1, [pc, #64]	; (8004cb0 <ai_platform_network_post_init+0x1b4>)
 8004c6e:	4a11      	ldr	r2, [pc, #68]	; (8004cb4 <ai_platform_network_post_init+0x1b8>)
 8004c70:	6019      	str	r1, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d09d      	beq.n	8004bb4 <ai_platform_network_post_init+0xb8>
 8004c78:	e7fe      	b.n	8004c78 <ai_platform_network_post_init+0x17c>
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <ai_platform_network_post_init+0x1ac>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	4619      	mov	r1, r3
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	680b      	ldr	r3, [r1, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1fc      	bne.n	8004c82 <ai_platform_network_post_init+0x186>
 8004c88:	4b08      	ldr	r3, [pc, #32]	; (8004cac <ai_platform_network_post_init+0x1b0>)
 8004c8a:	4909      	ldr	r1, [pc, #36]	; (8004cb0 <ai_platform_network_post_init+0x1b4>)
 8004c8c:	4a09      	ldr	r2, [pc, #36]	; (8004cb4 <ai_platform_network_post_init+0x1b8>)
 8004c8e:	6019      	str	r1, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d08e      	beq.n	8004bb4 <ai_platform_network_post_init+0xb8>
 8004c96:	e7fe      	b.n	8004c96 <ai_platform_network_post_init+0x19a>
 8004c98:	a1c00100 	.word	0xa1c00100
 8004c9c:	e0002000 	.word	0xe0002000
 8004ca0:	e0042000 	.word	0xe0042000
 8004ca4:	5c001000 	.word	0x5c001000
 8004ca8:	40023008 	.word	0x40023008
 8004cac:	40023000 	.word	0x40023000
 8004cb0:	f407a5c2 	.word	0xf407a5c2
 8004cb4:	b5e8b5cd 	.word	0xb5e8b5cd
 8004cb8:	58024c08 	.word	0x58024c08
 8004cbc:	58024c00 	.word	0x58024c00

08004cc0 <ai_platform_network_process>:
 8004cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc4:	460d      	mov	r5, r1
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	4617      	mov	r7, r2
 8004cca:	4604      	mov	r4, r0
 8004ccc:	b120      	cbz	r0, 8004cd8 <ai_platform_network_process+0x18>
 8004cce:	4b88      	ldr	r3, [pc, #544]	; (8004ef0 <ai_platform_network_process+0x230>)
 8004cd0:	6802      	ldr	r2, [r0, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	bf18      	it	ne
 8004cd6:	2400      	movne	r4, #0
 8004cd8:	4a86      	ldr	r2, [pc, #536]	; (8004ef4 <ai_platform_network_process+0x234>)
 8004cda:	6813      	ldr	r3, [r2, #0]
 8004cdc:	f023 0301 	bic.w	r3, r3, #1
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	f7ff fbdf 	bl	80044a4 <_ai_platform_acquire_crc>
 8004ce6:	4b84      	ldr	r3, [pc, #528]	; (8004ef8 <ai_platform_network_process+0x238>)
 8004ce8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cf2:	185a      	adds	r2, r3, r1
 8004cf4:	2a01      	cmp	r2, #1
 8004cf6:	f240 80c2 	bls.w	8004e7e <ai_platform_network_process+0x1be>
 8004cfa:	f240 4249 	movw	r2, #1097	; 0x449
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	f000 80bd 	beq.w	8004e7e <ai_platform_network_process+0x1be>
 8004d04:	4a7d      	ldr	r2, [pc, #500]	; (8004efc <ai_platform_network_process+0x23c>)
 8004d06:	6813      	ldr	r3, [r2, #0]
 8004d08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d0c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004d10:	f000 80d5 	beq.w	8004ebe <ai_platform_network_process+0x1fe>
 8004d14:	6813      	ldr	r3, [r2, #0]
 8004d16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d1a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8004d1e:	f000 827f 	beq.w	8005220 <ai_platform_network_process+0x560>
 8004d22:	f7ff fbc1 	bl	80044a8 <_ai_platform_release_crc>
 8004d26:	2c00      	cmp	r4, #0
 8004d28:	f000 8277 	beq.w	800521a <ai_platform_network_process+0x55a>
 8004d2c:	68e2      	ldr	r2, [r4, #12]
 8004d2e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8004d30:	f002 0203 	and.w	r2, r2, #3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80b2 	beq.w	8004e9e <ai_platform_network_process+0x1de>
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	2a03      	cmp	r2, #3
 8004d3e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8004d42:	6161      	str	r1, [r4, #20]
 8004d44:	f040 8263 	bne.w	800520e <ai_platform_network_process+0x54e>
 8004d48:	2d00      	cmp	r5, #0
 8004d4a:	f000 80ac 	beq.w	8004ea6 <ai_platform_network_process+0x1e6>
 8004d4e:	faba f28a 	clz	r2, sl
 8004d52:	0952      	lsrs	r2, r2, #5
 8004d54:	2a00      	cmp	r2, #0
 8004d56:	f040 80a6 	bne.w	8004ea6 <ai_platform_network_process+0x1e6>
 8004d5a:	f8ba 1000 	ldrh.w	r1, [sl]
 8004d5e:	2900      	cmp	r1, #0
 8004d60:	f000 80a1 	beq.w	8004ea6 <ai_platform_network_process+0x1e6>
 8004d64:	88a8      	ldrh	r0, [r5, #4]
 8004d66:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004d6a:	9001      	str	r0, [sp, #4]
 8004d6c:	2900      	cmp	r1, #0
 8004d6e:	f000 80d4 	beq.w	8004f1a <ai_platform_network_process+0x25a>
 8004d72:	680e      	ldr	r6, [r1, #0]
 8004d74:	2e00      	cmp	r6, #0
 8004d76:	f000 80d0 	beq.w	8004f1a <ai_platform_network_process+0x25a>
 8004d7a:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004d7e:	4690      	mov	r8, r2
 8004d80:	f8d3 9000 	ldr.w	r9, [r3]
 8004d84:	f1b9 0f00 	cmp.w	r9, #0
 8004d88:	d162      	bne.n	8004e50 <ai_platform_network_process+0x190>
 8004d8a:	e08c      	b.n	8004ea6 <ai_platform_network_process+0x1e6>
 8004d8c:	68f3      	ldr	r3, [r6, #12]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	455a      	cmp	r2, fp
 8004d92:	d16b      	bne.n	8004e6c <ai_platform_network_process+0x1ac>
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	4572      	cmp	r2, lr
 8004d98:	d168      	bne.n	8004e6c <ai_platform_network_process+0x1ac>
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	459c      	cmp	ip, r3
 8004d9e:	d165      	bne.n	8004e6c <ai_platform_network_process+0x1ac>
 8004da0:	6800      	ldr	r0, [r0, #0]
 8004da2:	f001 f985 	bl	80060b0 <ai_array_get_byte_size>
 8004da6:	68f2      	ldr	r2, [r6, #12]
 8004da8:	6973      	ldr	r3, [r6, #20]
 8004daa:	68d2      	ldr	r2, [r2, #12]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	fb03 f302 	mul.w	r3, r3, r2
 8004db2:	4298      	cmp	r0, r3
 8004db4:	d35a      	bcc.n	8004e6c <ai_platform_network_process+0x1ac>
 8004db6:	69b3      	ldr	r3, [r6, #24]
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	f001 f921 	bl	8006000 <ai_array_to_buffer_fmt>
 8004dbe:	682b      	ldr	r3, [r5, #0]
 8004dc0:	4043      	eors	r3, r0
 8004dc2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8004dc6:	f040 8219 	bne.w	80051fc <ai_platform_network_process+0x53c>
 8004dca:	692b      	ldr	r3, [r5, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 820d 	beq.w	80051ec <ai_platform_network_process+0x52c>
 8004dd2:	88ab      	ldrh	r3, [r5, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8082 	beq.w	8004ede <ai_platform_network_process+0x21e>
 8004dda:	9a01      	ldr	r2, [sp, #4]
 8004ddc:	68f1      	ldr	r1, [r6, #12]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	68c9      	ldr	r1, [r1, #12]
 8004de2:	bf38      	it	cc
 8004de4:	461a      	movcc	r2, r3
 8004de6:	9201      	str	r2, [sp, #4]
 8004de8:	6972      	ldr	r2, [r6, #20]
 8004dea:	68d3      	ldr	r3, [r2, #12]
 8004dec:	fb03 f301 	mul.w	r3, r3, r1
 8004df0:	f8c9 3008 	str.w	r3, [r9, #8]
 8004df4:	88aa      	ldrh	r2, [r5, #4]
 8004df6:	fb03 f302 	mul.w	r3, r3, r2
 8004dfa:	f8c9 300c 	str.w	r3, [r9, #12]
 8004dfe:	6929      	ldr	r1, [r5, #16]
 8004e00:	f8c9 1004 	str.w	r1, [r9, #4]
 8004e04:	692a      	ldr	r2, [r5, #16]
 8004e06:	4413      	add	r3, r2
 8004e08:	f8c9 3000 	str.w	r3, [r9]
 8004e0c:	69b0      	ldr	r0, [r6, #24]
 8004e0e:	6803      	ldr	r3, [r0, #0]
 8004e10:	009a      	lsls	r2, r3, #2
 8004e12:	d408      	bmi.n	8004e26 <ai_platform_network_process+0x166>
 8004e14:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	4419      	add	r1, r3
 8004e1c:	6081      	str	r1, [r0, #8]
 8004e1e:	69b3      	ldr	r3, [r6, #24]
 8004e20:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8004e24:	60da      	str	r2, [r3, #12]
 8004e26:	f108 0801 	add.w	r8, r8, #1
 8004e2a:	f8ba 3000 	ldrh.w	r3, [sl]
 8004e2e:	4598      	cmp	r8, r3
 8004e30:	d272      	bcs.n	8004f18 <ai_platform_network_process+0x258>
 8004e32:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d06e      	beq.n	8004f18 <ai_platform_network_process+0x258>
 8004e3a:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8004e3e:	2e00      	cmp	r6, #0
 8004e40:	d06a      	beq.n	8004f18 <ai_platform_network_process+0x258>
 8004e42:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004e46:	3518      	adds	r5, #24
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 8004e4e:	d02a      	beq.n	8004ea6 <ai_platform_network_process+0x1e6>
 8004e50:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8004e54:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8004e58:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8004e5c:	fb0b f30e 	mul.w	r3, fp, lr
 8004e60:	69b0      	ldr	r0, [r6, #24]
 8004e62:	fb0c f303 	mul.w	r3, ip, r3
 8004e66:	6841      	ldr	r1, [r0, #4]
 8004e68:	4299      	cmp	r1, r3
 8004e6a:	d28f      	bcs.n	8004d8c <ai_platform_network_process+0xcc>
 8004e6c:	f104 0010 	add.w	r0, r4, #16
 8004e70:	2218      	movs	r2, #24
 8004e72:	2112      	movs	r1, #18
 8004e74:	f04f 0b00 	mov.w	fp, #0
 8004e78:	f000 f9ec 	bl	8005254 <core_set_error>
 8004e7c:	e01b      	b.n	8004eb6 <ai_platform_network_process+0x1f6>
 8004e7e:	4b20      	ldr	r3, [pc, #128]	; (8004f00 <ai_platform_network_process+0x240>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	4619      	mov	r1, r3
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	680b      	ldr	r3, [r1, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1fc      	bne.n	8004e86 <ai_platform_network_process+0x1c6>
 8004e8c:	4b1d      	ldr	r3, [pc, #116]	; (8004f04 <ai_platform_network_process+0x244>)
 8004e8e:	491e      	ldr	r1, [pc, #120]	; (8004f08 <ai_platform_network_process+0x248>)
 8004e90:	4a1e      	ldr	r2, [pc, #120]	; (8004f0c <ai_platform_network_process+0x24c>)
 8004e92:	6019      	str	r1, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4293      	cmp	r3, r2
 8004e98:	f43f af43 	beq.w	8004d22 <ai_platform_network_process+0x62>
 8004e9c:	e7fe      	b.n	8004e9c <ai_platform_network_process+0x1dc>
 8004e9e:	2a03      	cmp	r2, #3
 8004ea0:	6163      	str	r3, [r4, #20]
 8004ea2:	f040 81b4 	bne.w	800520e <ai_platform_network_process+0x54e>
 8004ea6:	f04f 0b00 	mov.w	fp, #0
 8004eaa:	f104 0010 	add.w	r0, r4, #16
 8004eae:	2217      	movs	r2, #23
 8004eb0:	2112      	movs	r1, #18
 8004eb2:	f000 f9cf 	bl	8005254 <core_set_error>
 8004eb6:	4658      	mov	r0, fp
 8004eb8:	b003      	add	sp, #12
 8004eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ebe:	4b14      	ldr	r3, [pc, #80]	; (8004f10 <ai_platform_network_process+0x250>)
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	680b      	ldr	r3, [r1, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1fc      	bne.n	8004ec6 <ai_platform_network_process+0x206>
 8004ecc:	4b11      	ldr	r3, [pc, #68]	; (8004f14 <ai_platform_network_process+0x254>)
 8004ece:	490e      	ldr	r1, [pc, #56]	; (8004f08 <ai_platform_network_process+0x248>)
 8004ed0:	4a0e      	ldr	r2, [pc, #56]	; (8004f0c <ai_platform_network_process+0x24c>)
 8004ed2:	6019      	str	r1, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	f43f af23 	beq.w	8004d22 <ai_platform_network_process+0x62>
 8004edc:	e7fe      	b.n	8004edc <ai_platform_network_process+0x21c>
 8004ede:	f104 0010 	add.w	r0, r4, #16
 8004ee2:	2221      	movs	r2, #33	; 0x21
 8004ee4:	2112      	movs	r1, #18
 8004ee6:	469b      	mov	fp, r3
 8004ee8:	f000 f9b4 	bl	8005254 <core_set_error>
 8004eec:	e7e3      	b.n	8004eb6 <ai_platform_network_process+0x1f6>
 8004eee:	bf00      	nop
 8004ef0:	a1c00100 	.word	0xa1c00100
 8004ef4:	e0002000 	.word	0xe0002000
 8004ef8:	e0042000 	.word	0xe0042000
 8004efc:	5c001000 	.word	0x5c001000
 8004f00:	40023008 	.word	0x40023008
 8004f04:	40023000 	.word	0x40023000
 8004f08:	f407a5c2 	.word	0xf407a5c2
 8004f0c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004f10:	58024c08 	.word	0x58024c08
 8004f14:	58024c00 	.word	0x58024c00
 8004f18:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8004f1a:	2f00      	cmp	r7, #0
 8004f1c:	f000 80aa 	beq.w	8005074 <ai_platform_network_process+0x3b4>
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	f240 809c 	bls.w	800505e <ai_platform_network_process+0x39e>
 8004f26:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8004f2a:	f11a 0f0c 	cmn.w	sl, #12
 8004f2e:	f000 8096 	beq.w	800505e <ai_platform_network_process+0x39e>
 8004f32:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 8091 	beq.w	800505e <ai_platform_network_process+0x39e>
 8004f3c:	463d      	mov	r5, r7
 8004f3e:	f04f 0900 	mov.w	r9, #0
 8004f42:	9400      	str	r4, [sp, #0]
 8004f44:	4599      	cmp	r9, r3
 8004f46:	f080 8093 	bcs.w	8005070 <ai_platform_network_process+0x3b0>
 8004f4a:	f8da 3010 	ldr.w	r3, [sl, #16]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 808e 	beq.w	8005070 <ai_platform_network_process+0x3b0>
 8004f54:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 8004f58:	2e00      	cmp	r6, #0
 8004f5a:	f000 8089 	beq.w	8005070 <ai_platform_network_process+0x3b0>
 8004f5e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004f62:	ea4f 1409 	mov.w	r4, r9, lsl #4
 8004f66:	f8d3 8000 	ldr.w	r8, [r3]
 8004f6a:	eb18 0704 	adds.w	r7, r8, r4
 8004f6e:	f000 8134 	beq.w	80051da <ai_platform_network_process+0x51a>
 8004f72:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8004f76:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8004f7a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8004f7e:	fb0b f30e 	mul.w	r3, fp, lr
 8004f82:	69b0      	ldr	r0, [r6, #24]
 8004f84:	fb0c f303 	mul.w	r3, ip, r3
 8004f88:	6841      	ldr	r1, [r0, #4]
 8004f8a:	4299      	cmp	r1, r3
 8004f8c:	d366      	bcc.n	800505c <ai_platform_network_process+0x39c>
 8004f8e:	68f3      	ldr	r3, [r6, #12]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	455a      	cmp	r2, fp
 8004f94:	d162      	bne.n	800505c <ai_platform_network_process+0x39c>
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	4572      	cmp	r2, lr
 8004f9a:	d15f      	bne.n	800505c <ai_platform_network_process+0x39c>
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	459c      	cmp	ip, r3
 8004fa0:	d15c      	bne.n	800505c <ai_platform_network_process+0x39c>
 8004fa2:	6800      	ldr	r0, [r0, #0]
 8004fa4:	f001 f884 	bl	80060b0 <ai_array_get_byte_size>
 8004fa8:	68f2      	ldr	r2, [r6, #12]
 8004faa:	6973      	ldr	r3, [r6, #20]
 8004fac:	68d2      	ldr	r2, [r2, #12]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	fb03 f302 	mul.w	r3, r3, r2
 8004fb4:	4298      	cmp	r0, r3
 8004fb6:	d351      	bcc.n	800505c <ai_platform_network_process+0x39c>
 8004fb8:	69b3      	ldr	r3, [r6, #24]
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	f001 f820 	bl	8006000 <ai_array_to_buffer_fmt>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	4043      	eors	r3, r0
 8004fc4:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8004fc8:	d13e      	bne.n	8005048 <ai_platform_network_process+0x388>
 8004fca:	692b      	ldr	r3, [r5, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d032      	beq.n	8005036 <ai_platform_network_process+0x376>
 8004fd0:	88ab      	ldrh	r3, [r5, #4]
 8004fd2:	b33b      	cbz	r3, 8005024 <ai_platform_network_process+0x364>
 8004fd4:	9a01      	ldr	r2, [sp, #4]
 8004fd6:	68f1      	ldr	r1, [r6, #12]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	68c9      	ldr	r1, [r1, #12]
 8004fdc:	bf38      	it	cc
 8004fde:	461a      	movcc	r2, r3
 8004fe0:	9201      	str	r2, [sp, #4]
 8004fe2:	6972      	ldr	r2, [r6, #20]
 8004fe4:	68d3      	ldr	r3, [r2, #12]
 8004fe6:	fb03 f301 	mul.w	r3, r3, r1
 8004fea:	60bb      	str	r3, [r7, #8]
 8004fec:	88aa      	ldrh	r2, [r5, #4]
 8004fee:	fb03 f302 	mul.w	r3, r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	6929      	ldr	r1, [r5, #16]
 8004ff6:	6079      	str	r1, [r7, #4]
 8004ff8:	692a      	ldr	r2, [r5, #16]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f848 3004 	str.w	r3, [r8, r4]
 8005000:	69b0      	ldr	r0, [r6, #24]
 8005002:	6803      	ldr	r3, [r0, #0]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	d407      	bmi.n	8005018 <ai_platform_network_process+0x358>
 8005008:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800500c:	1a9b      	subs	r3, r3, r2
 800500e:	4419      	add	r1, r3
 8005010:	6081      	str	r1, [r0, #8]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	69b3      	ldr	r3, [r6, #24]
 8005016:	60da      	str	r2, [r3, #12]
 8005018:	f109 0901 	add.w	r9, r9, #1
 800501c:	3518      	adds	r5, #24
 800501e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8005022:	e78f      	b.n	8004f44 <ai_platform_network_process+0x284>
 8005024:	9c00      	ldr	r4, [sp, #0]
 8005026:	2221      	movs	r2, #33	; 0x21
 8005028:	2113      	movs	r1, #19
 800502a:	469b      	mov	fp, r3
 800502c:	f104 0010 	add.w	r0, r4, #16
 8005030:	f000 f910 	bl	8005254 <core_set_error>
 8005034:	e73f      	b.n	8004eb6 <ai_platform_network_process+0x1f6>
 8005036:	9c00      	ldr	r4, [sp, #0]
 8005038:	2217      	movs	r2, #23
 800503a:	2113      	movs	r1, #19
 800503c:	469b      	mov	fp, r3
 800503e:	f104 0010 	add.w	r0, r4, #16
 8005042:	f000 f907 	bl	8005254 <core_set_error>
 8005046:	e736      	b.n	8004eb6 <ai_platform_network_process+0x1f6>
 8005048:	9c00      	ldr	r4, [sp, #0]
 800504a:	2219      	movs	r2, #25
 800504c:	2113      	movs	r1, #19
 800504e:	f04f 0b00 	mov.w	fp, #0
 8005052:	f104 0010 	add.w	r0, r4, #16
 8005056:	f000 f8fd 	bl	8005254 <core_set_error>
 800505a:	e72c      	b.n	8004eb6 <ai_platform_network_process+0x1f6>
 800505c:	9c00      	ldr	r4, [sp, #0]
 800505e:	f104 0010 	add.w	r0, r4, #16
 8005062:	2218      	movs	r2, #24
 8005064:	2113      	movs	r1, #19
 8005066:	f04f 0b00 	mov.w	fp, #0
 800506a:	f000 f8f3 	bl	8005254 <core_set_error>
 800506e:	e722      	b.n	8004eb6 <ai_platform_network_process+0x1f6>
 8005070:	9c00      	ldr	r4, [sp, #0]
 8005072:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8005074:	9a01      	ldr	r2, [sp, #4]
 8005076:	82a2      	strh	r2, [r4, #20]
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80a9 	beq.w	80051d0 <ai_platform_network_process+0x510>
 800507e:	2b01      	cmp	r3, #1
 8005080:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005082:	f240 80a8 	bls.w	80051d6 <ai_platform_network_process+0x516>
 8005086:	f105 060c 	add.w	r6, r5, #12
 800508a:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 800508e:	8aa3      	ldrh	r3, [r4, #20]
 8005090:	455b      	cmp	r3, fp
 8005092:	f67f af10 	bls.w	8004eb6 <ai_platform_network_process+0x1f6>
 8005096:	9400      	str	r4, [sp, #0]
 8005098:	2d00      	cmp	r5, #0
 800509a:	d037      	beq.n	800510c <ai_platform_network_process+0x44c>
 800509c:	882b      	ldrh	r3, [r5, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d034      	beq.n	800510c <ai_platform_network_process+0x44c>
 80050a2:	686b      	ldr	r3, [r5, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d031      	beq.n	800510c <ai_platform_network_process+0x44c>
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d02e      	beq.n	800510c <ai_platform_network_process+0x44c>
 80050ae:	f04f 0800 	mov.w	r8, #0
 80050b2:	e01a      	b.n	80050ea <ai_platform_network_process+0x42a>
 80050b4:	68d4      	ldr	r4, [r2, #12]
 80050b6:	1b00      	subs	r0, r0, r4
 80050b8:	4401      	add	r1, r0
 80050ba:	6091      	str	r1, [r2, #8]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	60da      	str	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f108 0801 	add.w	r8, r8, #1
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	f85a 2009 	ldr.w	r2, [sl, r9]
 80050ce:	440b      	add	r3, r1
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d301      	bcc.n	80050d8 <ai_platform_network_process+0x418>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	607b      	str	r3, [r7, #4]
 80050da:	882b      	ldrh	r3, [r5, #0]
 80050dc:	4598      	cmp	r8, r3
 80050de:	d215      	bcs.n	800510c <ai_platform_network_process+0x44c>
 80050e0:	686b      	ldr	r3, [r5, #4]
 80050e2:	b19b      	cbz	r3, 800510c <ai_platform_network_process+0x44c>
 80050e4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80050e8:	b183      	cbz	r3, 800510c <ai_platform_network_process+0x44c>
 80050ea:	68a9      	ldr	r1, [r5, #8]
 80050ec:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	f8d1 a000 	ldr.w	sl, [r1]
 80050f6:	6814      	ldr	r4, [r2, #0]
 80050f8:	eb0a 0709 	add.w	r7, sl, r9
 80050fc:	6890      	ldr	r0, [r2, #8]
 80050fe:	00a4      	lsls	r4, r4, #2
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	d5d7      	bpl.n	80050b4 <ai_platform_network_process+0x3f4>
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	f001 fe11 	bl	8006d2c <memcpy>
 800510a:	e7da      	b.n	80050c2 <ai_platform_network_process+0x402>
 800510c:	9800      	ldr	r0, [sp, #0]
 800510e:	f000 ff2b 	bl	8005f68 <ai_layers_forward_all>
 8005112:	2e00      	cmp	r6, #0
 8005114:	d04a      	beq.n	80051ac <ai_platform_network_process+0x4ec>
 8005116:	8833      	ldrh	r3, [r6, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d047      	beq.n	80051ac <ai_platform_network_process+0x4ec>
 800511c:	6873      	ldr	r3, [r6, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d044      	beq.n	80051ac <ai_platform_network_process+0x4ec>
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d041      	beq.n	80051ac <ai_platform_network_process+0x4ec>
 8005128:	f04f 0800 	mov.w	r8, #0
 800512c:	e019      	b.n	8005162 <ai_platform_network_process+0x4a2>
 800512e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005132:	4291      	cmp	r1, r2
 8005134:	d301      	bcc.n	800513a <ai_platform_network_process+0x47a>
 8005136:	68f9      	ldr	r1, [r7, #12]
 8005138:	1a51      	subs	r1, r2, r1
 800513a:	6079      	str	r1, [r7, #4]
 800513c:	f108 0801 	add.w	r8, r8, #1
 8005140:	6998      	ldr	r0, [r3, #24]
 8005142:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 8005146:	1b12      	subs	r2, r2, r4
 8005148:	440a      	add	r2, r1
 800514a:	6082      	str	r2, [r0, #8]
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	60da      	str	r2, [r3, #12]
 8005152:	8833      	ldrh	r3, [r6, #0]
 8005154:	4598      	cmp	r8, r3
 8005156:	d229      	bcs.n	80051ac <ai_platform_network_process+0x4ec>
 8005158:	6873      	ldr	r3, [r6, #4]
 800515a:	b33b      	cbz	r3, 80051ac <ai_platform_network_process+0x4ec>
 800515c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005160:	b323      	cbz	r3, 80051ac <ai_platform_network_process+0x4ec>
 8005162:	68b2      	ldr	r2, [r6, #8]
 8005164:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8005168:	f8d3 e018 	ldr.w	lr, [r3, #24]
 800516c:	f8d2 a000 	ldr.w	sl, [r2]
 8005170:	f8de 1000 	ldr.w	r1, [lr]
 8005174:	eb0a 0709 	add.w	r7, sl, r9
 8005178:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 800517c:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 8005180:	eb00 0102 	add.w	r1, r0, r2
 8005184:	d0d3      	beq.n	800512e <ai_platform_network_process+0x46e>
 8005186:	f8de 1008 	ldr.w	r1, [lr, #8]
 800518a:	f001 fdcf 	bl	8006d2c <memcpy>
 800518e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005192:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 8005196:	440b      	add	r3, r1
 8005198:	4293      	cmp	r3, r2
 800519a:	d301      	bcc.n	80051a0 <ai_platform_network_process+0x4e0>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	607b      	str	r3, [r7, #4]
 80051a2:	f108 0801 	add.w	r8, r8, #1
 80051a6:	8833      	ldrh	r3, [r6, #0]
 80051a8:	4598      	cmp	r8, r3
 80051aa:	d3d5      	bcc.n	8005158 <ai_platform_network_process+0x498>
 80051ac:	9b00      	ldr	r3, [sp, #0]
 80051ae:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 80051b2:	461a      	mov	r2, r3
 80051b4:	8a9b      	ldrh	r3, [r3, #20]
 80051b6:	f10b 0b01 	add.w	fp, fp, #1
 80051ba:	fa1f fb8b 	uxth.w	fp, fp
 80051be:	455b      	cmp	r3, fp
 80051c0:	f8a2 b016 	strh.w	fp, [r2, #22]
 80051c4:	f63f af68 	bhi.w	8005098 <ai_platform_network_process+0x3d8>
 80051c8:	4658      	mov	r0, fp
 80051ca:	b003      	add	sp, #12
 80051cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d0:	461d      	mov	r5, r3
 80051d2:	461e      	mov	r6, r3
 80051d4:	e759      	b.n	800508a <ai_platform_network_process+0x3ca>
 80051d6:	2600      	movs	r6, #0
 80051d8:	e757      	b.n	800508a <ai_platform_network_process+0x3ca>
 80051da:	9c00      	ldr	r4, [sp, #0]
 80051dc:	2217      	movs	r2, #23
 80051de:	2113      	movs	r1, #19
 80051e0:	46bb      	mov	fp, r7
 80051e2:	f104 0010 	add.w	r0, r4, #16
 80051e6:	f000 f835 	bl	8005254 <core_set_error>
 80051ea:	e664      	b.n	8004eb6 <ai_platform_network_process+0x1f6>
 80051ec:	f104 0010 	add.w	r0, r4, #16
 80051f0:	2217      	movs	r2, #23
 80051f2:	2112      	movs	r1, #18
 80051f4:	469b      	mov	fp, r3
 80051f6:	f000 f82d 	bl	8005254 <core_set_error>
 80051fa:	e65c      	b.n	8004eb6 <ai_platform_network_process+0x1f6>
 80051fc:	f104 0010 	add.w	r0, r4, #16
 8005200:	2219      	movs	r2, #25
 8005202:	2112      	movs	r1, #18
 8005204:	f04f 0b00 	mov.w	fp, #0
 8005208:	f000 f824 	bl	8005254 <core_set_error>
 800520c:	e653      	b.n	8004eb6 <ai_platform_network_process+0x1f6>
 800520e:	f104 0010 	add.w	r0, r4, #16
 8005212:	2230      	movs	r2, #48	; 0x30
 8005214:	2111      	movs	r1, #17
 8005216:	f000 f81d 	bl	8005254 <core_set_error>
 800521a:	f04f 0b00 	mov.w	fp, #0
 800521e:	e64a      	b.n	8004eb6 <ai_platform_network_process+0x1f6>
 8005220:	4b07      	ldr	r3, [pc, #28]	; (8005240 <ai_platform_network_process+0x580>)
 8005222:	2201      	movs	r2, #1
 8005224:	4619      	mov	r1, r3
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	680b      	ldr	r3, [r1, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1fc      	bne.n	8005228 <ai_platform_network_process+0x568>
 800522e:	4b05      	ldr	r3, [pc, #20]	; (8005244 <ai_platform_network_process+0x584>)
 8005230:	4905      	ldr	r1, [pc, #20]	; (8005248 <ai_platform_network_process+0x588>)
 8005232:	4a06      	ldr	r2, [pc, #24]	; (800524c <ai_platform_network_process+0x58c>)
 8005234:	6019      	str	r1, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4293      	cmp	r3, r2
 800523a:	f43f ad72 	beq.w	8004d22 <ai_platform_network_process+0x62>
 800523e:	e7fe      	b.n	800523e <ai_platform_network_process+0x57e>
 8005240:	40023008 	.word	0x40023008
 8005244:	40023000 	.word	0x40023000
 8005248:	f407a5c2 	.word	0xf407a5c2
 800524c:	b5e8b5cd 	.word	0xb5e8b5cd

08005250 <core_init>:
 8005250:	2001      	movs	r0, #1
 8005252:	4770      	bx	lr

08005254 <core_set_error>:
 8005254:	4603      	mov	r3, r0
 8005256:	7800      	ldrb	r0, [r0, #0]
 8005258:	b930      	cbnz	r0, 8005268 <core_set_error+0x14>
 800525a:	7019      	strb	r1, [r3, #0]
 800525c:	2001      	movs	r0, #1
 800525e:	6819      	ldr	r1, [r3, #0]
 8005260:	f362 211f 	bfi	r1, r2, #8, #24
 8005264:	6019      	str	r1, [r3, #0]
 8005266:	4770      	bx	lr
 8005268:	2000      	movs	r0, #0
 800526a:	4770      	bx	lr

0800526c <ai_dict8_dot_array_f32>:
 800526c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005270:	9d06      	ldr	r5, [sp, #24]
 8005272:	4c88      	ldr	r4, [pc, #544]	; (8005494 <ai_dict8_dot_array_f32+0x228>)
 8005274:	2d07      	cmp	r5, #7
 8005276:	442c      	add	r4, r5
 8005278:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800527c:	f104 0620 	add.w	r6, r4, #32
 8005280:	d817      	bhi.n	80052b2 <ai_dict8_dot_array_f32+0x46>
 8005282:	42b3      	cmp	r3, r6
 8005284:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8005498 <ai_dict8_dot_array_f32+0x22c>
 8005288:	d20b      	bcs.n	80052a2 <ai_dict8_dot_array_f32+0x36>
 800528a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800528e:	ecf3 7a01 	vldmia	r3!, {s15}
 8005292:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005296:	42b3      	cmp	r3, r6
 8005298:	edd4 6a00 	vldr	s13, [r4]
 800529c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80052a0:	d3f3      	bcc.n	800528a <ai_dict8_dot_array_f32+0x1e>
 80052a2:	edd0 7a00 	vldr	s15, [r0]
 80052a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052aa:	ed80 7a00 	vstr	s14, [r0]
 80052ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b2:	f001 0503 	and.w	r5, r1, #3
 80052b6:	2d02      	cmp	r5, #2
 80052b8:	f000 80f0 	beq.w	800549c <ai_dict8_dot_array_f32+0x230>
 80052bc:	2d03      	cmp	r5, #3
 80052be:	f000 81ff 	beq.w	80056c0 <ai_dict8_dot_array_f32+0x454>
 80052c2:	2d01      	cmp	r5, #1
 80052c4:	f000 81f0 	beq.w	80056a8 <ai_dict8_dot_array_f32+0x43c>
 80052c8:	42a3      	cmp	r3, r4
 80052ca:	f200 81fc 	bhi.w	80056c6 <ai_dict8_dot_array_f32+0x45a>
 80052ce:	1ae4      	subs	r4, r4, r3
 80052d0:	f101 0810 	add.w	r8, r1, #16
 80052d4:	f101 0508 	add.w	r5, r1, #8
 80052d8:	f103 0720 	add.w	r7, r3, #32
 80052dc:	0964      	lsrs	r4, r4, #5
 80052de:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8005498 <ai_dict8_dot_array_f32+0x22c>
 80052e2:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 80052e6:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 80052ea:	3508      	adds	r5, #8
 80052ec:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 80052f0:	3720      	adds	r7, #32
 80052f2:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 80052f6:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 80052fa:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80052fe:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 8005302:	edde 7a00 	vldr	s15, [lr]
 8005306:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 800530a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800530e:	eddc 5a00 	vldr	s11, [ip]
 8005312:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 8005316:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 800531a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800531e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8005322:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 8005326:	ed9c 4a00 	vldr	s8, [ip]
 800532a:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 800532e:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8005332:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 8005336:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800533a:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 800533e:	eee4 7a26 	vfma.f32	s15, s8, s13
 8005342:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 8005346:	ed9c 4a00 	vldr	s8, [ip]
 800534a:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 800534e:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 8005352:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8005356:	eee4 7a05 	vfma.f32	s15, s8, s10
 800535a:	ed9e 5a00 	vldr	s10, [lr]
 800535e:	ed9c 4a00 	vldr	s8, [ip]
 8005362:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 8005366:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 800536a:	4545      	cmp	r5, r8
 800536c:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8005370:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8005374:	eee5 7a06 	vfma.f32	s15, s10, s12
 8005378:	ed9e 5a00 	vldr	s10, [lr]
 800537c:	ed9c 6a00 	vldr	s12, [ip]
 8005380:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005384:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005388:	eee6 7a26 	vfma.f32	s15, s12, s13
 800538c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005390:	d1a9      	bne.n	80052e6 <ai_dict8_dot_array_f32+0x7a>
 8005392:	3401      	adds	r4, #1
 8005394:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8005398:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800539c:	42b3      	cmp	r3, r6
 800539e:	d280      	bcs.n	80052a2 <ai_dict8_dot_array_f32+0x36>
 80053a0:	461c      	mov	r4, r3
 80053a2:	780d      	ldrb	r5, [r1, #0]
 80053a4:	ecf4 6a01 	vldmia	r4!, {s13}
 80053a8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80053ac:	42a6      	cmp	r6, r4
 80053ae:	edd5 7a00 	vldr	s15, [r5]
 80053b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80053b6:	f67f af74 	bls.w	80052a2 <ai_dict8_dot_array_f32+0x36>
 80053ba:	784d      	ldrb	r5, [r1, #1]
 80053bc:	f103 0408 	add.w	r4, r3, #8
 80053c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80053c4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80053c8:	42a6      	cmp	r6, r4
 80053ca:	edd5 7a00 	vldr	s15, [r5]
 80053ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80053d2:	f67f af66 	bls.w	80052a2 <ai_dict8_dot_array_f32+0x36>
 80053d6:	788d      	ldrb	r5, [r1, #2]
 80053d8:	f103 040c 	add.w	r4, r3, #12
 80053dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80053e0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80053e4:	42a6      	cmp	r6, r4
 80053e6:	edd5 7a00 	vldr	s15, [r5]
 80053ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80053ee:	f67f af58 	bls.w	80052a2 <ai_dict8_dot_array_f32+0x36>
 80053f2:	78cd      	ldrb	r5, [r1, #3]
 80053f4:	f103 0410 	add.w	r4, r3, #16
 80053f8:	edd3 6a03 	vldr	s13, [r3, #12]
 80053fc:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8005400:	42a6      	cmp	r6, r4
 8005402:	edd5 7a00 	vldr	s15, [r5]
 8005406:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800540a:	f67f af4a 	bls.w	80052a2 <ai_dict8_dot_array_f32+0x36>
 800540e:	790d      	ldrb	r5, [r1, #4]
 8005410:	f103 0414 	add.w	r4, r3, #20
 8005414:	edd3 6a04 	vldr	s13, [r3, #16]
 8005418:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800541c:	42a6      	cmp	r6, r4
 800541e:	edd5 7a00 	vldr	s15, [r5]
 8005422:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005426:	f67f af3c 	bls.w	80052a2 <ai_dict8_dot_array_f32+0x36>
 800542a:	794d      	ldrb	r5, [r1, #5]
 800542c:	f103 0418 	add.w	r4, r3, #24
 8005430:	edd3 6a05 	vldr	s13, [r3, #20]
 8005434:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8005438:	42a6      	cmp	r6, r4
 800543a:	edd5 7a00 	vldr	s15, [r5]
 800543e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005442:	f67f af2e 	bls.w	80052a2 <ai_dict8_dot_array_f32+0x36>
 8005446:	798d      	ldrb	r5, [r1, #6]
 8005448:	f103 041c 	add.w	r4, r3, #28
 800544c:	edd3 6a06 	vldr	s13, [r3, #24]
 8005450:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8005454:	42a6      	cmp	r6, r4
 8005456:	edd5 7a00 	vldr	s15, [r5]
 800545a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800545e:	f67f af20 	bls.w	80052a2 <ai_dict8_dot_array_f32+0x36>
 8005462:	79cd      	ldrb	r5, [r1, #7]
 8005464:	f103 0420 	add.w	r4, r3, #32
 8005468:	edd3 6a07 	vldr	s13, [r3, #28]
 800546c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8005470:	42a6      	cmp	r6, r4
 8005472:	edd5 7a00 	vldr	s15, [r5]
 8005476:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800547a:	f67f af12 	bls.w	80052a2 <ai_dict8_dot_array_f32+0x36>
 800547e:	7a09      	ldrb	r1, [r1, #8]
 8005480:	edd3 7a08 	vldr	s15, [r3, #32]
 8005484:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005488:	edd2 6a00 	vldr	s13, [r2]
 800548c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005490:	e707      	b.n	80052a2 <ai_dict8_dot_array_f32+0x36>
 8005492:	bf00      	nop
 8005494:	3ffffff8 	.word	0x3ffffff8
 8005498:	00000000 	.word	0x00000000
 800549c:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8005498 <ai_dict8_dot_array_f32+0x22c>
 80054a0:	780d      	ldrb	r5, [r1, #0]
 80054a2:	3304      	adds	r3, #4
 80054a4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80054a8:	3101      	adds	r1, #1
 80054aa:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80054ae:	edd5 6a00 	vldr	s13, [r5]
 80054b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054b6:	780d      	ldrb	r5, [r1, #0]
 80054b8:	1d1f      	adds	r7, r3, #4
 80054ba:	edd3 7a00 	vldr	s15, [r3]
 80054be:	f101 0c01 	add.w	ip, r1, #1
 80054c2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80054c6:	42bc      	cmp	r4, r7
 80054c8:	edd5 6a00 	vldr	s13, [r5]
 80054cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054d0:	d365      	bcc.n	800559e <ai_dict8_dot_array_f32+0x332>
 80054d2:	3324      	adds	r3, #36	; 0x24
 80054d4:	f101 0e11 	add.w	lr, r1, #17
 80054d8:	3109      	adds	r1, #9
 80054da:	eba6 0803 	sub.w	r8, r6, r3
 80054de:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80054e2:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 80054e6:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80054ea:	3108      	adds	r1, #8
 80054ec:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 80054f0:	3320      	adds	r3, #32
 80054f2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80054f6:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 80054fa:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80054fe:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 8005502:	edd5 7a00 	vldr	s15, [r5]
 8005506:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 800550a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800550e:	edd4 5a00 	vldr	s11, [r4]
 8005512:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 8005516:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 800551a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800551e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005522:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8005526:	ed94 4a00 	vldr	s8, [r4]
 800552a:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 800552e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8005532:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 8005536:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800553a:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 800553e:	eee4 7a26 	vfma.f32	s15, s8, s13
 8005542:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 8005546:	ed94 4a00 	vldr	s8, [r4]
 800554a:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 800554e:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 8005552:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005556:	eee4 7a05 	vfma.f32	s15, s8, s10
 800555a:	ed95 5a00 	vldr	s10, [r5]
 800555e:	ed94 4a00 	vldr	s8, [r4]
 8005562:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8005566:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 800556a:	458e      	cmp	lr, r1
 800556c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8005570:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005574:	eee5 7a06 	vfma.f32	s15, s10, s12
 8005578:	ed95 5a00 	vldr	s10, [r5]
 800557c:	ed94 6a00 	vldr	s12, [r4]
 8005580:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005584:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005588:	eee6 7a26 	vfma.f32	s15, s12, s13
 800558c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005590:	d1a9      	bne.n	80054e6 <ai_dict8_dot_array_f32+0x27a>
 8005592:	f108 0801 	add.w	r8, r8, #1
 8005596:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800559a:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 800559e:	42b7      	cmp	r7, r6
 80055a0:	f4bf ae7f 	bcs.w	80052a2 <ai_dict8_dot_array_f32+0x36>
 80055a4:	463b      	mov	r3, r7
 80055a6:	f89c 1000 	ldrb.w	r1, [ip]
 80055aa:	ecf3 6a01 	vldmia	r3!, {s13}
 80055ae:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80055b2:	429e      	cmp	r6, r3
 80055b4:	edd1 7a00 	vldr	s15, [r1]
 80055b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80055bc:	f67f ae71 	bls.w	80052a2 <ai_dict8_dot_array_f32+0x36>
 80055c0:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80055c4:	f107 0308 	add.w	r3, r7, #8
 80055c8:	edd7 6a01 	vldr	s13, [r7, #4]
 80055cc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80055d0:	429e      	cmp	r6, r3
 80055d2:	edd1 7a00 	vldr	s15, [r1]
 80055d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80055da:	f67f ae62 	bls.w	80052a2 <ai_dict8_dot_array_f32+0x36>
 80055de:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80055e2:	f107 030c 	add.w	r3, r7, #12
 80055e6:	edd7 6a02 	vldr	s13, [r7, #8]
 80055ea:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80055ee:	429e      	cmp	r6, r3
 80055f0:	edd1 7a00 	vldr	s15, [r1]
 80055f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80055f8:	f67f ae53 	bls.w	80052a2 <ai_dict8_dot_array_f32+0x36>
 80055fc:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8005600:	f107 0310 	add.w	r3, r7, #16
 8005604:	edd7 6a03 	vldr	s13, [r7, #12]
 8005608:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800560c:	429e      	cmp	r6, r3
 800560e:	edd1 7a00 	vldr	s15, [r1]
 8005612:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005616:	f67f ae44 	bls.w	80052a2 <ai_dict8_dot_array_f32+0x36>
 800561a:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800561e:	f107 0314 	add.w	r3, r7, #20
 8005622:	edd7 6a04 	vldr	s13, [r7, #16]
 8005626:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800562a:	429e      	cmp	r6, r3
 800562c:	edd1 7a00 	vldr	s15, [r1]
 8005630:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005634:	f67f ae35 	bls.w	80052a2 <ai_dict8_dot_array_f32+0x36>
 8005638:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800563c:	f107 0318 	add.w	r3, r7, #24
 8005640:	edd7 6a05 	vldr	s13, [r7, #20]
 8005644:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8005648:	429e      	cmp	r6, r3
 800564a:	edd1 7a00 	vldr	s15, [r1]
 800564e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005652:	f67f ae26 	bls.w	80052a2 <ai_dict8_dot_array_f32+0x36>
 8005656:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800565a:	f107 031c 	add.w	r3, r7, #28
 800565e:	edd7 6a06 	vldr	s13, [r7, #24]
 8005662:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8005666:	429e      	cmp	r6, r3
 8005668:	edd1 7a00 	vldr	s15, [r1]
 800566c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005670:	f67f ae17 	bls.w	80052a2 <ai_dict8_dot_array_f32+0x36>
 8005674:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8005678:	f107 0320 	add.w	r3, r7, #32
 800567c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005680:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8005684:	429e      	cmp	r6, r3
 8005686:	edd1 7a00 	vldr	s15, [r1]
 800568a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800568e:	f67f ae08 	bls.w	80052a2 <ai_dict8_dot_array_f32+0x36>
 8005692:	f89c 3008 	ldrb.w	r3, [ip, #8]
 8005696:	edd7 7a08 	vldr	s15, [r7, #32]
 800569a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800569e:	edd2 6a00 	vldr	s13, [r2]
 80056a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80056a6:	e5fc      	b.n	80052a2 <ai_dict8_dot_array_f32+0x36>
 80056a8:	780d      	ldrb	r5, [r1, #0]
 80056aa:	3304      	adds	r3, #4
 80056ac:	ed53 7a01 	vldr	s15, [r3, #-4]
 80056b0:	3101      	adds	r1, #1
 80056b2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80056b6:	ed95 7a00 	vldr	s14, [r5]
 80056ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056be:	e6ef      	b.n	80054a0 <ai_dict8_dot_array_f32+0x234>
 80056c0:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 8005498 <ai_dict8_dot_array_f32+0x22c>
 80056c4:	e6f7      	b.n	80054b6 <ai_dict8_dot_array_f32+0x24a>
 80056c6:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 8005498 <ai_dict8_dot_array_f32+0x22c>
 80056ca:	e667      	b.n	800539c <ai_dict8_dot_array_f32+0x130>

080056cc <ai_dict4_dot_array_f32>:
 80056cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80056d2:	f027 0c01 	bic.w	ip, r7, #1
 80056d6:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 80056da:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80056de:	f000 80ad 	beq.w	800583c <ai_dict4_dot_array_f32+0x170>
 80056e2:	1d0d      	adds	r5, r1, #4
 80056e4:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80056e8:	f103 0420 	add.w	r4, r3, #32
 80056ec:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8005844 <ai_dict4_dot_array_f32+0x178>
 80056f0:	eb05 0e09 	add.w	lr, r5, r9
 80056f4:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 80056f8:	3504      	adds	r5, #4
 80056fa:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 80056fe:	3420      	adds	r4, #32
 8005700:	f006 0a0f 	and.w	sl, r6, #15
 8005704:	0936      	lsrs	r6, r6, #4
 8005706:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800570a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800570e:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 8005712:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005716:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 800571a:	edda 7a00 	vldr	s15, [sl]
 800571e:	edd6 5a00 	vldr	s11, [r6]
 8005722:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005726:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 800572a:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 800572e:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8005732:	f006 060f 	and.w	r6, r6, #15
 8005736:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800573a:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 800573e:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005742:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 8005746:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800574a:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 800574e:	ed9a 3a00 	vldr	s6, [sl]
 8005752:	ed96 5a00 	vldr	s10, [r6]
 8005756:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 800575a:	eee3 7a04 	vfma.f32	s15, s6, s8
 800575e:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 8005762:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8005766:	f00a 0a0f 	and.w	sl, sl, #15
 800576a:	45ae      	cmp	lr, r5
 800576c:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8005770:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005774:	ed9b 3a00 	vldr	s6, [fp]
 8005778:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 800577c:	eee5 7a06 	vfma.f32	s15, s10, s12
 8005780:	ed9a 4a00 	vldr	s8, [sl]
 8005784:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 8005788:	f006 060f 	and.w	r6, r6, #15
 800578c:	ed9a 5a00 	vldr	s10, [sl]
 8005790:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005794:	ed96 6a00 	vldr	s12, [r6]
 8005798:	eee3 7a23 	vfma.f32	s15, s6, s7
 800579c:	eee4 7a24 	vfma.f32	s15, s8, s9
 80057a0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80057a4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80057a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057ac:	d1a2      	bne.n	80056f4 <ai_dict4_dot_array_f32+0x28>
 80057ae:	4449      	add	r1, r9
 80057b0:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80057b4:	459c      	cmp	ip, r3
 80057b6:	d92d      	bls.n	8005814 <ai_dict4_dot_array_f32+0x148>
 80057b8:	f10c 0c07 	add.w	ip, ip, #7
 80057bc:	f103 0508 	add.w	r5, r3, #8
 80057c0:	f103 0810 	add.w	r8, r3, #16
 80057c4:	f101 3eff 	add.w	lr, r1, #4294967295
 80057c8:	ebac 0c05 	sub.w	ip, ip, r5
 80057cc:	f02c 0407 	bic.w	r4, ip, #7
 80057d0:	44a0      	add	r8, r4
 80057d2:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80057d6:	3508      	adds	r5, #8
 80057d8:	ed55 5a03 	vldr	s11, [r5, #-12]
 80057dc:	f004 060f 	and.w	r6, r4, #15
 80057e0:	0924      	lsrs	r4, r4, #4
 80057e2:	ed55 6a04 	vldr	s13, [r5, #-16]
 80057e6:	45a8      	cmp	r8, r5
 80057e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80057ec:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80057f0:	edd6 7a00 	vldr	s15, [r6]
 80057f4:	ed94 6a00 	vldr	s12, [r4]
 80057f8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80057fc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005800:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005804:	d1e5      	bne.n	80057d2 <ai_dict4_dot_array_f32+0x106>
 8005806:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800580a:	f10c 0c01 	add.w	ip, ip, #1
 800580e:	4461      	add	r1, ip
 8005810:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8005814:	07fc      	lsls	r4, r7, #31
 8005816:	d509      	bpl.n	800582c <ai_dict4_dot_array_f32+0x160>
 8005818:	7809      	ldrb	r1, [r1, #0]
 800581a:	edd3 7a00 	vldr	s15, [r3]
 800581e:	090b      	lsrs	r3, r1, #4
 8005820:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005824:	edd2 6a00 	vldr	s13, [r2]
 8005828:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800582c:	edd0 7a00 	vldr	s15, [r0]
 8005830:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005834:	ed80 7a00 	vstr	s14, [r0]
 8005838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800583c:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8005844 <ai_dict4_dot_array_f32+0x178>
 8005840:	e7b8      	b.n	80057b4 <ai_dict4_dot_array_f32+0xe8>
 8005842:	bf00      	nop
 8005844:	00000000 	.word	0x00000000

08005848 <forward_dense>:
 8005848:	6983      	ldr	r3, [r0, #24]
 800584a:	8818      	ldrh	r0, [r3, #0]
 800584c:	2800      	cmp	r0, #0
 800584e:	f000 80b7 	beq.w	80059c0 <forward_dense+0x178>
 8005852:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005856:	ed2d 8b08 	vpush	{d8-d11}
 800585a:	685f      	ldr	r7, [r3, #4]
 800585c:	b091      	sub	sp, #68	; 0x44
 800585e:	687d      	ldr	r5, [r7, #4]
 8005860:	b105      	cbz	r5, 8005864 <forward_dense+0x1c>
 8005862:	682d      	ldr	r5, [r5, #0]
 8005864:	2801      	cmp	r0, #1
 8005866:	f240 80a8 	bls.w	80059ba <forward_dense+0x172>
 800586a:	693c      	ldr	r4, [r7, #16]
 800586c:	b104      	cbz	r4, 8005870 <forward_dense+0x28>
 800586e:	6824      	ldr	r4, [r4, #0]
 8005870:	2802      	cmp	r0, #2
 8005872:	f000 80a7 	beq.w	80059c4 <forward_dense+0x17c>
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 821b 	beq.w	8005cb4 <forward_dense+0x46c>
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	9206      	str	r2, [sp, #24]
 8005882:	f117 0218 	adds.w	r2, r7, #24
 8005886:	f000 80ca 	beq.w	8005a1e <forward_dense+0x1d6>
 800588a:	8b3a      	ldrh	r2, [r7, #24]
 800588c:	2a01      	cmp	r2, #1
 800588e:	f240 820e 	bls.w	8005cae <forward_dense+0x466>
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 80c5 	beq.w	8005a22 <forward_dense+0x1da>
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	9307      	str	r3, [sp, #28]
 800589c:	9b06      	ldr	r3, [sp, #24]
 800589e:	2803      	cmp	r0, #3
 80058a0:	68e6      	ldr	r6, [r4, #12]
 80058a2:	6999      	ldr	r1, [r3, #24]
 80058a4:	680a      	ldr	r2, [r1, #0]
 80058a6:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 80058aa:	f3c2 5341 	ubfx	r3, r2, #21, #2
 80058ae:	fa48 f303 	asr.w	r3, r8, r3
 80058b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80058b4:	68eb      	ldr	r3, [r5, #12]
 80058b6:	9303      	str	r3, [sp, #12]
 80058b8:	68f3      	ldr	r3, [r6, #12]
 80058ba:	469c      	mov	ip, r3
 80058bc:	68b3      	ldr	r3, [r6, #8]
 80058be:	6876      	ldr	r6, [r6, #4]
 80058c0:	fb0c f303 	mul.w	r3, ip, r3
 80058c4:	9308      	str	r3, [sp, #32]
 80058c6:	9b03      	ldr	r3, [sp, #12]
 80058c8:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80058cc:	f000 81db 	beq.w	8005c86 <forward_dense+0x43e>
 80058d0:	6abf      	ldr	r7, [r7, #40]	; 0x28
 80058d2:	b117      	cbz	r7, 80058da <forward_dense+0x92>
 80058d4:	683f      	ldr	r7, [r7, #0]
 80058d6:	b107      	cbz	r7, 80058da <forward_dense+0x92>
 80058d8:	69bf      	ldr	r7, [r7, #24]
 80058da:	f3c2 4243 	ubfx	r2, r2, #17, #4
 80058de:	2a04      	cmp	r2, #4
 80058e0:	f000 81d4 	beq.w	8005c8c <forward_dense+0x444>
 80058e4:	2a08      	cmp	r2, #8
 80058e6:	f000 81d1 	beq.w	8005c8c <forward_dense+0x444>
 80058ea:	f04f 0a00 	mov.w	sl, #0
 80058ee:	69a3      	ldr	r3, [r4, #24]
 80058f0:	00b1      	lsls	r1, r6, #2
 80058f2:	69aa      	ldr	r2, [r5, #24]
 80058f4:	6898      	ldr	r0, [r3, #8]
 80058f6:	9b06      	ldr	r3, [sp, #24]
 80058f8:	9109      	str	r1, [sp, #36]	; 0x24
 80058fa:	1846      	adds	r6, r0, r1
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	9004      	str	r0, [sp, #16]
 8005900:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8005904:	9b08      	ldr	r3, [sp, #32]
 8005906:	6897      	ldr	r7, [r2, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d051      	beq.n	80059b0 <forward_dense+0x168>
 800590c:	f1a8 0310 	sub.w	r3, r8, #16
 8005910:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8005914:	eddf 2ad0 	vldr	s5, [pc, #832]	; 8005c58 <forward_dense+0x410>
 8005918:	091b      	lsrs	r3, r3, #4
 800591a:	920a      	str	r2, [sp, #40]	; 0x28
 800591c:	2200      	movs	r2, #0
 800591e:	3301      	adds	r3, #1
 8005920:	9205      	str	r2, [sp, #20]
 8005922:	f008 020f 	and.w	r2, r8, #15
 8005926:	019b      	lsls	r3, r3, #6
 8005928:	920d      	str	r2, [sp, #52]	; 0x34
 800592a:	930c      	str	r3, [sp, #48]	; 0x30
 800592c:	9b06      	ldr	r3, [sp, #24]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	689d      	ldr	r5, [r3, #8]
 8005932:	9b07      	ldr	r3, [sp, #28]
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 818c 	beq.w	8005c52 <forward_dense+0x40a>
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	689c      	ldr	r4, [r3, #8]
 800593e:	9b04      	ldr	r3, [sp, #16]
 8005940:	f1ba 0f00 	cmp.w	sl, #0
 8005944:	d06f      	beq.n	8005a26 <forward_dense+0x1de>
 8005946:	42b3      	cmp	r3, r6
 8005948:	d228      	bcs.n	800599c <forward_dense+0x154>
 800594a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800594c:	469b      	mov	fp, r3
 800594e:	ab0f      	add	r3, sp, #60	; 0x3c
 8005950:	2a04      	cmp	r2, #4
 8005952:	9303      	str	r3, [sp, #12]
 8005954:	4633      	mov	r3, r6
 8005956:	4646      	mov	r6, r8
 8005958:	4698      	mov	r8, r3
 800595a:	d036      	beq.n	80059ca <forward_dense+0x182>
 800595c:	2c00      	cmp	r4, #0
 800595e:	f000 817d 	beq.w	8005c5c <forward_dense+0x414>
 8005962:	f8d4 c000 	ldr.w	ip, [r4]
 8005966:	463b      	mov	r3, r7
 8005968:	4629      	mov	r1, r5
 800596a:	9600      	str	r6, [sp, #0]
 800596c:	4652      	mov	r2, sl
 800596e:	9803      	ldr	r0, [sp, #12]
 8005970:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8005974:	f7ff fc7a 	bl	800526c <ai_dict8_dot_array_f32>
 8005978:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800597a:	3404      	adds	r4, #4
 800597c:	444d      	add	r5, r9
 800597e:	f84b 3b04 	str.w	r3, [fp], #4
 8005982:	45c3      	cmp	fp, r8
 8005984:	d3ea      	bcc.n	800595c <forward_dense+0x114>
 8005986:	4643      	mov	r3, r8
 8005988:	46b0      	mov	r8, r6
 800598a:	461e      	mov	r6, r3
 800598c:	9a04      	ldr	r2, [sp, #16]
 800598e:	43d3      	mvns	r3, r2
 8005990:	4433      	add	r3, r6
 8005992:	f023 0303 	bic.w	r3, r3, #3
 8005996:	3304      	adds	r3, #4
 8005998:	18d3      	adds	r3, r2, r3
 800599a:	9304      	str	r3, [sp, #16]
 800599c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800599e:	9b05      	ldr	r3, [sp, #20]
 80059a0:	4417      	add	r7, r2
 80059a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059a4:	3301      	adds	r3, #1
 80059a6:	4416      	add	r6, r2
 80059a8:	9a08      	ldr	r2, [sp, #32]
 80059aa:	9305      	str	r3, [sp, #20]
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d1bd      	bne.n	800592c <forward_dense+0xe4>
 80059b0:	b011      	add	sp, #68	; 0x44
 80059b2:	ecbd 8b08 	vpop	{d8-d11}
 80059b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ba:	2300      	movs	r3, #0
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	deff      	udf	#255	; 0xff
 80059c0:	6843      	ldr	r3, [r0, #4]
 80059c2:	deff      	udf	#255	; 0xff
 80059c4:	2300      	movs	r3, #0
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	deff      	udf	#255	; 0xff
 80059ca:	b19c      	cbz	r4, 80059f4 <forward_dense+0x1ac>
 80059cc:	f8d4 c000 	ldr.w	ip, [r4]
 80059d0:	463b      	mov	r3, r7
 80059d2:	4629      	mov	r1, r5
 80059d4:	9600      	str	r6, [sp, #0]
 80059d6:	4652      	mov	r2, sl
 80059d8:	9803      	ldr	r0, [sp, #12]
 80059da:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80059de:	f7ff fe75 	bl	80056cc <ai_dict4_dot_array_f32>
 80059e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059e4:	3404      	adds	r4, #4
 80059e6:	444d      	add	r5, r9
 80059e8:	f84b 3b04 	str.w	r3, [fp], #4
 80059ec:	45c3      	cmp	fp, r8
 80059ee:	d2ca      	bcs.n	8005986 <forward_dense+0x13e>
 80059f0:	2c00      	cmp	r4, #0
 80059f2:	d1eb      	bne.n	80059cc <forward_dense+0x184>
 80059f4:	4634      	mov	r4, r6
 80059f6:	4646      	mov	r6, r8
 80059f8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80059fc:	463b      	mov	r3, r7
 80059fe:	4629      	mov	r1, r5
 8005a00:	9400      	str	r4, [sp, #0]
 8005a02:	4652      	mov	r2, sl
 8005a04:	4640      	mov	r0, r8
 8005a06:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 8005a0a:	f7ff fe5f 	bl	80056cc <ai_dict4_dot_array_f32>
 8005a0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a10:	444d      	add	r5, r9
 8005a12:	f84b 3b04 	str.w	r3, [fp], #4
 8005a16:	45b3      	cmp	fp, r6
 8005a18:	d3f0      	bcc.n	80059fc <forward_dense+0x1b4>
 8005a1a:	46a0      	mov	r8, r4
 8005a1c:	e7b6      	b.n	800598c <forward_dense+0x144>
 8005a1e:	9207      	str	r2, [sp, #28]
 8005a20:	e73c      	b.n	800589c <forward_dense+0x54>
 8005a22:	9307      	str	r3, [sp, #28]
 8005a24:	e73a      	b.n	800589c <forward_dense+0x54>
 8005a26:	42b3      	cmp	r3, r6
 8005a28:	d2b8      	bcs.n	800599c <forward_dense+0x154>
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a2e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8005a32:	eb07 0c03 	add.w	ip, r7, r3
 8005a36:	469e      	mov	lr, r3
 8005a38:	2c00      	cmp	r4, #0
 8005a3a:	f000 80fe 	beq.w	8005c3a <forward_dense+0x3f2>
 8005a3e:	f1b8 0f0f 	cmp.w	r8, #15
 8005a42:	ed94 6a00 	vldr	s12, [r4]
 8005a46:	f104 0404 	add.w	r4, r4, #4
 8005a4a:	f240 80fc 	bls.w	8005c46 <forward_dense+0x3fe>
 8005a4e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005a52:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8005a56:	4641      	mov	r1, r8
 8005a58:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8005c58 <forward_dense+0x410>
 8005a5c:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 8005a60:	3910      	subs	r1, #16
 8005a62:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8005a66:	3240      	adds	r2, #64	; 0x40
 8005a68:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8005a6c:	290f      	cmp	r1, #15
 8005a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a72:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 8005a76:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 8005a7a:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005a7e:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 8005a82:	eee5 7a87 	vfma.f32	s15, s11, s14
 8005a86:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 8005a8a:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 8005a8e:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 8005a92:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 8005a96:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8005a9a:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 8005a9e:	eee2 7a03 	vfma.f32	s15, s4, s6
 8005aa2:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 8005aa6:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 8005aaa:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 8005aae:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 8005ab2:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 8005ab6:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 8005aba:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005abe:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 8005ac2:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 8005ac6:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 8005aca:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 8005ace:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 8005ad2:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 8005ad6:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005ada:	ed12 2a14 	vldr	s4, [r2, #-80]	; 0xffffffb0
 8005ade:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 8005ae2:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 8005ae6:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8005aea:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8005aee:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8005af2:	eee5 7a87 	vfma.f32	s15, s11, s14
 8005af6:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 8005afa:	ed13 7a11 	vldr	s14, [r3, #-68]	; 0xffffffbc
 8005afe:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8005b02:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8005b06:	eee9 7a89 	vfma.f32	s15, s19, s18
 8005b0a:	eee8 7a88 	vfma.f32	s15, s17, s16
 8005b0e:	eee0 7a20 	vfma.f32	s15, s0, s1
 8005b12:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005b16:	eee2 7a03 	vfma.f32	s15, s4, s6
 8005b1a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005b1e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005b22:	eee5 7a87 	vfma.f32	s15, s11, s14
 8005b26:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005b2a:	d897      	bhi.n	8005a5c <forward_dense+0x214>
 8005b2c:	eb05 010e 	add.w	r1, r5, lr
 8005b30:	465b      	mov	r3, fp
 8005b32:	4662      	mov	r2, ip
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d075      	beq.n	8005c24 <forward_dense+0x3dc>
 8005b38:	ed91 7a00 	vldr	s14, [r1]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	edd2 7a00 	vldr	s15, [r2]
 8005b42:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b46:	d06d      	beq.n	8005c24 <forward_dense+0x3dc>
 8005b48:	ed91 7a01 	vldr	s14, [r1, #4]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	edd2 7a01 	vldr	s15, [r2, #4]
 8005b52:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b56:	d065      	beq.n	8005c24 <forward_dense+0x3dc>
 8005b58:	ed91 7a02 	vldr	s14, [r1, #8]
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	edd2 7a02 	vldr	s15, [r2, #8]
 8005b62:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b66:	d05d      	beq.n	8005c24 <forward_dense+0x3dc>
 8005b68:	ed91 7a03 	vldr	s14, [r1, #12]
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	edd2 7a03 	vldr	s15, [r2, #12]
 8005b72:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b76:	d055      	beq.n	8005c24 <forward_dense+0x3dc>
 8005b78:	ed91 7a04 	vldr	s14, [r1, #16]
 8005b7c:	2b05      	cmp	r3, #5
 8005b7e:	edd2 7a04 	vldr	s15, [r2, #16]
 8005b82:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b86:	d04d      	beq.n	8005c24 <forward_dense+0x3dc>
 8005b88:	ed91 7a05 	vldr	s14, [r1, #20]
 8005b8c:	2b06      	cmp	r3, #6
 8005b8e:	edd2 7a05 	vldr	s15, [r2, #20]
 8005b92:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b96:	d045      	beq.n	8005c24 <forward_dense+0x3dc>
 8005b98:	ed91 7a06 	vldr	s14, [r1, #24]
 8005b9c:	2b07      	cmp	r3, #7
 8005b9e:	edd2 7a06 	vldr	s15, [r2, #24]
 8005ba2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005ba6:	d03d      	beq.n	8005c24 <forward_dense+0x3dc>
 8005ba8:	ed91 7a07 	vldr	s14, [r1, #28]
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	edd2 7a07 	vldr	s15, [r2, #28]
 8005bb2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005bb6:	d035      	beq.n	8005c24 <forward_dense+0x3dc>
 8005bb8:	ed91 7a08 	vldr	s14, [r1, #32]
 8005bbc:	2b09      	cmp	r3, #9
 8005bbe:	edd2 7a08 	vldr	s15, [r2, #32]
 8005bc2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005bc6:	d02d      	beq.n	8005c24 <forward_dense+0x3dc>
 8005bc8:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8005bcc:	2b0a      	cmp	r3, #10
 8005bce:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8005bd2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005bd6:	d025      	beq.n	8005c24 <forward_dense+0x3dc>
 8005bd8:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8005bdc:	2b0b      	cmp	r3, #11
 8005bde:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8005be2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005be6:	d01d      	beq.n	8005c24 <forward_dense+0x3dc>
 8005be8:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8005bec:	2b0c      	cmp	r3, #12
 8005bee:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8005bf2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005bf6:	d015      	beq.n	8005c24 <forward_dense+0x3dc>
 8005bf8:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8005bfc:	2b0d      	cmp	r3, #13
 8005bfe:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8005c02:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005c06:	d00d      	beq.n	8005c24 <forward_dense+0x3dc>
 8005c08:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8005c0c:	2b0e      	cmp	r3, #14
 8005c0e:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8005c12:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005c16:	d005      	beq.n	8005c24 <forward_dense+0x3dc>
 8005c18:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8005c1c:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005c20:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005c24:	ee76 6a26 	vadd.f32	s13, s12, s13
 8005c28:	444d      	add	r5, r9
 8005c2a:	ece0 6a01 	vstmia	r0!, {s13}
 8005c2e:	42b0      	cmp	r0, r6
 8005c30:	f4bf aeac 	bcs.w	800598c <forward_dense+0x144>
 8005c34:	2c00      	cmp	r4, #0
 8005c36:	f47f af02 	bne.w	8005a3e <forward_dense+0x1f6>
 8005c3a:	f1b8 0f0f 	cmp.w	r8, #15
 8005c3e:	eeb0 6a62 	vmov.f32	s12, s5
 8005c42:	f63f af04 	bhi.w	8005a4e <forward_dense+0x206>
 8005c46:	4643      	mov	r3, r8
 8005c48:	4629      	mov	r1, r5
 8005c4a:	463a      	mov	r2, r7
 8005c4c:	eddf 6a02 	vldr	s13, [pc, #8]	; 8005c58 <forward_dense+0x410>
 8005c50:	e770      	b.n	8005b34 <forward_dense+0x2ec>
 8005c52:	461c      	mov	r4, r3
 8005c54:	e673      	b.n	800593e <forward_dense+0xf6>
 8005c56:	bf00      	nop
 8005c58:	00000000 	.word	0x00000000
 8005c5c:	4634      	mov	r4, r6
 8005c5e:	4646      	mov	r6, r8
 8005c60:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c64:	463b      	mov	r3, r7
 8005c66:	4629      	mov	r1, r5
 8005c68:	9400      	str	r4, [sp, #0]
 8005c6a:	4652      	mov	r2, sl
 8005c6c:	4640      	mov	r0, r8
 8005c6e:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 8005c72:	f7ff fafb 	bl	800526c <ai_dict8_dot_array_f32>
 8005c76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c78:	444d      	add	r5, r9
 8005c7a:	f84b 3b04 	str.w	r3, [fp], #4
 8005c7e:	455e      	cmp	r6, fp
 8005c80:	d8f0      	bhi.n	8005c64 <forward_dense+0x41c>
 8005c82:	46a0      	mov	r8, r4
 8005c84:	e682      	b.n	800598c <forward_dense+0x144>
 8005c86:	2300      	movs	r3, #0
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	deff      	udf	#255	; 0xff
 8005c8c:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 8005c90:	2f00      	cmp	r7, #0
 8005c92:	f43f ae2c 	beq.w	80058ee <forward_dense+0xa6>
 8005c96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c9a:	f000 fa09 	bl	80060b0 <ai_array_get_byte_size>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	4651      	mov	r1, sl
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	469a      	mov	sl, r3
 8005ca8:	f001 f840 	bl	8006d2c <memcpy>
 8005cac:	e61f      	b.n	80058ee <forward_dense+0xa6>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	9307      	str	r3, [sp, #28]
 8005cb2:	e5f3      	b.n	800589c <forward_dense+0x54>
 8005cb4:	9306      	str	r3, [sp, #24]
 8005cb6:	e5e4      	b.n	8005882 <forward_dense+0x3a>

08005cb8 <nl_func_relu_generic_array_f32>:
 8005cb8:	b470      	push	{r4, r5, r6}
 8005cba:	edd3 6a02 	vldr	s13, [r3, #8]
 8005cbe:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 8005cc2:	6985      	ldr	r5, [r0, #24]
 8005cc4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005cc8:	4414      	add	r4, r2
 8005cca:	6989      	ldr	r1, [r1, #24]
 8005ccc:	00a4      	lsls	r4, r4, #2
 8005cce:	68aa      	ldr	r2, [r5, #8]
 8005cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd4:	6888      	ldr	r0, [r1, #8]
 8005cd6:	4422      	add	r2, r4
 8005cd8:	ed93 7a00 	vldr	s14, [r3]
 8005cdc:	4404      	add	r4, r0
 8005cde:	ed93 6a01 	vldr	s12, [r3, #4]
 8005ce2:	d420      	bmi.n	8005d26 <nl_func_relu_generic_array_f32+0x6e>
 8005ce4:	42a0      	cmp	r0, r4
 8005ce6:	d83b      	bhi.n	8005d60 <nl_func_relu_generic_array_f32+0xa8>
 8005ce8:	1d23      	adds	r3, r4, #4
 8005cea:	3204      	adds	r2, #4
 8005cec:	e010      	b.n	8005d10 <nl_func_relu_generic_array_f32+0x58>
 8005cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cf2:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8005cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfa:	d501      	bpl.n	8005d00 <nl_func_relu_generic_array_f32+0x48>
 8005cfc:	ee65 7a86 	vmul.f32	s15, s11, s12
 8005d00:	f1a3 0408 	sub.w	r4, r3, #8
 8005d04:	ed62 7a01 	vstmdb	r2!, {s15}
 8005d08:	4603      	mov	r3, r0
 8005d0a:	6888      	ldr	r0, [r1, #8]
 8005d0c:	4284      	cmp	r4, r0
 8005d0e:	d327      	bcc.n	8005d60 <nl_func_relu_generic_array_f32+0xa8>
 8005d10:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005d14:	1f18      	subs	r0, r3, #4
 8005d16:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d1e:	d4e6      	bmi.n	8005cee <nl_func_relu_generic_array_f32+0x36>
 8005d20:	eef0 7a66 	vmov.f32	s15, s13
 8005d24:	e7ec      	b.n	8005d00 <nl_func_relu_generic_array_f32+0x48>
 8005d26:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d2e:	d019      	beq.n	8005d64 <nl_func_relu_generic_array_f32+0xac>
 8005d30:	42a0      	cmp	r0, r4
 8005d32:	d815      	bhi.n	8005d60 <nl_func_relu_generic_array_f32+0xa8>
 8005d34:	1d23      	adds	r3, r4, #4
 8005d36:	3204      	adds	r2, #4
 8005d38:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005d3c:	1f18      	subs	r0, r3, #4
 8005d3e:	f1a3 0508 	sub.w	r5, r3, #8
 8005d42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d46:	4603      	mov	r3, r0
 8005d48:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d50:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005d54:	d51c      	bpl.n	8005d90 <nl_func_relu_generic_array_f32+0xd8>
 8005d56:	ed62 6a01 	vstmdb	r2!, {s13}
 8005d5a:	6888      	ldr	r0, [r1, #8]
 8005d5c:	42a8      	cmp	r0, r5
 8005d5e:	d9eb      	bls.n	8005d38 <nl_func_relu_generic_array_f32+0x80>
 8005d60:	bc70      	pop	{r4, r5, r6}
 8005d62:	4770      	bx	lr
 8005d64:	42a0      	cmp	r0, r4
 8005d66:	d8fb      	bhi.n	8005d60 <nl_func_relu_generic_array_f32+0xa8>
 8005d68:	1d23      	adds	r3, r4, #4
 8005d6a:	3204      	adds	r2, #4
 8005d6c:	2600      	movs	r6, #0
 8005d6e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005d72:	1f18      	subs	r0, r3, #4
 8005d74:	f1a3 0508 	sub.w	r5, r3, #8
 8005d78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d82:	db0b      	blt.n	8005d9c <nl_func_relu_generic_array_f32+0xe4>
 8005d84:	ed62 7a01 	vstmdb	r2!, {s15}
 8005d88:	6888      	ldr	r0, [r1, #8]
 8005d8a:	42a8      	cmp	r0, r5
 8005d8c:	d9ef      	bls.n	8005d6e <nl_func_relu_generic_array_f32+0xb6>
 8005d8e:	e7e7      	b.n	8005d60 <nl_func_relu_generic_array_f32+0xa8>
 8005d90:	ed62 7a01 	vstmdb	r2!, {s15}
 8005d94:	6888      	ldr	r0, [r1, #8]
 8005d96:	42a8      	cmp	r0, r5
 8005d98:	d9ce      	bls.n	8005d38 <nl_func_relu_generic_array_f32+0x80>
 8005d9a:	e7e1      	b.n	8005d60 <nl_func_relu_generic_array_f32+0xa8>
 8005d9c:	f842 6d04 	str.w	r6, [r2, #-4]!
 8005da0:	6888      	ldr	r0, [r1, #8]
 8005da2:	42a8      	cmp	r0, r5
 8005da4:	d9e3      	bls.n	8005d6e <nl_func_relu_generic_array_f32+0xb6>
 8005da6:	e7db      	b.n	8005d60 <nl_func_relu_generic_array_f32+0xa8>

08005da8 <forward_relu>:
 8005da8:	6982      	ldr	r2, [r0, #24]
 8005daa:	8813      	ldrh	r3, [r2, #0]
 8005dac:	b333      	cbz	r3, 8005dfc <forward_relu+0x54>
 8005dae:	6852      	ldr	r2, [r2, #4]
 8005db0:	6851      	ldr	r1, [r2, #4]
 8005db2:	b101      	cbz	r1, 8005db6 <forward_relu+0xe>
 8005db4:	6809      	ldr	r1, [r1, #0]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d91d      	bls.n	8005df6 <forward_relu+0x4e>
 8005dba:	b4f0      	push	{r4, r5, r6, r7}
 8005dbc:	6917      	ldr	r7, [r2, #16]
 8005dbe:	b107      	cbz	r7, 8005dc2 <forward_relu+0x1a>
 8005dc0:	683f      	ldr	r7, [r7, #0]
 8005dc2:	688c      	ldr	r4, [r1, #8]
 8005dc4:	69c3      	ldr	r3, [r0, #28]
 8005dc6:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d043      	beq.n	8005e56 <forward_relu+0xae>
 8005dce:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 8005dd2:	2d01      	cmp	r5, #1
 8005dd4:	d014      	beq.n	8005e00 <forward_relu+0x58>
 8005dd6:	2c00      	cmp	r4, #0
 8005dd8:	d06d      	beq.n	8005eb6 <forward_relu+0x10e>
 8005dda:	68ce      	ldr	r6, [r1, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005de2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005de6:	42a6      	cmp	r6, r4
 8005de8:	fb05 f202 	mul.w	r2, r5, r2
 8005dec:	d1f9      	bne.n	8005de2 <forward_relu+0x3a>
 8005dee:	4638      	mov	r0, r7
 8005df0:	bcf0      	pop	{r4, r5, r6, r7}
 8005df2:	f7ff bf61 	b.w	8005cb8 <nl_func_relu_generic_array_f32>
 8005df6:	2300      	movs	r3, #0
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	deff      	udf	#255	; 0xff
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	deff      	udf	#255	; 0xff
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	698e      	ldr	r6, [r1, #24]
 8005e04:	6890      	ldr	r0, [r2, #8]
 8005e06:	ed93 7a00 	vldr	s14, [r3]
 8005e0a:	68b2      	ldr	r2, [r6, #8]
 8005e0c:	b184      	cbz	r4, 8005e30 <forward_relu+0x88>
 8005e0e:	68cf      	ldr	r7, [r1, #12]
 8005e10:	4629      	mov	r1, r5
 8005e12:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8005e16:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8005e1a:	42a7      	cmp	r7, r4
 8005e1c:	fb03 f101 	mul.w	r1, r3, r1
 8005e20:	d1f9      	bne.n	8005e16 <forward_relu+0x6e>
 8005e22:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005e26:	440b      	add	r3, r1
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	18d2      	adds	r2, r2, r3
 8005e2c:	4418      	add	r0, r3
 8005e2e:	d238      	bcs.n	8005ea2 <forward_relu+0xfa>
 8005e30:	1d13      	adds	r3, r2, #4
 8005e32:	2400      	movs	r4, #0
 8005e34:	1d02      	adds	r2, r0, #4
 8005e36:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005e3a:	1f19      	subs	r1, r3, #4
 8005e3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e44:	d82f      	bhi.n	8005ea6 <forward_relu+0xfe>
 8005e46:	ed62 7a01 	vstmdb	r2!, {s15}
 8005e4a:	3b08      	subs	r3, #8
 8005e4c:	68b0      	ldr	r0, [r6, #8]
 8005e4e:	4298      	cmp	r0, r3
 8005e50:	d827      	bhi.n	8005ea2 <forward_relu+0xfa>
 8005e52:	460b      	mov	r3, r1
 8005e54:	e7ef      	b.n	8005e36 <forward_relu+0x8e>
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	698d      	ldr	r5, [r1, #24]
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	68ab      	ldr	r3, [r5, #8]
 8005e5e:	b184      	cbz	r4, 8005e82 <forward_relu+0xda>
 8005e60:	68ce      	ldr	r6, [r1, #12]
 8005e62:	2101      	movs	r1, #1
 8005e64:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005e68:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 8005e6c:	42a6      	cmp	r6, r4
 8005e6e:	fb00 f101 	mul.w	r1, r0, r1
 8005e72:	d1f9      	bne.n	8005e68 <forward_relu+0xc0>
 8005e74:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8005e78:	4408      	add	r0, r1
 8005e7a:	0081      	lsls	r1, r0, #2
 8005e7c:	185b      	adds	r3, r3, r1
 8005e7e:	440a      	add	r2, r1
 8005e80:	d20f      	bcs.n	8005ea2 <forward_relu+0xfa>
 8005e82:	3304      	adds	r3, #4
 8005e84:	1d11      	adds	r1, r2, #4
 8005e86:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005ebc <forward_relu+0x114>
 8005e8a:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005e8e:	f1a3 0208 	sub.w	r2, r3, #8
 8005e92:	3b04      	subs	r3, #4
 8005e94:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8005e98:	ed61 7a01 	vstmdb	r1!, {s15}
 8005e9c:	68a8      	ldr	r0, [r5, #8]
 8005e9e:	4290      	cmp	r0, r2
 8005ea0:	d9f3      	bls.n	8005e8a <forward_relu+0xe2>
 8005ea2:	bcf0      	pop	{r4, r5, r6, r7}
 8005ea4:	4770      	bx	lr
 8005ea6:	f842 4d04 	str.w	r4, [r2, #-4]!
 8005eaa:	3b08      	subs	r3, #8
 8005eac:	68b0      	ldr	r0, [r6, #8]
 8005eae:	4298      	cmp	r0, r3
 8005eb0:	d8f7      	bhi.n	8005ea2 <forward_relu+0xfa>
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	e7bf      	b.n	8005e36 <forward_relu+0x8e>
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	e799      	b.n	8005dee <forward_relu+0x46>
 8005eba:	bf00      	nop
 8005ebc:	00000000 	.word	0x00000000

08005ec0 <ai_check_custom_types>:
 8005ec0:	4b13      	ldr	r3, [pc, #76]	; (8005f10 <ai_check_custom_types+0x50>)
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	b118      	cbz	r0, 8005ed2 <ai_check_custom_types+0x12>
 8005eca:	7803      	ldrb	r3, [r0, #0]
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d002      	beq.n	8005ed6 <ai_check_custom_types+0x16>
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	b002      	add	sp, #8
 8005ed4:	4770      	bx	lr
 8005ed6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d004      	beq.n	8005ee8 <ai_check_custom_types+0x28>
 8005ede:	2001      	movs	r0, #1
 8005ee0:	f080 0001 	eor.w	r0, r0, #1
 8005ee4:	b002      	add	sp, #8
 8005ee6:	4770      	bx	lr
 8005ee8:	7842      	ldrb	r2, [r0, #1]
 8005eea:	3001      	adds	r0, #1
 8005eec:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d1f4      	bne.n	8005ede <ai_check_custom_types+0x1e>
 8005ef4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005ef8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d1ee      	bne.n	8005ede <ai_check_custom_types+0x1e>
 8005f00:	7842      	ldrb	r2, [r0, #1]
 8005f02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d1e9      	bne.n	8005ede <ai_check_custom_types+0x1e>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e7e8      	b.n	8005ee0 <ai_check_custom_types+0x20>
 8005f0e:	bf00      	nop
 8005f10:	0800b498 	.word	0x0800b498

08005f14 <ai_layers_init_all>:
 8005f14:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005f16:	b16a      	cbz	r2, 8005f34 <ai_layers_init_all+0x20>
 8005f18:	6913      	ldr	r3, [r2, #16]
 8005f1a:	60d0      	str	r0, [r2, #12]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	f04f 0201 	mov.w	r2, #1
 8005f22:	d007      	beq.n	8005f34 <ai_layers_init_all+0x20>
 8005f24:	b133      	cbz	r3, 8005f34 <ai_layers_init_all+0x20>
 8005f26:	6919      	ldr	r1, [r3, #16]
 8005f28:	3201      	adds	r2, #1
 8005f2a:	60d8      	str	r0, [r3, #12]
 8005f2c:	4299      	cmp	r1, r3
 8005f2e:	bf18      	it	ne
 8005f30:	2900      	cmpne	r1, #0
 8005f32:	d101      	bne.n	8005f38 <ai_layers_init_all+0x24>
 8005f34:	4610      	mov	r0, r2
 8005f36:	4770      	bx	lr
 8005f38:	460b      	mov	r3, r1
 8005f3a:	e7f4      	b.n	8005f26 <ai_layers_init_all+0x12>

08005f3c <ai_layers_post_init_all>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005f40:	b184      	cbz	r4, 8005f64 <ai_layers_post_init_all+0x28>
 8005f42:	2500      	movs	r5, #0
 8005f44:	6863      	ldr	r3, [r4, #4]
 8005f46:	4620      	mov	r0, r4
 8005f48:	07db      	lsls	r3, r3, #31
 8005f4a:	d503      	bpl.n	8005f54 <ai_layers_post_init_all+0x18>
 8005f4c:	6a23      	ldr	r3, [r4, #32]
 8005f4e:	b10b      	cbz	r3, 8005f54 <ai_layers_post_init_all+0x18>
 8005f50:	3501      	adds	r5, #1
 8005f52:	4798      	blx	r3
 8005f54:	6923      	ldr	r3, [r4, #16]
 8005f56:	429c      	cmp	r4, r3
 8005f58:	bf18      	it	ne
 8005f5a:	2b00      	cmpne	r3, #0
 8005f5c:	461c      	mov	r4, r3
 8005f5e:	d1f1      	bne.n	8005f44 <ai_layers_post_init_all+0x8>
 8005f60:	4628      	mov	r0, r5
 8005f62:	bd38      	pop	{r3, r4, r5, pc}
 8005f64:	4625      	mov	r5, r4
 8005f66:	e7fb      	b.n	8005f60 <ai_layers_post_init_all+0x24>

08005f68 <ai_layers_forward_all>:
 8005f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6c:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8005f6e:	4604      	mov	r4, r0
 8005f70:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8005f72:	2f00      	cmp	r7, #0
 8005f74:	d02b      	beq.n	8005fce <ai_layers_forward_all+0x66>
 8005f76:	2d00      	cmp	r5, #0
 8005f78:	d03d      	beq.n	8005ff6 <ai_layers_forward_all+0x8e>
 8005f7a:	2600      	movs	r6, #0
 8005f7c:	6385      	str	r5, [r0, #56]	; 0x38
 8005f7e:	4629      	mov	r1, r5
 8005f80:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005f82:	2001      	movs	r0, #1
 8005f84:	46b0      	mov	r8, r6
 8005f86:	47b8      	blx	r7
 8005f88:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005f8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005f8c:	2002      	movs	r0, #2
 8005f8e:	47b8      	blx	r7
 8005f90:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005f92:	696b      	ldr	r3, [r5, #20]
 8005f94:	4628      	mov	r0, r5
 8005f96:	4798      	blx	r3
 8005f98:	692b      	ldr	r3, [r5, #16]
 8005f9a:	2003      	movs	r0, #3
 8005f9c:	429d      	cmp	r5, r3
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	d009      	beq.n	8005fb6 <ai_layers_forward_all+0x4e>
 8005fa2:	63a3      	str	r3, [r4, #56]	; 0x38
 8005fa4:	3601      	adds	r6, #1
 8005fa6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005fa8:	47b8      	blx	r7
 8005faa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005fac:	2900      	cmp	r1, #0
 8005fae:	d1ec      	bne.n	8005f8a <ai_layers_forward_all+0x22>
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8005fbc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005fbe:	3601      	adds	r6, #1
 8005fc0:	47b8      	blx	r7
 8005fc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005fc4:	2900      	cmp	r1, #0
 8005fc6:	d1e0      	bne.n	8005f8a <ai_layers_forward_all+0x22>
 8005fc8:	4630      	mov	r0, r6
 8005fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fce:	b195      	cbz	r5, 8005ff6 <ai_layers_forward_all+0x8e>
 8005fd0:	463e      	mov	r6, r7
 8005fd2:	6385      	str	r5, [r0, #56]	; 0x38
 8005fd4:	696b      	ldr	r3, [r5, #20]
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	4798      	blx	r3
 8005fda:	692b      	ldr	r3, [r5, #16]
 8005fdc:	3601      	adds	r6, #1
 8005fde:	42ab      	cmp	r3, r5
 8005fe0:	461d      	mov	r5, r3
 8005fe2:	d003      	beq.n	8005fec <ai_layers_forward_all+0x84>
 8005fe4:	63a3      	str	r3, [r4, #56]	; 0x38
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1f4      	bne.n	8005fd4 <ai_layers_forward_all+0x6c>
 8005fea:	e7e1      	b.n	8005fb0 <ai_layers_forward_all+0x48>
 8005fec:	2300      	movs	r3, #0
 8005fee:	4630      	mov	r0, r6
 8005ff0:	63a3      	str	r3, [r4, #56]	; 0x38
 8005ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff6:	462e      	mov	r6, r5
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ffe:	bf00      	nop

08006000 <ai_array_to_buffer_fmt>:
 8006000:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006004:	2b02      	cmp	r3, #2
 8006006:	d029      	beq.n	800605c <ai_array_to_buffer_fmt+0x5c>
 8006008:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800600c:	4a21      	ldr	r2, [pc, #132]	; (8006094 <ai_array_to_buffer_fmt+0x94>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d010      	beq.n	8006034 <ai_array_to_buffer_fmt+0x34>
 8006012:	dd13      	ble.n	800603c <ai_array_to_buffer_fmt+0x3c>
 8006014:	4a20      	ldr	r2, [pc, #128]	; (8006098 <ai_array_to_buffer_fmt+0x98>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00c      	beq.n	8006034 <ai_array_to_buffer_fmt+0x34>
 800601a:	dc27      	bgt.n	800606c <ai_array_to_buffer_fmt+0x6c>
 800601c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8006020:	4293      	cmp	r3, r2
 8006022:	d007      	beq.n	8006034 <ai_array_to_buffer_fmt+0x34>
 8006024:	3207      	adds	r2, #7
 8006026:	4293      	cmp	r3, r2
 8006028:	d004      	beq.n	8006034 <ai_array_to_buffer_fmt+0x34>
 800602a:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800602e:	4293      	cmp	r3, r2
 8006030:	d000      	beq.n	8006034 <ai_array_to_buffer_fmt+0x34>
 8006032:	2340      	movs	r3, #64	; 0x40
 8006034:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006038:	4318      	orrs	r0, r3
 800603a:	4770      	bx	lr
 800603c:	4a17      	ldr	r2, [pc, #92]	; (800609c <ai_array_to_buffer_fmt+0x9c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d0f8      	beq.n	8006034 <ai_array_to_buffer_fmt+0x34>
 8006042:	dd1e      	ble.n	8006082 <ai_array_to_buffer_fmt+0x82>
 8006044:	4a16      	ldr	r2, [pc, #88]	; (80060a0 <ai_array_to_buffer_fmt+0xa0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d0f4      	beq.n	8006034 <ai_array_to_buffer_fmt+0x34>
 800604a:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 800604e:	4293      	cmp	r3, r2
 8006050:	d0f0      	beq.n	8006034 <ai_array_to_buffer_fmt+0x34>
 8006052:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8006056:	4293      	cmp	r3, r2
 8006058:	d1eb      	bne.n	8006032 <ai_array_to_buffer_fmt+0x32>
 800605a:	e7eb      	b.n	8006034 <ai_array_to_buffer_fmt+0x34>
 800605c:	4b11      	ldr	r3, [pc, #68]	; (80060a4 <ai_array_to_buffer_fmt+0xa4>)
 800605e:	4003      	ands	r3, r0
 8006060:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006068:	4318      	orrs	r0, r3
 800606a:	4770      	bx	lr
 800606c:	4a0e      	ldr	r2, [pc, #56]	; (80060a8 <ai_array_to_buffer_fmt+0xa8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d0e0      	beq.n	8006034 <ai_array_to_buffer_fmt+0x34>
 8006072:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8006076:	4293      	cmp	r3, r2
 8006078:	d0dc      	beq.n	8006034 <ai_array_to_buffer_fmt+0x34>
 800607a:	4a0c      	ldr	r2, [pc, #48]	; (80060ac <ai_array_to_buffer_fmt+0xac>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d1d8      	bne.n	8006032 <ai_array_to_buffer_fmt+0x32>
 8006080:	e7d8      	b.n	8006034 <ai_array_to_buffer_fmt+0x34>
 8006082:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8006086:	4293      	cmp	r3, r2
 8006088:	d0d4      	beq.n	8006034 <ai_array_to_buffer_fmt+0x34>
 800608a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800608e:	4293      	cmp	r3, r2
 8006090:	d0d0      	beq.n	8006034 <ai_array_to_buffer_fmt+0x34>
 8006092:	e7ce      	b.n	8006032 <ai_array_to_buffer_fmt+0x32>
 8006094:	00060440 	.word	0x00060440
 8006098:	00840840 	.word	0x00840840
 800609c:	00040447 	.word	0x00040447
 80060a0:	0004084f 	.word	0x0004084f
 80060a4:	00803fff 	.word	0x00803fff
 80060a8:	00841040 	.word	0x00841040
 80060ac:	0084084f 	.word	0x0084084f

080060b0 <ai_array_get_byte_size>:
 80060b0:	b1e1      	cbz	r1, 80060ec <ai_array_get_byte_size+0x3c>
 80060b2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80060b6:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80060ba:	b410      	push	{r4}
 80060bc:	f3c0 3482 	ubfx	r4, r0, #14, #3
 80060c0:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80060c4:	4423      	add	r3, r4
 80060c6:	2804      	cmp	r0, #4
 80060c8:	fb01 f103 	mul.w	r1, r1, r3
 80060cc:	f101 0107 	add.w	r1, r1, #7
 80060d0:	f021 0107 	bic.w	r1, r1, #7
 80060d4:	fa21 f102 	lsr.w	r1, r1, r2
 80060d8:	d00a      	beq.n	80060f0 <ai_array_get_byte_size+0x40>
 80060da:	2808      	cmp	r0, #8
 80060dc:	d101      	bne.n	80060e2 <ai_array_get_byte_size+0x32>
 80060de:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80060e2:	3107      	adds	r1, #7
 80060e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060e8:	08c8      	lsrs	r0, r1, #3
 80060ea:	4770      	bx	lr
 80060ec:	4608      	mov	r0, r1
 80060ee:	4770      	bx	lr
 80060f0:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80060f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060f8:	3107      	adds	r1, #7
 80060fa:	08c8      	lsrs	r0, r1, #3
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop

08006100 <sin>:
 8006100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006102:	eeb0 7b40 	vmov.f64	d7, d0
 8006106:	ee17 3a90 	vmov	r3, s15
 800610a:	4a1f      	ldr	r2, [pc, #124]	; (8006188 <sin+0x88>)
 800610c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006110:	4293      	cmp	r3, r2
 8006112:	dc05      	bgt.n	8006120 <sin+0x20>
 8006114:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8006180 <sin+0x80>
 8006118:	2000      	movs	r0, #0
 800611a:	f000 fc65 	bl	80069e8 <__kernel_sin>
 800611e:	e004      	b.n	800612a <sin+0x2a>
 8006120:	4a1a      	ldr	r2, [pc, #104]	; (800618c <sin+0x8c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	dd04      	ble.n	8006130 <sin+0x30>
 8006126:	ee30 0b40 	vsub.f64	d0, d0, d0
 800612a:	b005      	add	sp, #20
 800612c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006130:	4668      	mov	r0, sp
 8006132:	f000 f82d 	bl	8006190 <__ieee754_rem_pio2>
 8006136:	f000 0003 	and.w	r0, r0, #3
 800613a:	2801      	cmp	r0, #1
 800613c:	d008      	beq.n	8006150 <sin+0x50>
 800613e:	2802      	cmp	r0, #2
 8006140:	d00d      	beq.n	800615e <sin+0x5e>
 8006142:	b9b0      	cbnz	r0, 8006172 <sin+0x72>
 8006144:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006148:	ed9d 0b00 	vldr	d0, [sp]
 800614c:	2001      	movs	r0, #1
 800614e:	e7e4      	b.n	800611a <sin+0x1a>
 8006150:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006154:	ed9d 0b00 	vldr	d0, [sp]
 8006158:	f000 f95a 	bl	8006410 <__kernel_cos>
 800615c:	e7e5      	b.n	800612a <sin+0x2a>
 800615e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006162:	ed9d 0b00 	vldr	d0, [sp]
 8006166:	2001      	movs	r0, #1
 8006168:	f000 fc3e 	bl	80069e8 <__kernel_sin>
 800616c:	eeb1 0b40 	vneg.f64	d0, d0
 8006170:	e7db      	b.n	800612a <sin+0x2a>
 8006172:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006176:	ed9d 0b00 	vldr	d0, [sp]
 800617a:	f000 f949 	bl	8006410 <__kernel_cos>
 800617e:	e7f5      	b.n	800616c <sin+0x6c>
	...
 8006188:	3fe921fb 	.word	0x3fe921fb
 800618c:	7fefffff 	.word	0x7fefffff

08006190 <__ieee754_rem_pio2>:
 8006190:	b570      	push	{r4, r5, r6, lr}
 8006192:	eeb0 7b40 	vmov.f64	d7, d0
 8006196:	ee17 5a90 	vmov	r5, s15
 800619a:	4b97      	ldr	r3, [pc, #604]	; (80063f8 <__ieee754_rem_pio2+0x268>)
 800619c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80061a0:	429e      	cmp	r6, r3
 80061a2:	b088      	sub	sp, #32
 80061a4:	4604      	mov	r4, r0
 80061a6:	dc07      	bgt.n	80061b8 <__ieee754_rem_pio2+0x28>
 80061a8:	2200      	movs	r2, #0
 80061aa:	2300      	movs	r3, #0
 80061ac:	ed84 0b00 	vstr	d0, [r4]
 80061b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80061b4:	2000      	movs	r0, #0
 80061b6:	e01b      	b.n	80061f0 <__ieee754_rem_pio2+0x60>
 80061b8:	4b90      	ldr	r3, [pc, #576]	; (80063fc <__ieee754_rem_pio2+0x26c>)
 80061ba:	429e      	cmp	r6, r3
 80061bc:	dc3b      	bgt.n	8006236 <__ieee754_rem_pio2+0xa6>
 80061be:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80061c2:	2d00      	cmp	r5, #0
 80061c4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80063b8 <__ieee754_rem_pio2+0x228>
 80061c8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80061cc:	dd19      	ble.n	8006202 <__ieee754_rem_pio2+0x72>
 80061ce:	ee30 7b46 	vsub.f64	d7, d0, d6
 80061d2:	429e      	cmp	r6, r3
 80061d4:	d00e      	beq.n	80061f4 <__ieee754_rem_pio2+0x64>
 80061d6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80063c0 <__ieee754_rem_pio2+0x230>
 80061da:	ee37 5b46 	vsub.f64	d5, d7, d6
 80061de:	ee37 7b45 	vsub.f64	d7, d7, d5
 80061e2:	ed84 5b00 	vstr	d5, [r4]
 80061e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80061ea:	ed84 7b02 	vstr	d7, [r4, #8]
 80061ee:	2001      	movs	r0, #1
 80061f0:	b008      	add	sp, #32
 80061f2:	bd70      	pop	{r4, r5, r6, pc}
 80061f4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80063c8 <__ieee754_rem_pio2+0x238>
 80061f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80061fc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80063d0 <__ieee754_rem_pio2+0x240>
 8006200:	e7eb      	b.n	80061da <__ieee754_rem_pio2+0x4a>
 8006202:	429e      	cmp	r6, r3
 8006204:	ee30 7b06 	vadd.f64	d7, d0, d6
 8006208:	d00e      	beq.n	8006228 <__ieee754_rem_pio2+0x98>
 800620a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80063c0 <__ieee754_rem_pio2+0x230>
 800620e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8006212:	ee37 7b45 	vsub.f64	d7, d7, d5
 8006216:	ed84 5b00 	vstr	d5, [r4]
 800621a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800621e:	f04f 30ff 	mov.w	r0, #4294967295
 8006222:	ed84 7b02 	vstr	d7, [r4, #8]
 8006226:	e7e3      	b.n	80061f0 <__ieee754_rem_pio2+0x60>
 8006228:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80063c8 <__ieee754_rem_pio2+0x238>
 800622c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006230:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80063d0 <__ieee754_rem_pio2+0x240>
 8006234:	e7eb      	b.n	800620e <__ieee754_rem_pio2+0x7e>
 8006236:	4b72      	ldr	r3, [pc, #456]	; (8006400 <__ieee754_rem_pio2+0x270>)
 8006238:	429e      	cmp	r6, r3
 800623a:	dc6e      	bgt.n	800631a <__ieee754_rem_pio2+0x18a>
 800623c:	f000 fc2c 	bl	8006a98 <fabs>
 8006240:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006244:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80063d8 <__ieee754_rem_pio2+0x248>
 8006248:	eea0 7b06 	vfma.f64	d7, d0, d6
 800624c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006250:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006254:	ee17 0a90 	vmov	r0, s15
 8006258:	eeb1 4b45 	vneg.f64	d4, d5
 800625c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80063b8 <__ieee754_rem_pio2+0x228>
 8006260:	eea5 0b47 	vfms.f64	d0, d5, d7
 8006264:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80063c0 <__ieee754_rem_pio2+0x230>
 8006268:	281f      	cmp	r0, #31
 800626a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800626e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006272:	dc08      	bgt.n	8006286 <__ieee754_rem_pio2+0xf6>
 8006274:	4b63      	ldr	r3, [pc, #396]	; (8006404 <__ieee754_rem_pio2+0x274>)
 8006276:	1e42      	subs	r2, r0, #1
 8006278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627c:	42b3      	cmp	r3, r6
 800627e:	d002      	beq.n	8006286 <__ieee754_rem_pio2+0xf6>
 8006280:	ed84 6b00 	vstr	d6, [r4]
 8006284:	e024      	b.n	80062d0 <__ieee754_rem_pio2+0x140>
 8006286:	ee16 3a90 	vmov	r3, s13
 800628a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800628e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8006292:	2b10      	cmp	r3, #16
 8006294:	ea4f 5226 	mov.w	r2, r6, asr #20
 8006298:	ddf2      	ble.n	8006280 <__ieee754_rem_pio2+0xf0>
 800629a:	eeb0 6b40 	vmov.f64	d6, d0
 800629e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80063c8 <__ieee754_rem_pio2+0x238>
 80062a2:	eea4 6b03 	vfma.f64	d6, d4, d3
 80062a6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80062aa:	eea4 7b03 	vfma.f64	d7, d4, d3
 80062ae:	ed9f 3b48 	vldr	d3, [pc, #288]	; 80063d0 <__ieee754_rem_pio2+0x240>
 80062b2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80062b6:	ee36 3b47 	vsub.f64	d3, d6, d7
 80062ba:	ee13 3a90 	vmov	r3, s7
 80062be:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b31      	cmp	r3, #49	; 0x31
 80062c6:	dc17      	bgt.n	80062f8 <__ieee754_rem_pio2+0x168>
 80062c8:	eeb0 0b46 	vmov.f64	d0, d6
 80062cc:	ed84 3b00 	vstr	d3, [r4]
 80062d0:	ed94 6b00 	vldr	d6, [r4]
 80062d4:	2d00      	cmp	r5, #0
 80062d6:	ee30 0b46 	vsub.f64	d0, d0, d6
 80062da:	ee30 7b47 	vsub.f64	d7, d0, d7
 80062de:	ed84 7b02 	vstr	d7, [r4, #8]
 80062e2:	da85      	bge.n	80061f0 <__ieee754_rem_pio2+0x60>
 80062e4:	eeb1 6b46 	vneg.f64	d6, d6
 80062e8:	ed84 6b00 	vstr	d6, [r4]
 80062ec:	eeb1 7b47 	vneg.f64	d7, d7
 80062f0:	4240      	negs	r0, r0
 80062f2:	ed84 7b02 	vstr	d7, [r4, #8]
 80062f6:	e77b      	b.n	80061f0 <__ieee754_rem_pio2+0x60>
 80062f8:	ed9f 3b39 	vldr	d3, [pc, #228]	; 80063e0 <__ieee754_rem_pio2+0x250>
 80062fc:	eeb0 0b46 	vmov.f64	d0, d6
 8006300:	eea4 0b03 	vfma.f64	d0, d4, d3
 8006304:	ee36 7b40 	vsub.f64	d7, d6, d0
 8006308:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80063e8 <__ieee754_rem_pio2+0x258>
 800630c:	eea4 7b03 	vfma.f64	d7, d4, d3
 8006310:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8006314:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006318:	e7b2      	b.n	8006280 <__ieee754_rem_pio2+0xf0>
 800631a:	4b3b      	ldr	r3, [pc, #236]	; (8006408 <__ieee754_rem_pio2+0x278>)
 800631c:	429e      	cmp	r6, r3
 800631e:	dd06      	ble.n	800632e <__ieee754_rem_pio2+0x19e>
 8006320:	ee30 7b40 	vsub.f64	d7, d0, d0
 8006324:	ed80 7b02 	vstr	d7, [r0, #8]
 8006328:	ed80 7b00 	vstr	d7, [r0]
 800632c:	e742      	b.n	80061b4 <__ieee754_rem_pio2+0x24>
 800632e:	1532      	asrs	r2, r6, #20
 8006330:	ee10 0a10 	vmov	r0, s0
 8006334:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8006338:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800633c:	ec41 0b17 	vmov	d7, r0, r1
 8006340:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006344:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80063f0 <__ieee754_rem_pio2+0x260>
 8006348:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800634c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006350:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006354:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006358:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800635c:	a902      	add	r1, sp, #8
 800635e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006362:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006366:	ed8d 6b04 	vstr	d6, [sp, #16]
 800636a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800636e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006372:	2603      	movs	r6, #3
 8006374:	4608      	mov	r0, r1
 8006376:	ed91 7b04 	vldr	d7, [r1, #16]
 800637a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800637e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006382:	4633      	mov	r3, r6
 8006384:	f1a1 0108 	sub.w	r1, r1, #8
 8006388:	f106 36ff 	add.w	r6, r6, #4294967295
 800638c:	d0f3      	beq.n	8006376 <__ieee754_rem_pio2+0x1e6>
 800638e:	491f      	ldr	r1, [pc, #124]	; (800640c <__ieee754_rem_pio2+0x27c>)
 8006390:	9101      	str	r1, [sp, #4]
 8006392:	2102      	movs	r1, #2
 8006394:	9100      	str	r1, [sp, #0]
 8006396:	4621      	mov	r1, r4
 8006398:	f000 f8a6 	bl	80064e8 <__kernel_rem_pio2>
 800639c:	2d00      	cmp	r5, #0
 800639e:	f6bf af27 	bge.w	80061f0 <__ieee754_rem_pio2+0x60>
 80063a2:	ed94 7b00 	vldr	d7, [r4]
 80063a6:	eeb1 7b47 	vneg.f64	d7, d7
 80063aa:	ed84 7b00 	vstr	d7, [r4]
 80063ae:	ed94 7b02 	vldr	d7, [r4, #8]
 80063b2:	e79b      	b.n	80062ec <__ieee754_rem_pio2+0x15c>
 80063b4:	f3af 8000 	nop.w
 80063b8:	54400000 	.word	0x54400000
 80063bc:	3ff921fb 	.word	0x3ff921fb
 80063c0:	1a626331 	.word	0x1a626331
 80063c4:	3dd0b461 	.word	0x3dd0b461
 80063c8:	1a600000 	.word	0x1a600000
 80063cc:	3dd0b461 	.word	0x3dd0b461
 80063d0:	2e037073 	.word	0x2e037073
 80063d4:	3ba3198a 	.word	0x3ba3198a
 80063d8:	6dc9c883 	.word	0x6dc9c883
 80063dc:	3fe45f30 	.word	0x3fe45f30
 80063e0:	2e000000 	.word	0x2e000000
 80063e4:	3ba3198a 	.word	0x3ba3198a
 80063e8:	252049c1 	.word	0x252049c1
 80063ec:	397b839a 	.word	0x397b839a
 80063f0:	00000000 	.word	0x00000000
 80063f4:	41700000 	.word	0x41700000
 80063f8:	3fe921fb 	.word	0x3fe921fb
 80063fc:	4002d97b 	.word	0x4002d97b
 8006400:	413921fb 	.word	0x413921fb
 8006404:	08023e34 	.word	0x08023e34
 8006408:	7fefffff 	.word	0x7fefffff
 800640c:	08023eb4 	.word	0x08023eb4

08006410 <__kernel_cos>:
 8006410:	ee10 1a90 	vmov	r1, s1
 8006414:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8006418:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800641c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8006420:	da05      	bge.n	800642e <__kernel_cos+0x1e>
 8006422:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8006426:	ee17 3a90 	vmov	r3, s15
 800642a:	2b00      	cmp	r3, #0
 800642c:	d03d      	beq.n	80064aa <__kernel_cos+0x9a>
 800642e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8006432:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80064b0 <__kernel_cos+0xa0>
 8006436:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80064b8 <__kernel_cos+0xa8>
 800643a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800643e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80064c0 <__kernel_cos+0xb0>
 8006442:	eea6 7b03 	vfma.f64	d7, d6, d3
 8006446:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80064c8 <__kernel_cos+0xb8>
 800644a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800644e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80064d0 <__kernel_cos+0xc0>
 8006452:	4b23      	ldr	r3, [pc, #140]	; (80064e0 <__kernel_cos+0xd0>)
 8006454:	eea6 7b03 	vfma.f64	d7, d6, d3
 8006458:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80064d8 <__kernel_cos+0xc8>
 800645c:	4299      	cmp	r1, r3
 800645e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8006462:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006466:	ee26 5b03 	vmul.f64	d5, d6, d3
 800646a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800646e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8006472:	eea3 6b05 	vfma.f64	d6, d3, d5
 8006476:	dc04      	bgt.n	8006482 <__kernel_cos+0x72>
 8006478:	ee37 6b46 	vsub.f64	d6, d7, d6
 800647c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8006480:	4770      	bx	lr
 8006482:	4b18      	ldr	r3, [pc, #96]	; (80064e4 <__kernel_cos+0xd4>)
 8006484:	4299      	cmp	r1, r3
 8006486:	dc0d      	bgt.n	80064a4 <__kernel_cos+0x94>
 8006488:	2200      	movs	r2, #0
 800648a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800648e:	ec43 2b15 	vmov	d5, r2, r3
 8006492:	ee34 0b45 	vsub.f64	d0, d4, d5
 8006496:	ee37 7b45 	vsub.f64	d7, d7, d5
 800649a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800649e:	ee30 0b47 	vsub.f64	d0, d0, d7
 80064a2:	4770      	bx	lr
 80064a4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80064a8:	e7f3      	b.n	8006492 <__kernel_cos+0x82>
 80064aa:	eeb0 0b44 	vmov.f64	d0, d4
 80064ae:	4770      	bx	lr
 80064b0:	be8838d4 	.word	0xbe8838d4
 80064b4:	bda8fae9 	.word	0xbda8fae9
 80064b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80064bc:	3e21ee9e 	.word	0x3e21ee9e
 80064c0:	809c52ad 	.word	0x809c52ad
 80064c4:	be927e4f 	.word	0xbe927e4f
 80064c8:	19cb1590 	.word	0x19cb1590
 80064cc:	3efa01a0 	.word	0x3efa01a0
 80064d0:	16c15177 	.word	0x16c15177
 80064d4:	bf56c16c 	.word	0xbf56c16c
 80064d8:	5555554c 	.word	0x5555554c
 80064dc:	3fa55555 	.word	0x3fa55555
 80064e0:	3fd33332 	.word	0x3fd33332
 80064e4:	3fe90000 	.word	0x3fe90000

080064e8 <__kernel_rem_pio2>:
 80064e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ec:	ed2d 8b06 	vpush	{d8-d10}
 80064f0:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80064f4:	469b      	mov	fp, r3
 80064f6:	460f      	mov	r7, r1
 80064f8:	4bcf      	ldr	r3, [pc, #828]	; (8006838 <__kernel_rem_pio2+0x350>)
 80064fa:	99a0      	ldr	r1, [sp, #640]	; 0x280
 80064fc:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8006500:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8006504:	9000      	str	r0, [sp, #0]
 8006506:	f112 0f14 	cmn.w	r2, #20
 800650a:	bfa8      	it	ge
 800650c:	2318      	movge	r3, #24
 800650e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8006512:	bfb8      	it	lt
 8006514:	2300      	movlt	r3, #0
 8006516:	f06f 0417 	mvn.w	r4, #23
 800651a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8006820 <__kernel_rem_pio2+0x338>
 800651e:	bfa4      	itt	ge
 8006520:	f1a2 0a03 	subge.w	sl, r2, #3
 8006524:	fb9a f3f3 	sdivge	r3, sl, r3
 8006528:	fb03 4404 	mla	r4, r3, r4, r4
 800652c:	1a5d      	subs	r5, r3, r1
 800652e:	4414      	add	r4, r2
 8006530:	eb09 0601 	add.w	r6, r9, r1
 8006534:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8006538:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800653c:	2200      	movs	r2, #0
 800653e:	42b2      	cmp	r2, r6
 8006540:	dd12      	ble.n	8006568 <__kernel_rem_pio2+0x80>
 8006542:	aa18      	add	r2, sp, #96	; 0x60
 8006544:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8006548:	460e      	mov	r6, r1
 800654a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800654e:	f1cb 0a01 	rsb	sl, fp, #1
 8006552:	eb0a 0006 	add.w	r0, sl, r6
 8006556:	4581      	cmp	r9, r0
 8006558:	db25      	blt.n	80065a6 <__kernel_rem_pio2+0xbe>
 800655a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8006820 <__kernel_rem_pio2+0x338>
 800655e:	f8dd e000 	ldr.w	lr, [sp]
 8006562:	4615      	mov	r5, r2
 8006564:	2000      	movs	r0, #0
 8006566:	e015      	b.n	8006594 <__kernel_rem_pio2+0xac>
 8006568:	42d5      	cmn	r5, r2
 800656a:	d409      	bmi.n	8006580 <__kernel_rem_pio2+0x98>
 800656c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8006570:	ee07 0a90 	vmov	s15, r0
 8006574:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006578:	eca8 7b02 	vstmia	r8!, {d7}
 800657c:	3201      	adds	r2, #1
 800657e:	e7de      	b.n	800653e <__kernel_rem_pio2+0x56>
 8006580:	eeb0 7b46 	vmov.f64	d7, d6
 8006584:	e7f8      	b.n	8006578 <__kernel_rem_pio2+0x90>
 8006586:	ecbe 5b02 	vldmia	lr!, {d5}
 800658a:	ed95 6b00 	vldr	d6, [r5]
 800658e:	3001      	adds	r0, #1
 8006590:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006594:	4288      	cmp	r0, r1
 8006596:	f1a5 0508 	sub.w	r5, r5, #8
 800659a:	ddf4      	ble.n	8006586 <__kernel_rem_pio2+0x9e>
 800659c:	eca8 7b02 	vstmia	r8!, {d7}
 80065a0:	3208      	adds	r2, #8
 80065a2:	3601      	adds	r6, #1
 80065a4:	e7d5      	b.n	8006552 <__kernel_rem_pio2+0x6a>
 80065a6:	aa04      	add	r2, sp, #16
 80065a8:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8006828 <__kernel_rem_pio2+0x340>
 80065ac:	ed9f aba0 	vldr	d10, [pc, #640]	; 8006830 <__kernel_rem_pio2+0x348>
 80065b0:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80065b4:	9201      	str	r2, [sp, #4]
 80065b6:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 80065ba:	464e      	mov	r6, r9
 80065bc:	ab90      	add	r3, sp, #576	; 0x240
 80065be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80065c2:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80065c6:	ab04      	add	r3, sp, #16
 80065c8:	4618      	mov	r0, r3
 80065ca:	4632      	mov	r2, r6
 80065cc:	2a00      	cmp	r2, #0
 80065ce:	dc4e      	bgt.n	800666e <__kernel_rem_pio2+0x186>
 80065d0:	4620      	mov	r0, r4
 80065d2:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80065d6:	f000 fadf 	bl	8006b98 <scalbn>
 80065da:	eeb0 8b40 	vmov.f64	d8, d0
 80065de:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80065e2:	ee28 0b00 	vmul.f64	d0, d8, d0
 80065e6:	f000 fa63 	bl	8006ab0 <floor>
 80065ea:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80065ee:	eea0 8b47 	vfms.f64	d8, d0, d7
 80065f2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80065f6:	2c00      	cmp	r4, #0
 80065f8:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80065fc:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8006600:	ee38 8b40 	vsub.f64	d8, d8, d0
 8006604:	ee17 8a90 	vmov	r8, s15
 8006608:	dd46      	ble.n	8006698 <__kernel_rem_pio2+0x1b0>
 800660a:	1e70      	subs	r0, r6, #1
 800660c:	aa04      	add	r2, sp, #16
 800660e:	f1c4 0c18 	rsb	ip, r4, #24
 8006612:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8006616:	fa45 f20c 	asr.w	r2, r5, ip
 800661a:	4490      	add	r8, r2
 800661c:	fa02 f20c 	lsl.w	r2, r2, ip
 8006620:	1aad      	subs	r5, r5, r2
 8006622:	aa04      	add	r2, sp, #16
 8006624:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8006628:	f1c4 0217 	rsb	r2, r4, #23
 800662c:	4115      	asrs	r5, r2
 800662e:	2d00      	cmp	r5, #0
 8006630:	dd41      	ble.n	80066b6 <__kernel_rem_pio2+0x1ce>
 8006632:	f04f 0c00 	mov.w	ip, #0
 8006636:	f108 0801 	add.w	r8, r8, #1
 800663a:	4660      	mov	r0, ip
 800663c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8006640:	4566      	cmp	r6, ip
 8006642:	dc69      	bgt.n	8006718 <__kernel_rem_pio2+0x230>
 8006644:	2c00      	cmp	r4, #0
 8006646:	dd03      	ble.n	8006650 <__kernel_rem_pio2+0x168>
 8006648:	2c01      	cmp	r4, #1
 800664a:	d076      	beq.n	800673a <__kernel_rem_pio2+0x252>
 800664c:	2c02      	cmp	r4, #2
 800664e:	d07f      	beq.n	8006750 <__kernel_rem_pio2+0x268>
 8006650:	2d02      	cmp	r5, #2
 8006652:	d130      	bne.n	80066b6 <__kernel_rem_pio2+0x1ce>
 8006654:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006658:	ee30 8b48 	vsub.f64	d8, d0, d8
 800665c:	b358      	cbz	r0, 80066b6 <__kernel_rem_pio2+0x1ce>
 800665e:	4620      	mov	r0, r4
 8006660:	9102      	str	r1, [sp, #8]
 8006662:	f000 fa99 	bl	8006b98 <scalbn>
 8006666:	9902      	ldr	r1, [sp, #8]
 8006668:	ee38 8b40 	vsub.f64	d8, d8, d0
 800666c:	e023      	b.n	80066b6 <__kernel_rem_pio2+0x1ce>
 800666e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8006672:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8006676:	3a01      	subs	r2, #1
 8006678:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800667c:	ad68      	add	r5, sp, #416	; 0x1a0
 800667e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8006682:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8006686:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800668a:	eca0 0a01 	vstmia	r0!, {s0}
 800668e:	ed95 0b00 	vldr	d0, [r5]
 8006692:	ee37 0b00 	vadd.f64	d0, d7, d0
 8006696:	e799      	b.n	80065cc <__kernel_rem_pio2+0xe4>
 8006698:	d105      	bne.n	80066a6 <__kernel_rem_pio2+0x1be>
 800669a:	1e72      	subs	r2, r6, #1
 800669c:	a804      	add	r0, sp, #16
 800669e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 80066a2:	15ed      	asrs	r5, r5, #23
 80066a4:	e7c3      	b.n	800662e <__kernel_rem_pio2+0x146>
 80066a6:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80066aa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80066ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b2:	da2f      	bge.n	8006714 <__kernel_rem_pio2+0x22c>
 80066b4:	2500      	movs	r5, #0
 80066b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80066ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066be:	f040 8087 	bne.w	80067d0 <__kernel_rem_pio2+0x2e8>
 80066c2:	1e73      	subs	r3, r6, #1
 80066c4:	4618      	mov	r0, r3
 80066c6:	f04f 0c00 	mov.w	ip, #0
 80066ca:	4548      	cmp	r0, r9
 80066cc:	da47      	bge.n	800675e <__kernel_rem_pio2+0x276>
 80066ce:	f1bc 0f00 	cmp.w	ip, #0
 80066d2:	d070      	beq.n	80067b6 <__kernel_rem_pio2+0x2ce>
 80066d4:	aa04      	add	r2, sp, #16
 80066d6:	3c18      	subs	r4, #24
 80066d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80066dc:	2a00      	cmp	r2, #0
 80066de:	d075      	beq.n	80067cc <__kernel_rem_pio2+0x2e4>
 80066e0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80066e4:	4620      	mov	r0, r4
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	f000 fa56 	bl	8006b98 <scalbn>
 80066ec:	9b00      	ldr	r3, [sp, #0]
 80066ee:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8006828 <__kernel_rem_pio2+0x340>
 80066f2:	461a      	mov	r2, r3
 80066f4:	2a00      	cmp	r2, #0
 80066f6:	f280 80ac 	bge.w	8006852 <__kernel_rem_pio2+0x36a>
 80066fa:	4619      	mov	r1, r3
 80066fc:	2000      	movs	r0, #0
 80066fe:	2900      	cmp	r1, #0
 8006700:	f2c0 80cd 	blt.w	800689e <__kernel_rem_pio2+0x3b6>
 8006704:	aa68      	add	r2, sp, #416	; 0x1a0
 8006706:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800670a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8006820 <__kernel_rem_pio2+0x338>
 800670e:	4e4b      	ldr	r6, [pc, #300]	; (800683c <__kernel_rem_pio2+0x354>)
 8006710:	2200      	movs	r2, #0
 8006712:	e0b8      	b.n	8006886 <__kernel_rem_pio2+0x39e>
 8006714:	2502      	movs	r5, #2
 8006716:	e78c      	b.n	8006632 <__kernel_rem_pio2+0x14a>
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	b948      	cbnz	r0, 8006730 <__kernel_rem_pio2+0x248>
 800671c:	b11a      	cbz	r2, 8006726 <__kernel_rem_pio2+0x23e>
 800671e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	2201      	movs	r2, #1
 8006726:	f10c 0c01 	add.w	ip, ip, #1
 800672a:	3304      	adds	r3, #4
 800672c:	4610      	mov	r0, r2
 800672e:	e787      	b.n	8006640 <__kernel_rem_pio2+0x158>
 8006730:	ebae 0202 	sub.w	r2, lr, r2
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	4602      	mov	r2, r0
 8006738:	e7f5      	b.n	8006726 <__kernel_rem_pio2+0x23e>
 800673a:	1e72      	subs	r2, r6, #1
 800673c:	ab04      	add	r3, sp, #16
 800673e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006742:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006746:	f10d 0c10 	add.w	ip, sp, #16
 800674a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800674e:	e77f      	b.n	8006650 <__kernel_rem_pio2+0x168>
 8006750:	1e72      	subs	r2, r6, #1
 8006752:	ab04      	add	r3, sp, #16
 8006754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006758:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800675c:	e7f3      	b.n	8006746 <__kernel_rem_pio2+0x25e>
 800675e:	aa04      	add	r2, sp, #16
 8006760:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8006764:	3801      	subs	r0, #1
 8006766:	ea4c 0c02 	orr.w	ip, ip, r2
 800676a:	e7ae      	b.n	80066ca <__kernel_rem_pio2+0x1e2>
 800676c:	3001      	adds	r0, #1
 800676e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006772:	2a00      	cmp	r2, #0
 8006774:	d0fa      	beq.n	800676c <__kernel_rem_pio2+0x284>
 8006776:	eb06 020b 	add.w	r2, r6, fp
 800677a:	ad18      	add	r5, sp, #96	; 0x60
 800677c:	1c73      	adds	r3, r6, #1
 800677e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8006782:	4406      	add	r6, r0
 8006784:	429e      	cmp	r6, r3
 8006786:	f6ff af19 	blt.w	80065bc <__kernel_rem_pio2+0xd4>
 800678a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800678e:	9d00      	ldr	r5, [sp, #0]
 8006790:	ee07 0a90 	vmov	s15, r0
 8006794:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006798:	2000      	movs	r0, #0
 800679a:	eca2 7b02 	vstmia	r2!, {d7}
 800679e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8006820 <__kernel_rem_pio2+0x338>
 80067a2:	4694      	mov	ip, r2
 80067a4:	4288      	cmp	r0, r1
 80067a6:	dd09      	ble.n	80067bc <__kernel_rem_pio2+0x2d4>
 80067a8:	a868      	add	r0, sp, #416	; 0x1a0
 80067aa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80067ae:	ed80 7b00 	vstr	d7, [r0]
 80067b2:	3301      	adds	r3, #1
 80067b4:	e7e6      	b.n	8006784 <__kernel_rem_pio2+0x29c>
 80067b6:	9b01      	ldr	r3, [sp, #4]
 80067b8:	2001      	movs	r0, #1
 80067ba:	e7d8      	b.n	800676e <__kernel_rem_pio2+0x286>
 80067bc:	ecb5 5b02 	vldmia	r5!, {d5}
 80067c0:	ed3c 6b02 	vldmdb	ip!, {d6}
 80067c4:	3001      	adds	r0, #1
 80067c6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80067ca:	e7eb      	b.n	80067a4 <__kernel_rem_pio2+0x2bc>
 80067cc:	3b01      	subs	r3, #1
 80067ce:	e781      	b.n	80066d4 <__kernel_rem_pio2+0x1ec>
 80067d0:	4260      	negs	r0, r4
 80067d2:	eeb0 0b48 	vmov.f64	d0, d8
 80067d6:	f000 f9df 	bl	8006b98 <scalbn>
 80067da:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8006830 <__kernel_rem_pio2+0x348>
 80067de:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80067e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067e6:	db2b      	blt.n	8006840 <__kernel_rem_pio2+0x358>
 80067e8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8006828 <__kernel_rem_pio2+0x340>
 80067ec:	ee20 7b07 	vmul.f64	d7, d0, d7
 80067f0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80067f4:	aa04      	add	r2, sp, #16
 80067f6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80067fa:	eea5 0b46 	vfms.f64	d0, d5, d6
 80067fe:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8006802:	a904      	add	r1, sp, #16
 8006804:	ee10 3a10 	vmov	r3, s0
 8006808:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800680c:	ee17 2a10 	vmov	r2, s14
 8006810:	1c73      	adds	r3, r6, #1
 8006812:	3418      	adds	r4, #24
 8006814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006818:	e762      	b.n	80066e0 <__kernel_rem_pio2+0x1f8>
 800681a:	bf00      	nop
 800681c:	f3af 8000 	nop.w
	...
 800682c:	3e700000 	.word	0x3e700000
 8006830:	00000000 	.word	0x00000000
 8006834:	41700000 	.word	0x41700000
 8006838:	08024000 	.word	0x08024000
 800683c:	08023fc0 	.word	0x08023fc0
 8006840:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8006844:	aa04      	add	r2, sp, #16
 8006846:	ee10 3a10 	vmov	r3, s0
 800684a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800684e:	4633      	mov	r3, r6
 8006850:	e746      	b.n	80066e0 <__kernel_rem_pio2+0x1f8>
 8006852:	a804      	add	r0, sp, #16
 8006854:	a968      	add	r1, sp, #416	; 0x1a0
 8006856:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800685a:	9000      	str	r0, [sp, #0]
 800685c:	ee07 0a90 	vmov	s15, r0
 8006860:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8006864:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006868:	3a01      	subs	r2, #1
 800686a:	ee27 7b00 	vmul.f64	d7, d7, d0
 800686e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8006872:	ed81 7b00 	vstr	d7, [r1]
 8006876:	e73d      	b.n	80066f4 <__kernel_rem_pio2+0x20c>
 8006878:	ecb6 5b02 	vldmia	r6!, {d5}
 800687c:	ecb4 6b02 	vldmia	r4!, {d6}
 8006880:	3201      	adds	r2, #1
 8006882:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006886:	454a      	cmp	r2, r9
 8006888:	dc01      	bgt.n	800688e <__kernel_rem_pio2+0x3a6>
 800688a:	4290      	cmp	r0, r2
 800688c:	daf4      	bge.n	8006878 <__kernel_rem_pio2+0x390>
 800688e:	aa40      	add	r2, sp, #256	; 0x100
 8006890:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006894:	ed82 7b00 	vstr	d7, [r2]
 8006898:	3901      	subs	r1, #1
 800689a:	3001      	adds	r0, #1
 800689c:	e72f      	b.n	80066fe <__kernel_rem_pio2+0x216>
 800689e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80068a0:	2a02      	cmp	r2, #2
 80068a2:	dc0a      	bgt.n	80068ba <__kernel_rem_pio2+0x3d2>
 80068a4:	2a00      	cmp	r2, #0
 80068a6:	dc5a      	bgt.n	800695e <__kernel_rem_pio2+0x476>
 80068a8:	d039      	beq.n	800691e <__kernel_rem_pio2+0x436>
 80068aa:	f008 0007 	and.w	r0, r8, #7
 80068ae:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 80068b2:	ecbd 8b06 	vpop	{d8-d10}
 80068b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ba:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80068bc:	2a03      	cmp	r2, #3
 80068be:	d1f4      	bne.n	80068aa <__kernel_rem_pio2+0x3c2>
 80068c0:	aa40      	add	r2, sp, #256	; 0x100
 80068c2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80068c6:	4611      	mov	r1, r2
 80068c8:	4618      	mov	r0, r3
 80068ca:	2800      	cmp	r0, #0
 80068cc:	f1a1 0108 	sub.w	r1, r1, #8
 80068d0:	dc52      	bgt.n	8006978 <__kernel_rem_pio2+0x490>
 80068d2:	4619      	mov	r1, r3
 80068d4:	2901      	cmp	r1, #1
 80068d6:	f1a2 0208 	sub.w	r2, r2, #8
 80068da:	dc5d      	bgt.n	8006998 <__kernel_rem_pio2+0x4b0>
 80068dc:	ed9f 7b40 	vldr	d7, [pc, #256]	; 80069e0 <__kernel_rem_pio2+0x4f8>
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	dc69      	bgt.n	80069b8 <__kernel_rem_pio2+0x4d0>
 80068e4:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 80068e8:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 80068ec:	2d00      	cmp	r5, #0
 80068ee:	d16c      	bne.n	80069ca <__kernel_rem_pio2+0x4e2>
 80068f0:	ed87 5b00 	vstr	d5, [r7]
 80068f4:	ed87 6b02 	vstr	d6, [r7, #8]
 80068f8:	ed87 7b04 	vstr	d7, [r7, #16]
 80068fc:	e7d5      	b.n	80068aa <__kernel_rem_pio2+0x3c2>
 80068fe:	aa40      	add	r2, sp, #256	; 0x100
 8006900:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006904:	ed92 6b00 	vldr	d6, [r2]
 8006908:	3b01      	subs	r3, #1
 800690a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800690e:	2b00      	cmp	r3, #0
 8006910:	daf5      	bge.n	80068fe <__kernel_rem_pio2+0x416>
 8006912:	b10d      	cbz	r5, 8006918 <__kernel_rem_pio2+0x430>
 8006914:	eeb1 7b47 	vneg.f64	d7, d7
 8006918:	ed87 7b00 	vstr	d7, [r7]
 800691c:	e7c5      	b.n	80068aa <__kernel_rem_pio2+0x3c2>
 800691e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80069e0 <__kernel_rem_pio2+0x4f8>
 8006922:	e7f4      	b.n	800690e <__kernel_rem_pio2+0x426>
 8006924:	a940      	add	r1, sp, #256	; 0x100
 8006926:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800692a:	ed91 7b00 	vldr	d7, [r1]
 800692e:	3a01      	subs	r2, #1
 8006930:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006934:	2a00      	cmp	r2, #0
 8006936:	daf5      	bge.n	8006924 <__kernel_rem_pio2+0x43c>
 8006938:	b1ad      	cbz	r5, 8006966 <__kernel_rem_pio2+0x47e>
 800693a:	eeb1 7b46 	vneg.f64	d7, d6
 800693e:	ed87 7b00 	vstr	d7, [r7]
 8006942:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8006946:	a942      	add	r1, sp, #264	; 0x108
 8006948:	2201      	movs	r2, #1
 800694a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800694e:	4293      	cmp	r3, r2
 8006950:	da0c      	bge.n	800696c <__kernel_rem_pio2+0x484>
 8006952:	b10d      	cbz	r5, 8006958 <__kernel_rem_pio2+0x470>
 8006954:	eeb1 7b47 	vneg.f64	d7, d7
 8006958:	ed87 7b02 	vstr	d7, [r7, #8]
 800695c:	e7a5      	b.n	80068aa <__kernel_rem_pio2+0x3c2>
 800695e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80069e0 <__kernel_rem_pio2+0x4f8>
 8006962:	461a      	mov	r2, r3
 8006964:	e7e6      	b.n	8006934 <__kernel_rem_pio2+0x44c>
 8006966:	eeb0 7b46 	vmov.f64	d7, d6
 800696a:	e7e8      	b.n	800693e <__kernel_rem_pio2+0x456>
 800696c:	ecb1 6b02 	vldmia	r1!, {d6}
 8006970:	3201      	adds	r2, #1
 8006972:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006976:	e7ea      	b.n	800694e <__kernel_rem_pio2+0x466>
 8006978:	ed91 7b00 	vldr	d7, [r1]
 800697c:	ed91 5b02 	vldr	d5, [r1, #8]
 8006980:	3801      	subs	r0, #1
 8006982:	ee37 6b05 	vadd.f64	d6, d7, d5
 8006986:	ee37 7b46 	vsub.f64	d7, d7, d6
 800698a:	ed81 6b00 	vstr	d6, [r1]
 800698e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8006992:	ed81 7b02 	vstr	d7, [r1, #8]
 8006996:	e798      	b.n	80068ca <__kernel_rem_pio2+0x3e2>
 8006998:	ed92 7b00 	vldr	d7, [r2]
 800699c:	ed92 5b02 	vldr	d5, [r2, #8]
 80069a0:	3901      	subs	r1, #1
 80069a2:	ee37 6b05 	vadd.f64	d6, d7, d5
 80069a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80069aa:	ed82 6b00 	vstr	d6, [r2]
 80069ae:	ee37 7b05 	vadd.f64	d7, d7, d5
 80069b2:	ed82 7b02 	vstr	d7, [r2, #8]
 80069b6:	e78d      	b.n	80068d4 <__kernel_rem_pio2+0x3ec>
 80069b8:	aa40      	add	r2, sp, #256	; 0x100
 80069ba:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80069be:	ed92 6b00 	vldr	d6, [r2]
 80069c2:	3b01      	subs	r3, #1
 80069c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80069c8:	e78a      	b.n	80068e0 <__kernel_rem_pio2+0x3f8>
 80069ca:	eeb1 5b45 	vneg.f64	d5, d5
 80069ce:	eeb1 6b46 	vneg.f64	d6, d6
 80069d2:	ed87 5b00 	vstr	d5, [r7]
 80069d6:	eeb1 7b47 	vneg.f64	d7, d7
 80069da:	ed87 6b02 	vstr	d6, [r7, #8]
 80069de:	e78b      	b.n	80068f8 <__kernel_rem_pio2+0x410>
	...

080069e8 <__kernel_sin>:
 80069e8:	ee10 3a90 	vmov	r3, s1
 80069ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069f0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80069f4:	da04      	bge.n	8006a00 <__kernel_sin+0x18>
 80069f6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80069fa:	ee17 3a90 	vmov	r3, s15
 80069fe:	b35b      	cbz	r3, 8006a58 <__kernel_sin+0x70>
 8006a00:	ee20 6b00 	vmul.f64	d6, d0, d0
 8006a04:	ee20 5b06 	vmul.f64	d5, d0, d6
 8006a08:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8006a60 <__kernel_sin+0x78>
 8006a0c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006a68 <__kernel_sin+0x80>
 8006a10:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006a14:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006a70 <__kernel_sin+0x88>
 8006a18:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006a1c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006a78 <__kernel_sin+0x90>
 8006a20:	eea7 4b06 	vfma.f64	d4, d7, d6
 8006a24:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006a80 <__kernel_sin+0x98>
 8006a28:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006a2c:	b930      	cbnz	r0, 8006a3c <__kernel_sin+0x54>
 8006a2e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006a88 <__kernel_sin+0xa0>
 8006a32:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006a36:	eea4 0b05 	vfma.f64	d0, d4, d5
 8006a3a:	4770      	bx	lr
 8006a3c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8006a40:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006a44:	eea1 7b04 	vfma.f64	d7, d1, d4
 8006a48:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8006a4c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8006a90 <__kernel_sin+0xa8>
 8006a50:	eea5 1b07 	vfma.f64	d1, d5, d7
 8006a54:	ee30 0b41 	vsub.f64	d0, d0, d1
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	f3af 8000 	nop.w
 8006a60:	5acfd57c 	.word	0x5acfd57c
 8006a64:	3de5d93a 	.word	0x3de5d93a
 8006a68:	8a2b9ceb 	.word	0x8a2b9ceb
 8006a6c:	be5ae5e6 	.word	0xbe5ae5e6
 8006a70:	57b1fe7d 	.word	0x57b1fe7d
 8006a74:	3ec71de3 	.word	0x3ec71de3
 8006a78:	19c161d5 	.word	0x19c161d5
 8006a7c:	bf2a01a0 	.word	0xbf2a01a0
 8006a80:	1110f8a6 	.word	0x1110f8a6
 8006a84:	3f811111 	.word	0x3f811111
 8006a88:	55555549 	.word	0x55555549
 8006a8c:	bfc55555 	.word	0xbfc55555
 8006a90:	55555549 	.word	0x55555549
 8006a94:	3fc55555 	.word	0x3fc55555

08006a98 <fabs>:
 8006a98:	ec51 0b10 	vmov	r0, r1, d0
 8006a9c:	ee10 2a10 	vmov	r2, s0
 8006aa0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006aa4:	ec43 2b10 	vmov	d0, r2, r3
 8006aa8:	4770      	bx	lr
 8006aaa:	0000      	movs	r0, r0
 8006aac:	0000      	movs	r0, r0
	...

08006ab0 <floor>:
 8006ab0:	ee10 1a90 	vmov	r1, s1
 8006ab4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006ab8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8006abc:	2b13      	cmp	r3, #19
 8006abe:	b530      	push	{r4, r5, lr}
 8006ac0:	ee10 0a10 	vmov	r0, s0
 8006ac4:	ee10 5a10 	vmov	r5, s0
 8006ac8:	dc31      	bgt.n	8006b2e <floor+0x7e>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	da15      	bge.n	8006afa <floor+0x4a>
 8006ace:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006b88 <floor+0xd8>
 8006ad2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006ad6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ade:	dd07      	ble.n	8006af0 <floor+0x40>
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	da4e      	bge.n	8006b82 <floor+0xd2>
 8006ae4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006ae8:	4318      	orrs	r0, r3
 8006aea:	d001      	beq.n	8006af0 <floor+0x40>
 8006aec:	4928      	ldr	r1, [pc, #160]	; (8006b90 <floor+0xe0>)
 8006aee:	2000      	movs	r0, #0
 8006af0:	460b      	mov	r3, r1
 8006af2:	4602      	mov	r2, r0
 8006af4:	ec43 2b10 	vmov	d0, r2, r3
 8006af8:	e020      	b.n	8006b3c <floor+0x8c>
 8006afa:	4a26      	ldr	r2, [pc, #152]	; (8006b94 <floor+0xe4>)
 8006afc:	411a      	asrs	r2, r3
 8006afe:	ea01 0402 	and.w	r4, r1, r2
 8006b02:	4304      	orrs	r4, r0
 8006b04:	d01a      	beq.n	8006b3c <floor+0x8c>
 8006b06:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8006b88 <floor+0xd8>
 8006b0a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006b0e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b16:	ddeb      	ble.n	8006af0 <floor+0x40>
 8006b18:	2900      	cmp	r1, #0
 8006b1a:	bfbe      	ittt	lt
 8006b1c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8006b20:	fa40 f303 	asrlt.w	r3, r0, r3
 8006b24:	18c9      	addlt	r1, r1, r3
 8006b26:	ea21 0102 	bic.w	r1, r1, r2
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	e7e0      	b.n	8006af0 <floor+0x40>
 8006b2e:	2b33      	cmp	r3, #51	; 0x33
 8006b30:	dd05      	ble.n	8006b3e <floor+0x8e>
 8006b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b36:	d101      	bne.n	8006b3c <floor+0x8c>
 8006b38:	ee30 0b00 	vadd.f64	d0, d0, d0
 8006b3c:	bd30      	pop	{r4, r5, pc}
 8006b3e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8006b42:	f04f 32ff 	mov.w	r2, #4294967295
 8006b46:	40e2      	lsrs	r2, r4
 8006b48:	4202      	tst	r2, r0
 8006b4a:	d0f7      	beq.n	8006b3c <floor+0x8c>
 8006b4c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8006b88 <floor+0xd8>
 8006b50:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006b54:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b5c:	ddc8      	ble.n	8006af0 <floor+0x40>
 8006b5e:	2900      	cmp	r1, #0
 8006b60:	da02      	bge.n	8006b68 <floor+0xb8>
 8006b62:	2b14      	cmp	r3, #20
 8006b64:	d103      	bne.n	8006b6e <floor+0xbe>
 8006b66:	3101      	adds	r1, #1
 8006b68:	ea20 0002 	bic.w	r0, r0, r2
 8006b6c:	e7c0      	b.n	8006af0 <floor+0x40>
 8006b6e:	2401      	movs	r4, #1
 8006b70:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006b74:	fa04 f303 	lsl.w	r3, r4, r3
 8006b78:	4418      	add	r0, r3
 8006b7a:	42a8      	cmp	r0, r5
 8006b7c:	bf38      	it	cc
 8006b7e:	1909      	addcc	r1, r1, r4
 8006b80:	e7f2      	b.n	8006b68 <floor+0xb8>
 8006b82:	2000      	movs	r0, #0
 8006b84:	4601      	mov	r1, r0
 8006b86:	e7b3      	b.n	8006af0 <floor+0x40>
 8006b88:	8800759c 	.word	0x8800759c
 8006b8c:	7e37e43c 	.word	0x7e37e43c
 8006b90:	bff00000 	.word	0xbff00000
 8006b94:	000fffff 	.word	0x000fffff

08006b98 <scalbn>:
 8006b98:	b082      	sub	sp, #8
 8006b9a:	ed8d 0b00 	vstr	d0, [sp]
 8006b9e:	9b01      	ldr	r3, [sp, #4]
 8006ba0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006ba4:	b9a2      	cbnz	r2, 8006bd0 <scalbn+0x38>
 8006ba6:	9a00      	ldr	r2, [sp, #0]
 8006ba8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bac:	4313      	orrs	r3, r2
 8006bae:	d03a      	beq.n	8006c26 <scalbn+0x8e>
 8006bb0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8006c88 <scalbn+0xf0>
 8006bb4:	4b40      	ldr	r3, [pc, #256]	; (8006cb8 <scalbn+0x120>)
 8006bb6:	ee20 7b07 	vmul.f64	d7, d0, d7
 8006bba:	4298      	cmp	r0, r3
 8006bbc:	ed8d 7b00 	vstr	d7, [sp]
 8006bc0:	da11      	bge.n	8006be6 <scalbn+0x4e>
 8006bc2:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8006c90 <scalbn+0xf8>
 8006bc6:	ed9d 6b00 	vldr	d6, [sp]
 8006bca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006bce:	e007      	b.n	8006be0 <scalbn+0x48>
 8006bd0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006bd4:	428a      	cmp	r2, r1
 8006bd6:	d10a      	bne.n	8006bee <scalbn+0x56>
 8006bd8:	ed9d 7b00 	vldr	d7, [sp]
 8006bdc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006be0:	ed8d 7b00 	vstr	d7, [sp]
 8006be4:	e01f      	b.n	8006c26 <scalbn+0x8e>
 8006be6:	9b01      	ldr	r3, [sp, #4]
 8006be8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006bec:	3a36      	subs	r2, #54	; 0x36
 8006bee:	4402      	add	r2, r0
 8006bf0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006bf4:	428a      	cmp	r2, r1
 8006bf6:	dd0a      	ble.n	8006c0e <scalbn+0x76>
 8006bf8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8006c98 <scalbn+0x100>
 8006bfc:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8006ca0 <scalbn+0x108>
 8006c00:	eeb0 6b47 	vmov.f64	d6, d7
 8006c04:	9b01      	ldr	r3, [sp, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	fe27 7b05 	vselge.f64	d7, d7, d5
 8006c0c:	e7dd      	b.n	8006bca <scalbn+0x32>
 8006c0e:	2a00      	cmp	r2, #0
 8006c10:	dd0d      	ble.n	8006c2e <scalbn+0x96>
 8006c12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c1a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c1e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006c22:	e9cd 0100 	strd	r0, r1, [sp]
 8006c26:	ed9d 0b00 	vldr	d0, [sp]
 8006c2a:	b002      	add	sp, #8
 8006c2c:	4770      	bx	lr
 8006c2e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006c32:	da18      	bge.n	8006c66 <scalbn+0xce>
 8006c34:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006c38:	4298      	cmp	r0, r3
 8006c3a:	9b01      	ldr	r3, [sp, #4]
 8006c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c40:	dd09      	ble.n	8006c56 <scalbn+0xbe>
 8006c42:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8006c98 <scalbn+0x100>
 8006c46:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8006ca0 <scalbn+0x108>
 8006c4a:	eeb0 6b47 	vmov.f64	d6, d7
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8006c54:	e7b9      	b.n	8006bca <scalbn+0x32>
 8006c56:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8006c90 <scalbn+0xf8>
 8006c5a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8006ca8 <scalbn+0x110>
 8006c5e:	eeb0 6b47 	vmov.f64	d6, d7
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	e7f4      	b.n	8006c50 <scalbn+0xb8>
 8006c66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c6e:	3236      	adds	r2, #54	; 0x36
 8006c70:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c74:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006c78:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8006cb0 <scalbn+0x118>
 8006c7c:	ec41 0b17 	vmov	d7, r0, r1
 8006c80:	e7a3      	b.n	8006bca <scalbn+0x32>
 8006c82:	bf00      	nop
 8006c84:	f3af 8000 	nop.w
 8006c88:	00000000 	.word	0x00000000
 8006c8c:	43500000 	.word	0x43500000
 8006c90:	c2f8f359 	.word	0xc2f8f359
 8006c94:	01a56e1f 	.word	0x01a56e1f
 8006c98:	8800759c 	.word	0x8800759c
 8006c9c:	7e37e43c 	.word	0x7e37e43c
 8006ca0:	8800759c 	.word	0x8800759c
 8006ca4:	fe37e43c 	.word	0xfe37e43c
 8006ca8:	c2f8f359 	.word	0xc2f8f359
 8006cac:	81a56e1f 	.word	0x81a56e1f
 8006cb0:	00000000 	.word	0x00000000
 8006cb4:	3c900000 	.word	0x3c900000
 8006cb8:	ffff3cb0 	.word	0xffff3cb0

08006cbc <nanf>:
 8006cbc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006cc4 <nanf+0x8>
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	7fc00000 	.word	0x7fc00000

08006cc8 <__errno>:
 8006cc8:	4b01      	ldr	r3, [pc, #4]	; (8006cd0 <__errno+0x8>)
 8006cca:	6818      	ldr	r0, [r3, #0]
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	240007f8 	.word	0x240007f8

08006cd4 <__libc_init_array>:
 8006cd4:	b570      	push	{r4, r5, r6, lr}
 8006cd6:	4d0d      	ldr	r5, [pc, #52]	; (8006d0c <__libc_init_array+0x38>)
 8006cd8:	4c0d      	ldr	r4, [pc, #52]	; (8006d10 <__libc_init_array+0x3c>)
 8006cda:	1b64      	subs	r4, r4, r5
 8006cdc:	10a4      	asrs	r4, r4, #2
 8006cde:	2600      	movs	r6, #0
 8006ce0:	42a6      	cmp	r6, r4
 8006ce2:	d109      	bne.n	8006cf8 <__libc_init_array+0x24>
 8006ce4:	4d0b      	ldr	r5, [pc, #44]	; (8006d14 <__libc_init_array+0x40>)
 8006ce6:	4c0c      	ldr	r4, [pc, #48]	; (8006d18 <__libc_init_array+0x44>)
 8006ce8:	f004 fbb6 	bl	800b458 <_init>
 8006cec:	1b64      	subs	r4, r4, r5
 8006cee:	10a4      	asrs	r4, r4, #2
 8006cf0:	2600      	movs	r6, #0
 8006cf2:	42a6      	cmp	r6, r4
 8006cf4:	d105      	bne.n	8006d02 <__libc_init_array+0x2e>
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}
 8006cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cfc:	4798      	blx	r3
 8006cfe:	3601      	adds	r6, #1
 8006d00:	e7ee      	b.n	8006ce0 <__libc_init_array+0xc>
 8006d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d06:	4798      	blx	r3
 8006d08:	3601      	adds	r6, #1
 8006d0a:	e7f2      	b.n	8006cf2 <__libc_init_array+0x1e>
 8006d0c:	080244cc 	.word	0x080244cc
 8006d10:	080244cc 	.word	0x080244cc
 8006d14:	080244cc 	.word	0x080244cc
 8006d18:	080244d0 	.word	0x080244d0

08006d1c <malloc>:
 8006d1c:	4b02      	ldr	r3, [pc, #8]	; (8006d28 <malloc+0xc>)
 8006d1e:	4601      	mov	r1, r0
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	f000 b869 	b.w	8006df8 <_malloc_r>
 8006d26:	bf00      	nop
 8006d28:	240007f8 	.word	0x240007f8

08006d2c <memcpy>:
 8006d2c:	440a      	add	r2, r1
 8006d2e:	4291      	cmp	r1, r2
 8006d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d34:	d100      	bne.n	8006d38 <memcpy+0xc>
 8006d36:	4770      	bx	lr
 8006d38:	b510      	push	{r4, lr}
 8006d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d42:	4291      	cmp	r1, r2
 8006d44:	d1f9      	bne.n	8006d3a <memcpy+0xe>
 8006d46:	bd10      	pop	{r4, pc}

08006d48 <memset>:
 8006d48:	4402      	add	r2, r0
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d100      	bne.n	8006d52 <memset+0xa>
 8006d50:	4770      	bx	lr
 8006d52:	f803 1b01 	strb.w	r1, [r3], #1
 8006d56:	e7f9      	b.n	8006d4c <memset+0x4>

08006d58 <_free_r>:
 8006d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d5a:	2900      	cmp	r1, #0
 8006d5c:	d048      	beq.n	8006df0 <_free_r+0x98>
 8006d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d62:	9001      	str	r0, [sp, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f1a1 0404 	sub.w	r4, r1, #4
 8006d6a:	bfb8      	it	lt
 8006d6c:	18e4      	addlt	r4, r4, r3
 8006d6e:	f002 ff2f 	bl	8009bd0 <__malloc_lock>
 8006d72:	4a20      	ldr	r2, [pc, #128]	; (8006df4 <_free_r+0x9c>)
 8006d74:	9801      	ldr	r0, [sp, #4]
 8006d76:	6813      	ldr	r3, [r2, #0]
 8006d78:	4615      	mov	r5, r2
 8006d7a:	b933      	cbnz	r3, 8006d8a <_free_r+0x32>
 8006d7c:	6063      	str	r3, [r4, #4]
 8006d7e:	6014      	str	r4, [r2, #0]
 8006d80:	b003      	add	sp, #12
 8006d82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d86:	f002 bf29 	b.w	8009bdc <__malloc_unlock>
 8006d8a:	42a3      	cmp	r3, r4
 8006d8c:	d90b      	bls.n	8006da6 <_free_r+0x4e>
 8006d8e:	6821      	ldr	r1, [r4, #0]
 8006d90:	1862      	adds	r2, r4, r1
 8006d92:	4293      	cmp	r3, r2
 8006d94:	bf04      	itt	eq
 8006d96:	681a      	ldreq	r2, [r3, #0]
 8006d98:	685b      	ldreq	r3, [r3, #4]
 8006d9a:	6063      	str	r3, [r4, #4]
 8006d9c:	bf04      	itt	eq
 8006d9e:	1852      	addeq	r2, r2, r1
 8006da0:	6022      	streq	r2, [r4, #0]
 8006da2:	602c      	str	r4, [r5, #0]
 8006da4:	e7ec      	b.n	8006d80 <_free_r+0x28>
 8006da6:	461a      	mov	r2, r3
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	b10b      	cbz	r3, 8006db0 <_free_r+0x58>
 8006dac:	42a3      	cmp	r3, r4
 8006dae:	d9fa      	bls.n	8006da6 <_free_r+0x4e>
 8006db0:	6811      	ldr	r1, [r2, #0]
 8006db2:	1855      	adds	r5, r2, r1
 8006db4:	42a5      	cmp	r5, r4
 8006db6:	d10b      	bne.n	8006dd0 <_free_r+0x78>
 8006db8:	6824      	ldr	r4, [r4, #0]
 8006dba:	4421      	add	r1, r4
 8006dbc:	1854      	adds	r4, r2, r1
 8006dbe:	42a3      	cmp	r3, r4
 8006dc0:	6011      	str	r1, [r2, #0]
 8006dc2:	d1dd      	bne.n	8006d80 <_free_r+0x28>
 8006dc4:	681c      	ldr	r4, [r3, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	6053      	str	r3, [r2, #4]
 8006dca:	4421      	add	r1, r4
 8006dcc:	6011      	str	r1, [r2, #0]
 8006dce:	e7d7      	b.n	8006d80 <_free_r+0x28>
 8006dd0:	d902      	bls.n	8006dd8 <_free_r+0x80>
 8006dd2:	230c      	movs	r3, #12
 8006dd4:	6003      	str	r3, [r0, #0]
 8006dd6:	e7d3      	b.n	8006d80 <_free_r+0x28>
 8006dd8:	6825      	ldr	r5, [r4, #0]
 8006dda:	1961      	adds	r1, r4, r5
 8006ddc:	428b      	cmp	r3, r1
 8006dde:	bf04      	itt	eq
 8006de0:	6819      	ldreq	r1, [r3, #0]
 8006de2:	685b      	ldreq	r3, [r3, #4]
 8006de4:	6063      	str	r3, [r4, #4]
 8006de6:	bf04      	itt	eq
 8006de8:	1949      	addeq	r1, r1, r5
 8006dea:	6021      	streq	r1, [r4, #0]
 8006dec:	6054      	str	r4, [r2, #4]
 8006dee:	e7c7      	b.n	8006d80 <_free_r+0x28>
 8006df0:	b003      	add	sp, #12
 8006df2:	bd30      	pop	{r4, r5, pc}
 8006df4:	24000b40 	.word	0x24000b40

08006df8 <_malloc_r>:
 8006df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfa:	1ccd      	adds	r5, r1, #3
 8006dfc:	f025 0503 	bic.w	r5, r5, #3
 8006e00:	3508      	adds	r5, #8
 8006e02:	2d0c      	cmp	r5, #12
 8006e04:	bf38      	it	cc
 8006e06:	250c      	movcc	r5, #12
 8006e08:	2d00      	cmp	r5, #0
 8006e0a:	4606      	mov	r6, r0
 8006e0c:	db01      	blt.n	8006e12 <_malloc_r+0x1a>
 8006e0e:	42a9      	cmp	r1, r5
 8006e10:	d903      	bls.n	8006e1a <_malloc_r+0x22>
 8006e12:	230c      	movs	r3, #12
 8006e14:	6033      	str	r3, [r6, #0]
 8006e16:	2000      	movs	r0, #0
 8006e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e1a:	f002 fed9 	bl	8009bd0 <__malloc_lock>
 8006e1e:	4921      	ldr	r1, [pc, #132]	; (8006ea4 <_malloc_r+0xac>)
 8006e20:	680a      	ldr	r2, [r1, #0]
 8006e22:	4614      	mov	r4, r2
 8006e24:	b99c      	cbnz	r4, 8006e4e <_malloc_r+0x56>
 8006e26:	4f20      	ldr	r7, [pc, #128]	; (8006ea8 <_malloc_r+0xb0>)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	b923      	cbnz	r3, 8006e36 <_malloc_r+0x3e>
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	4630      	mov	r0, r6
 8006e30:	f000 fe84 	bl	8007b3c <_sbrk_r>
 8006e34:	6038      	str	r0, [r7, #0]
 8006e36:	4629      	mov	r1, r5
 8006e38:	4630      	mov	r0, r6
 8006e3a:	f000 fe7f 	bl	8007b3c <_sbrk_r>
 8006e3e:	1c43      	adds	r3, r0, #1
 8006e40:	d123      	bne.n	8006e8a <_malloc_r+0x92>
 8006e42:	230c      	movs	r3, #12
 8006e44:	6033      	str	r3, [r6, #0]
 8006e46:	4630      	mov	r0, r6
 8006e48:	f002 fec8 	bl	8009bdc <__malloc_unlock>
 8006e4c:	e7e3      	b.n	8006e16 <_malloc_r+0x1e>
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	1b5b      	subs	r3, r3, r5
 8006e52:	d417      	bmi.n	8006e84 <_malloc_r+0x8c>
 8006e54:	2b0b      	cmp	r3, #11
 8006e56:	d903      	bls.n	8006e60 <_malloc_r+0x68>
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	441c      	add	r4, r3
 8006e5c:	6025      	str	r5, [r4, #0]
 8006e5e:	e004      	b.n	8006e6a <_malloc_r+0x72>
 8006e60:	6863      	ldr	r3, [r4, #4]
 8006e62:	42a2      	cmp	r2, r4
 8006e64:	bf0c      	ite	eq
 8006e66:	600b      	streq	r3, [r1, #0]
 8006e68:	6053      	strne	r3, [r2, #4]
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	f002 feb6 	bl	8009bdc <__malloc_unlock>
 8006e70:	f104 000b 	add.w	r0, r4, #11
 8006e74:	1d23      	adds	r3, r4, #4
 8006e76:	f020 0007 	bic.w	r0, r0, #7
 8006e7a:	1ac2      	subs	r2, r0, r3
 8006e7c:	d0cc      	beq.n	8006e18 <_malloc_r+0x20>
 8006e7e:	1a1b      	subs	r3, r3, r0
 8006e80:	50a3      	str	r3, [r4, r2]
 8006e82:	e7c9      	b.n	8006e18 <_malloc_r+0x20>
 8006e84:	4622      	mov	r2, r4
 8006e86:	6864      	ldr	r4, [r4, #4]
 8006e88:	e7cc      	b.n	8006e24 <_malloc_r+0x2c>
 8006e8a:	1cc4      	adds	r4, r0, #3
 8006e8c:	f024 0403 	bic.w	r4, r4, #3
 8006e90:	42a0      	cmp	r0, r4
 8006e92:	d0e3      	beq.n	8006e5c <_malloc_r+0x64>
 8006e94:	1a21      	subs	r1, r4, r0
 8006e96:	4630      	mov	r0, r6
 8006e98:	f000 fe50 	bl	8007b3c <_sbrk_r>
 8006e9c:	3001      	adds	r0, #1
 8006e9e:	d1dd      	bne.n	8006e5c <_malloc_r+0x64>
 8006ea0:	e7cf      	b.n	8006e42 <_malloc_r+0x4a>
 8006ea2:	bf00      	nop
 8006ea4:	24000b40 	.word	0x24000b40
 8006ea8:	24000b44 	.word	0x24000b44

08006eac <__cvt>:
 8006eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eae:	ed2d 8b02 	vpush	{d8}
 8006eb2:	eeb0 8b40 	vmov.f64	d8, d0
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	4617      	mov	r7, r2
 8006eba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006ebc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006ebe:	ee18 2a90 	vmov	r2, s17
 8006ec2:	f025 0520 	bic.w	r5, r5, #32
 8006ec6:	2a00      	cmp	r2, #0
 8006ec8:	bfb6      	itet	lt
 8006eca:	222d      	movlt	r2, #45	; 0x2d
 8006ecc:	2200      	movge	r2, #0
 8006ece:	eeb1 8b40 	vneglt.f64	d8, d0
 8006ed2:	2d46      	cmp	r5, #70	; 0x46
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	701a      	strb	r2, [r3, #0]
 8006ed8:	d004      	beq.n	8006ee4 <__cvt+0x38>
 8006eda:	2d45      	cmp	r5, #69	; 0x45
 8006edc:	d100      	bne.n	8006ee0 <__cvt+0x34>
 8006ede:	3401      	adds	r4, #1
 8006ee0:	2102      	movs	r1, #2
 8006ee2:	e000      	b.n	8006ee6 <__cvt+0x3a>
 8006ee4:	2103      	movs	r1, #3
 8006ee6:	ab03      	add	r3, sp, #12
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	ab02      	add	r3, sp, #8
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	4622      	mov	r2, r4
 8006ef0:	4633      	mov	r3, r6
 8006ef2:	eeb0 0b48 	vmov.f64	d0, d8
 8006ef6:	f001 fd63 	bl	80089c0 <_dtoa_r>
 8006efa:	2d47      	cmp	r5, #71	; 0x47
 8006efc:	d109      	bne.n	8006f12 <__cvt+0x66>
 8006efe:	07fb      	lsls	r3, r7, #31
 8006f00:	d407      	bmi.n	8006f12 <__cvt+0x66>
 8006f02:	9b03      	ldr	r3, [sp, #12]
 8006f04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f06:	1a1b      	subs	r3, r3, r0
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	b005      	add	sp, #20
 8006f0c:	ecbd 8b02 	vpop	{d8}
 8006f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f12:	2d46      	cmp	r5, #70	; 0x46
 8006f14:	eb00 0204 	add.w	r2, r0, r4
 8006f18:	d10c      	bne.n	8006f34 <__cvt+0x88>
 8006f1a:	7803      	ldrb	r3, [r0, #0]
 8006f1c:	2b30      	cmp	r3, #48	; 0x30
 8006f1e:	d107      	bne.n	8006f30 <__cvt+0x84>
 8006f20:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f28:	bf1c      	itt	ne
 8006f2a:	f1c4 0401 	rsbne	r4, r4, #1
 8006f2e:	6034      	strne	r4, [r6, #0]
 8006f30:	6833      	ldr	r3, [r6, #0]
 8006f32:	441a      	add	r2, r3
 8006f34:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f3c:	bf08      	it	eq
 8006f3e:	9203      	streq	r2, [sp, #12]
 8006f40:	2130      	movs	r1, #48	; 0x30
 8006f42:	9b03      	ldr	r3, [sp, #12]
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d2dc      	bcs.n	8006f02 <__cvt+0x56>
 8006f48:	1c5c      	adds	r4, r3, #1
 8006f4a:	9403      	str	r4, [sp, #12]
 8006f4c:	7019      	strb	r1, [r3, #0]
 8006f4e:	e7f8      	b.n	8006f42 <__cvt+0x96>

08006f50 <__exponent>:
 8006f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f52:	4603      	mov	r3, r0
 8006f54:	2900      	cmp	r1, #0
 8006f56:	bfb8      	it	lt
 8006f58:	4249      	neglt	r1, r1
 8006f5a:	f803 2b02 	strb.w	r2, [r3], #2
 8006f5e:	bfb4      	ite	lt
 8006f60:	222d      	movlt	r2, #45	; 0x2d
 8006f62:	222b      	movge	r2, #43	; 0x2b
 8006f64:	2909      	cmp	r1, #9
 8006f66:	7042      	strb	r2, [r0, #1]
 8006f68:	dd2a      	ble.n	8006fc0 <__exponent+0x70>
 8006f6a:	f10d 0407 	add.w	r4, sp, #7
 8006f6e:	46a4      	mov	ip, r4
 8006f70:	270a      	movs	r7, #10
 8006f72:	46a6      	mov	lr, r4
 8006f74:	460a      	mov	r2, r1
 8006f76:	fb91 f6f7 	sdiv	r6, r1, r7
 8006f7a:	fb07 1516 	mls	r5, r7, r6, r1
 8006f7e:	3530      	adds	r5, #48	; 0x30
 8006f80:	2a63      	cmp	r2, #99	; 0x63
 8006f82:	f104 34ff 	add.w	r4, r4, #4294967295
 8006f86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	dcf1      	bgt.n	8006f72 <__exponent+0x22>
 8006f8e:	3130      	adds	r1, #48	; 0x30
 8006f90:	f1ae 0502 	sub.w	r5, lr, #2
 8006f94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006f98:	1c44      	adds	r4, r0, #1
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	4561      	cmp	r1, ip
 8006f9e:	d30a      	bcc.n	8006fb6 <__exponent+0x66>
 8006fa0:	f10d 0209 	add.w	r2, sp, #9
 8006fa4:	eba2 020e 	sub.w	r2, r2, lr
 8006fa8:	4565      	cmp	r5, ip
 8006faa:	bf88      	it	hi
 8006fac:	2200      	movhi	r2, #0
 8006fae:	4413      	add	r3, r2
 8006fb0:	1a18      	subs	r0, r3, r0
 8006fb2:	b003      	add	sp, #12
 8006fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006fbe:	e7ed      	b.n	8006f9c <__exponent+0x4c>
 8006fc0:	2330      	movs	r3, #48	; 0x30
 8006fc2:	3130      	adds	r1, #48	; 0x30
 8006fc4:	7083      	strb	r3, [r0, #2]
 8006fc6:	70c1      	strb	r1, [r0, #3]
 8006fc8:	1d03      	adds	r3, r0, #4
 8006fca:	e7f1      	b.n	8006fb0 <__exponent+0x60>
 8006fcc:	0000      	movs	r0, r0
	...

08006fd0 <_printf_float>:
 8006fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd4:	b08b      	sub	sp, #44	; 0x2c
 8006fd6:	460c      	mov	r4, r1
 8006fd8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006fdc:	4616      	mov	r6, r2
 8006fde:	461f      	mov	r7, r3
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	f002 fddf 	bl	8009ba4 <_localeconv_r>
 8006fe6:	f8d0 b000 	ldr.w	fp, [r0]
 8006fea:	4658      	mov	r0, fp
 8006fec:	f7f9 f978 	bl	80002e0 <strlen>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	9308      	str	r3, [sp, #32]
 8006ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ff8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006ffc:	6822      	ldr	r2, [r4, #0]
 8006ffe:	3307      	adds	r3, #7
 8007000:	f023 0307 	bic.w	r3, r3, #7
 8007004:	f103 0108 	add.w	r1, r3, #8
 8007008:	f8c8 1000 	str.w	r1, [r8]
 800700c:	4682      	mov	sl, r0
 800700e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007012:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007016:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007278 <_printf_float+0x2a8>
 800701a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800701e:	eeb0 6bc0 	vabs.f64	d6, d0
 8007022:	eeb4 6b47 	vcmp.f64	d6, d7
 8007026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800702a:	dd24      	ble.n	8007076 <_printf_float+0xa6>
 800702c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007034:	d502      	bpl.n	800703c <_printf_float+0x6c>
 8007036:	232d      	movs	r3, #45	; 0x2d
 8007038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800703c:	4b90      	ldr	r3, [pc, #576]	; (8007280 <_printf_float+0x2b0>)
 800703e:	4891      	ldr	r0, [pc, #580]	; (8007284 <_printf_float+0x2b4>)
 8007040:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007044:	bf94      	ite	ls
 8007046:	4698      	movls	r8, r3
 8007048:	4680      	movhi	r8, r0
 800704a:	2303      	movs	r3, #3
 800704c:	6123      	str	r3, [r4, #16]
 800704e:	f022 0204 	bic.w	r2, r2, #4
 8007052:	2300      	movs	r3, #0
 8007054:	6022      	str	r2, [r4, #0]
 8007056:	9304      	str	r3, [sp, #16]
 8007058:	9700      	str	r7, [sp, #0]
 800705a:	4633      	mov	r3, r6
 800705c:	aa09      	add	r2, sp, #36	; 0x24
 800705e:	4621      	mov	r1, r4
 8007060:	4628      	mov	r0, r5
 8007062:	f000 f9d3 	bl	800740c <_printf_common>
 8007066:	3001      	adds	r0, #1
 8007068:	f040 808a 	bne.w	8007180 <_printf_float+0x1b0>
 800706c:	f04f 30ff 	mov.w	r0, #4294967295
 8007070:	b00b      	add	sp, #44	; 0x2c
 8007072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007076:	eeb4 0b40 	vcmp.f64	d0, d0
 800707a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800707e:	d709      	bvc.n	8007094 <_printf_float+0xc4>
 8007080:	ee10 3a90 	vmov	r3, s1
 8007084:	2b00      	cmp	r3, #0
 8007086:	bfbc      	itt	lt
 8007088:	232d      	movlt	r3, #45	; 0x2d
 800708a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800708e:	487e      	ldr	r0, [pc, #504]	; (8007288 <_printf_float+0x2b8>)
 8007090:	4b7e      	ldr	r3, [pc, #504]	; (800728c <_printf_float+0x2bc>)
 8007092:	e7d5      	b.n	8007040 <_printf_float+0x70>
 8007094:	6863      	ldr	r3, [r4, #4]
 8007096:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800709a:	9104      	str	r1, [sp, #16]
 800709c:	1c59      	adds	r1, r3, #1
 800709e:	d13c      	bne.n	800711a <_printf_float+0x14a>
 80070a0:	2306      	movs	r3, #6
 80070a2:	6063      	str	r3, [r4, #4]
 80070a4:	2300      	movs	r3, #0
 80070a6:	9303      	str	r3, [sp, #12]
 80070a8:	ab08      	add	r3, sp, #32
 80070aa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80070ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070b2:	ab07      	add	r3, sp, #28
 80070b4:	6861      	ldr	r1, [r4, #4]
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	6022      	str	r2, [r4, #0]
 80070ba:	f10d 031b 	add.w	r3, sp, #27
 80070be:	4628      	mov	r0, r5
 80070c0:	f7ff fef4 	bl	8006eac <__cvt>
 80070c4:	9b04      	ldr	r3, [sp, #16]
 80070c6:	9907      	ldr	r1, [sp, #28]
 80070c8:	2b47      	cmp	r3, #71	; 0x47
 80070ca:	4680      	mov	r8, r0
 80070cc:	d108      	bne.n	80070e0 <_printf_float+0x110>
 80070ce:	1cc8      	adds	r0, r1, #3
 80070d0:	db02      	blt.n	80070d8 <_printf_float+0x108>
 80070d2:	6863      	ldr	r3, [r4, #4]
 80070d4:	4299      	cmp	r1, r3
 80070d6:	dd41      	ble.n	800715c <_printf_float+0x18c>
 80070d8:	f1a9 0902 	sub.w	r9, r9, #2
 80070dc:	fa5f f989 	uxtb.w	r9, r9
 80070e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80070e4:	d820      	bhi.n	8007128 <_printf_float+0x158>
 80070e6:	3901      	subs	r1, #1
 80070e8:	464a      	mov	r2, r9
 80070ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80070ee:	9107      	str	r1, [sp, #28]
 80070f0:	f7ff ff2e 	bl	8006f50 <__exponent>
 80070f4:	9a08      	ldr	r2, [sp, #32]
 80070f6:	9004      	str	r0, [sp, #16]
 80070f8:	1813      	adds	r3, r2, r0
 80070fa:	2a01      	cmp	r2, #1
 80070fc:	6123      	str	r3, [r4, #16]
 80070fe:	dc02      	bgt.n	8007106 <_printf_float+0x136>
 8007100:	6822      	ldr	r2, [r4, #0]
 8007102:	07d2      	lsls	r2, r2, #31
 8007104:	d501      	bpl.n	800710a <_printf_float+0x13a>
 8007106:	3301      	adds	r3, #1
 8007108:	6123      	str	r3, [r4, #16]
 800710a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d0a2      	beq.n	8007058 <_printf_float+0x88>
 8007112:	232d      	movs	r3, #45	; 0x2d
 8007114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007118:	e79e      	b.n	8007058 <_printf_float+0x88>
 800711a:	9904      	ldr	r1, [sp, #16]
 800711c:	2947      	cmp	r1, #71	; 0x47
 800711e:	d1c1      	bne.n	80070a4 <_printf_float+0xd4>
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1bf      	bne.n	80070a4 <_printf_float+0xd4>
 8007124:	2301      	movs	r3, #1
 8007126:	e7bc      	b.n	80070a2 <_printf_float+0xd2>
 8007128:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800712c:	d118      	bne.n	8007160 <_printf_float+0x190>
 800712e:	2900      	cmp	r1, #0
 8007130:	6863      	ldr	r3, [r4, #4]
 8007132:	dd0b      	ble.n	800714c <_printf_float+0x17c>
 8007134:	6121      	str	r1, [r4, #16]
 8007136:	b913      	cbnz	r3, 800713e <_printf_float+0x16e>
 8007138:	6822      	ldr	r2, [r4, #0]
 800713a:	07d0      	lsls	r0, r2, #31
 800713c:	d502      	bpl.n	8007144 <_printf_float+0x174>
 800713e:	3301      	adds	r3, #1
 8007140:	440b      	add	r3, r1
 8007142:	6123      	str	r3, [r4, #16]
 8007144:	2300      	movs	r3, #0
 8007146:	65a1      	str	r1, [r4, #88]	; 0x58
 8007148:	9304      	str	r3, [sp, #16]
 800714a:	e7de      	b.n	800710a <_printf_float+0x13a>
 800714c:	b913      	cbnz	r3, 8007154 <_printf_float+0x184>
 800714e:	6822      	ldr	r2, [r4, #0]
 8007150:	07d2      	lsls	r2, r2, #31
 8007152:	d501      	bpl.n	8007158 <_printf_float+0x188>
 8007154:	3302      	adds	r3, #2
 8007156:	e7f4      	b.n	8007142 <_printf_float+0x172>
 8007158:	2301      	movs	r3, #1
 800715a:	e7f2      	b.n	8007142 <_printf_float+0x172>
 800715c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007160:	9b08      	ldr	r3, [sp, #32]
 8007162:	4299      	cmp	r1, r3
 8007164:	db05      	blt.n	8007172 <_printf_float+0x1a2>
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	6121      	str	r1, [r4, #16]
 800716a:	07d8      	lsls	r0, r3, #31
 800716c:	d5ea      	bpl.n	8007144 <_printf_float+0x174>
 800716e:	1c4b      	adds	r3, r1, #1
 8007170:	e7e7      	b.n	8007142 <_printf_float+0x172>
 8007172:	2900      	cmp	r1, #0
 8007174:	bfd4      	ite	le
 8007176:	f1c1 0202 	rsble	r2, r1, #2
 800717a:	2201      	movgt	r2, #1
 800717c:	4413      	add	r3, r2
 800717e:	e7e0      	b.n	8007142 <_printf_float+0x172>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	055a      	lsls	r2, r3, #21
 8007184:	d407      	bmi.n	8007196 <_printf_float+0x1c6>
 8007186:	6923      	ldr	r3, [r4, #16]
 8007188:	4642      	mov	r2, r8
 800718a:	4631      	mov	r1, r6
 800718c:	4628      	mov	r0, r5
 800718e:	47b8      	blx	r7
 8007190:	3001      	adds	r0, #1
 8007192:	d12a      	bne.n	80071ea <_printf_float+0x21a>
 8007194:	e76a      	b.n	800706c <_printf_float+0x9c>
 8007196:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800719a:	f240 80e2 	bls.w	8007362 <_printf_float+0x392>
 800719e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80071a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80071a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071aa:	d133      	bne.n	8007214 <_printf_float+0x244>
 80071ac:	4a38      	ldr	r2, [pc, #224]	; (8007290 <_printf_float+0x2c0>)
 80071ae:	2301      	movs	r3, #1
 80071b0:	4631      	mov	r1, r6
 80071b2:	4628      	mov	r0, r5
 80071b4:	47b8      	blx	r7
 80071b6:	3001      	adds	r0, #1
 80071b8:	f43f af58 	beq.w	800706c <_printf_float+0x9c>
 80071bc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	db02      	blt.n	80071ca <_printf_float+0x1fa>
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	07d8      	lsls	r0, r3, #31
 80071c8:	d50f      	bpl.n	80071ea <_printf_float+0x21a>
 80071ca:	4653      	mov	r3, sl
 80071cc:	465a      	mov	r2, fp
 80071ce:	4631      	mov	r1, r6
 80071d0:	4628      	mov	r0, r5
 80071d2:	47b8      	blx	r7
 80071d4:	3001      	adds	r0, #1
 80071d6:	f43f af49 	beq.w	800706c <_printf_float+0x9c>
 80071da:	f04f 0800 	mov.w	r8, #0
 80071de:	f104 091a 	add.w	r9, r4, #26
 80071e2:	9b08      	ldr	r3, [sp, #32]
 80071e4:	3b01      	subs	r3, #1
 80071e6:	4543      	cmp	r3, r8
 80071e8:	dc09      	bgt.n	80071fe <_printf_float+0x22e>
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	079b      	lsls	r3, r3, #30
 80071ee:	f100 8108 	bmi.w	8007402 <_printf_float+0x432>
 80071f2:	68e0      	ldr	r0, [r4, #12]
 80071f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f6:	4298      	cmp	r0, r3
 80071f8:	bfb8      	it	lt
 80071fa:	4618      	movlt	r0, r3
 80071fc:	e738      	b.n	8007070 <_printf_float+0xa0>
 80071fe:	2301      	movs	r3, #1
 8007200:	464a      	mov	r2, r9
 8007202:	4631      	mov	r1, r6
 8007204:	4628      	mov	r0, r5
 8007206:	47b8      	blx	r7
 8007208:	3001      	adds	r0, #1
 800720a:	f43f af2f 	beq.w	800706c <_printf_float+0x9c>
 800720e:	f108 0801 	add.w	r8, r8, #1
 8007212:	e7e6      	b.n	80071e2 <_printf_float+0x212>
 8007214:	9b07      	ldr	r3, [sp, #28]
 8007216:	2b00      	cmp	r3, #0
 8007218:	dc3c      	bgt.n	8007294 <_printf_float+0x2c4>
 800721a:	4a1d      	ldr	r2, [pc, #116]	; (8007290 <_printf_float+0x2c0>)
 800721c:	2301      	movs	r3, #1
 800721e:	4631      	mov	r1, r6
 8007220:	4628      	mov	r0, r5
 8007222:	47b8      	blx	r7
 8007224:	3001      	adds	r0, #1
 8007226:	f43f af21 	beq.w	800706c <_printf_float+0x9c>
 800722a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800722e:	4313      	orrs	r3, r2
 8007230:	d102      	bne.n	8007238 <_printf_float+0x268>
 8007232:	6823      	ldr	r3, [r4, #0]
 8007234:	07d9      	lsls	r1, r3, #31
 8007236:	d5d8      	bpl.n	80071ea <_printf_float+0x21a>
 8007238:	4653      	mov	r3, sl
 800723a:	465a      	mov	r2, fp
 800723c:	4631      	mov	r1, r6
 800723e:	4628      	mov	r0, r5
 8007240:	47b8      	blx	r7
 8007242:	3001      	adds	r0, #1
 8007244:	f43f af12 	beq.w	800706c <_printf_float+0x9c>
 8007248:	f04f 0900 	mov.w	r9, #0
 800724c:	f104 0a1a 	add.w	sl, r4, #26
 8007250:	9b07      	ldr	r3, [sp, #28]
 8007252:	425b      	negs	r3, r3
 8007254:	454b      	cmp	r3, r9
 8007256:	dc01      	bgt.n	800725c <_printf_float+0x28c>
 8007258:	9b08      	ldr	r3, [sp, #32]
 800725a:	e795      	b.n	8007188 <_printf_float+0x1b8>
 800725c:	2301      	movs	r3, #1
 800725e:	4652      	mov	r2, sl
 8007260:	4631      	mov	r1, r6
 8007262:	4628      	mov	r0, r5
 8007264:	47b8      	blx	r7
 8007266:	3001      	adds	r0, #1
 8007268:	f43f af00 	beq.w	800706c <_printf_float+0x9c>
 800726c:	f109 0901 	add.w	r9, r9, #1
 8007270:	e7ee      	b.n	8007250 <_printf_float+0x280>
 8007272:	bf00      	nop
 8007274:	f3af 8000 	nop.w
 8007278:	ffffffff 	.word	0xffffffff
 800727c:	7fefffff 	.word	0x7fefffff
 8007280:	08024014 	.word	0x08024014
 8007284:	08024018 	.word	0x08024018
 8007288:	08024020 	.word	0x08024020
 800728c:	0802401c 	.word	0x0802401c
 8007290:	08024024 	.word	0x08024024
 8007294:	9a08      	ldr	r2, [sp, #32]
 8007296:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007298:	429a      	cmp	r2, r3
 800729a:	bfa8      	it	ge
 800729c:	461a      	movge	r2, r3
 800729e:	2a00      	cmp	r2, #0
 80072a0:	4691      	mov	r9, r2
 80072a2:	dc38      	bgt.n	8007316 <_printf_float+0x346>
 80072a4:	2300      	movs	r3, #0
 80072a6:	9305      	str	r3, [sp, #20]
 80072a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072ac:	f104 021a 	add.w	r2, r4, #26
 80072b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072b2:	9905      	ldr	r1, [sp, #20]
 80072b4:	9304      	str	r3, [sp, #16]
 80072b6:	eba3 0309 	sub.w	r3, r3, r9
 80072ba:	428b      	cmp	r3, r1
 80072bc:	dc33      	bgt.n	8007326 <_printf_float+0x356>
 80072be:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	db3c      	blt.n	8007340 <_printf_float+0x370>
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	07da      	lsls	r2, r3, #31
 80072ca:	d439      	bmi.n	8007340 <_printf_float+0x370>
 80072cc:	9a08      	ldr	r2, [sp, #32]
 80072ce:	9b04      	ldr	r3, [sp, #16]
 80072d0:	9907      	ldr	r1, [sp, #28]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	eba2 0901 	sub.w	r9, r2, r1
 80072d8:	4599      	cmp	r9, r3
 80072da:	bfa8      	it	ge
 80072dc:	4699      	movge	r9, r3
 80072de:	f1b9 0f00 	cmp.w	r9, #0
 80072e2:	dc35      	bgt.n	8007350 <_printf_float+0x380>
 80072e4:	f04f 0800 	mov.w	r8, #0
 80072e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072ec:	f104 0a1a 	add.w	sl, r4, #26
 80072f0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80072f4:	1a9b      	subs	r3, r3, r2
 80072f6:	eba3 0309 	sub.w	r3, r3, r9
 80072fa:	4543      	cmp	r3, r8
 80072fc:	f77f af75 	ble.w	80071ea <_printf_float+0x21a>
 8007300:	2301      	movs	r3, #1
 8007302:	4652      	mov	r2, sl
 8007304:	4631      	mov	r1, r6
 8007306:	4628      	mov	r0, r5
 8007308:	47b8      	blx	r7
 800730a:	3001      	adds	r0, #1
 800730c:	f43f aeae 	beq.w	800706c <_printf_float+0x9c>
 8007310:	f108 0801 	add.w	r8, r8, #1
 8007314:	e7ec      	b.n	80072f0 <_printf_float+0x320>
 8007316:	4613      	mov	r3, r2
 8007318:	4631      	mov	r1, r6
 800731a:	4642      	mov	r2, r8
 800731c:	4628      	mov	r0, r5
 800731e:	47b8      	blx	r7
 8007320:	3001      	adds	r0, #1
 8007322:	d1bf      	bne.n	80072a4 <_printf_float+0x2d4>
 8007324:	e6a2      	b.n	800706c <_printf_float+0x9c>
 8007326:	2301      	movs	r3, #1
 8007328:	4631      	mov	r1, r6
 800732a:	4628      	mov	r0, r5
 800732c:	9204      	str	r2, [sp, #16]
 800732e:	47b8      	blx	r7
 8007330:	3001      	adds	r0, #1
 8007332:	f43f ae9b 	beq.w	800706c <_printf_float+0x9c>
 8007336:	9b05      	ldr	r3, [sp, #20]
 8007338:	9a04      	ldr	r2, [sp, #16]
 800733a:	3301      	adds	r3, #1
 800733c:	9305      	str	r3, [sp, #20]
 800733e:	e7b7      	b.n	80072b0 <_printf_float+0x2e0>
 8007340:	4653      	mov	r3, sl
 8007342:	465a      	mov	r2, fp
 8007344:	4631      	mov	r1, r6
 8007346:	4628      	mov	r0, r5
 8007348:	47b8      	blx	r7
 800734a:	3001      	adds	r0, #1
 800734c:	d1be      	bne.n	80072cc <_printf_float+0x2fc>
 800734e:	e68d      	b.n	800706c <_printf_float+0x9c>
 8007350:	9a04      	ldr	r2, [sp, #16]
 8007352:	464b      	mov	r3, r9
 8007354:	4442      	add	r2, r8
 8007356:	4631      	mov	r1, r6
 8007358:	4628      	mov	r0, r5
 800735a:	47b8      	blx	r7
 800735c:	3001      	adds	r0, #1
 800735e:	d1c1      	bne.n	80072e4 <_printf_float+0x314>
 8007360:	e684      	b.n	800706c <_printf_float+0x9c>
 8007362:	9a08      	ldr	r2, [sp, #32]
 8007364:	2a01      	cmp	r2, #1
 8007366:	dc01      	bgt.n	800736c <_printf_float+0x39c>
 8007368:	07db      	lsls	r3, r3, #31
 800736a:	d537      	bpl.n	80073dc <_printf_float+0x40c>
 800736c:	2301      	movs	r3, #1
 800736e:	4642      	mov	r2, r8
 8007370:	4631      	mov	r1, r6
 8007372:	4628      	mov	r0, r5
 8007374:	47b8      	blx	r7
 8007376:	3001      	adds	r0, #1
 8007378:	f43f ae78 	beq.w	800706c <_printf_float+0x9c>
 800737c:	4653      	mov	r3, sl
 800737e:	465a      	mov	r2, fp
 8007380:	4631      	mov	r1, r6
 8007382:	4628      	mov	r0, r5
 8007384:	47b8      	blx	r7
 8007386:	3001      	adds	r0, #1
 8007388:	f43f ae70 	beq.w	800706c <_printf_float+0x9c>
 800738c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007390:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007398:	d01b      	beq.n	80073d2 <_printf_float+0x402>
 800739a:	9b08      	ldr	r3, [sp, #32]
 800739c:	f108 0201 	add.w	r2, r8, #1
 80073a0:	3b01      	subs	r3, #1
 80073a2:	4631      	mov	r1, r6
 80073a4:	4628      	mov	r0, r5
 80073a6:	47b8      	blx	r7
 80073a8:	3001      	adds	r0, #1
 80073aa:	d10e      	bne.n	80073ca <_printf_float+0x3fa>
 80073ac:	e65e      	b.n	800706c <_printf_float+0x9c>
 80073ae:	2301      	movs	r3, #1
 80073b0:	464a      	mov	r2, r9
 80073b2:	4631      	mov	r1, r6
 80073b4:	4628      	mov	r0, r5
 80073b6:	47b8      	blx	r7
 80073b8:	3001      	adds	r0, #1
 80073ba:	f43f ae57 	beq.w	800706c <_printf_float+0x9c>
 80073be:	f108 0801 	add.w	r8, r8, #1
 80073c2:	9b08      	ldr	r3, [sp, #32]
 80073c4:	3b01      	subs	r3, #1
 80073c6:	4543      	cmp	r3, r8
 80073c8:	dcf1      	bgt.n	80073ae <_printf_float+0x3de>
 80073ca:	9b04      	ldr	r3, [sp, #16]
 80073cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80073d0:	e6db      	b.n	800718a <_printf_float+0x1ba>
 80073d2:	f04f 0800 	mov.w	r8, #0
 80073d6:	f104 091a 	add.w	r9, r4, #26
 80073da:	e7f2      	b.n	80073c2 <_printf_float+0x3f2>
 80073dc:	2301      	movs	r3, #1
 80073de:	4642      	mov	r2, r8
 80073e0:	e7df      	b.n	80073a2 <_printf_float+0x3d2>
 80073e2:	2301      	movs	r3, #1
 80073e4:	464a      	mov	r2, r9
 80073e6:	4631      	mov	r1, r6
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b8      	blx	r7
 80073ec:	3001      	adds	r0, #1
 80073ee:	f43f ae3d 	beq.w	800706c <_printf_float+0x9c>
 80073f2:	f108 0801 	add.w	r8, r8, #1
 80073f6:	68e3      	ldr	r3, [r4, #12]
 80073f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073fa:	1a5b      	subs	r3, r3, r1
 80073fc:	4543      	cmp	r3, r8
 80073fe:	dcf0      	bgt.n	80073e2 <_printf_float+0x412>
 8007400:	e6f7      	b.n	80071f2 <_printf_float+0x222>
 8007402:	f04f 0800 	mov.w	r8, #0
 8007406:	f104 0919 	add.w	r9, r4, #25
 800740a:	e7f4      	b.n	80073f6 <_printf_float+0x426>

0800740c <_printf_common>:
 800740c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007410:	4616      	mov	r6, r2
 8007412:	4699      	mov	r9, r3
 8007414:	688a      	ldr	r2, [r1, #8]
 8007416:	690b      	ldr	r3, [r1, #16]
 8007418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800741c:	4293      	cmp	r3, r2
 800741e:	bfb8      	it	lt
 8007420:	4613      	movlt	r3, r2
 8007422:	6033      	str	r3, [r6, #0]
 8007424:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007428:	4607      	mov	r7, r0
 800742a:	460c      	mov	r4, r1
 800742c:	b10a      	cbz	r2, 8007432 <_printf_common+0x26>
 800742e:	3301      	adds	r3, #1
 8007430:	6033      	str	r3, [r6, #0]
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	0699      	lsls	r1, r3, #26
 8007436:	bf42      	ittt	mi
 8007438:	6833      	ldrmi	r3, [r6, #0]
 800743a:	3302      	addmi	r3, #2
 800743c:	6033      	strmi	r3, [r6, #0]
 800743e:	6825      	ldr	r5, [r4, #0]
 8007440:	f015 0506 	ands.w	r5, r5, #6
 8007444:	d106      	bne.n	8007454 <_printf_common+0x48>
 8007446:	f104 0a19 	add.w	sl, r4, #25
 800744a:	68e3      	ldr	r3, [r4, #12]
 800744c:	6832      	ldr	r2, [r6, #0]
 800744e:	1a9b      	subs	r3, r3, r2
 8007450:	42ab      	cmp	r3, r5
 8007452:	dc26      	bgt.n	80074a2 <_printf_common+0x96>
 8007454:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007458:	1e13      	subs	r3, r2, #0
 800745a:	6822      	ldr	r2, [r4, #0]
 800745c:	bf18      	it	ne
 800745e:	2301      	movne	r3, #1
 8007460:	0692      	lsls	r2, r2, #26
 8007462:	d42b      	bmi.n	80074bc <_printf_common+0xb0>
 8007464:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007468:	4649      	mov	r1, r9
 800746a:	4638      	mov	r0, r7
 800746c:	47c0      	blx	r8
 800746e:	3001      	adds	r0, #1
 8007470:	d01e      	beq.n	80074b0 <_printf_common+0xa4>
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	68e5      	ldr	r5, [r4, #12]
 8007476:	6832      	ldr	r2, [r6, #0]
 8007478:	f003 0306 	and.w	r3, r3, #6
 800747c:	2b04      	cmp	r3, #4
 800747e:	bf08      	it	eq
 8007480:	1aad      	subeq	r5, r5, r2
 8007482:	68a3      	ldr	r3, [r4, #8]
 8007484:	6922      	ldr	r2, [r4, #16]
 8007486:	bf0c      	ite	eq
 8007488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800748c:	2500      	movne	r5, #0
 800748e:	4293      	cmp	r3, r2
 8007490:	bfc4      	itt	gt
 8007492:	1a9b      	subgt	r3, r3, r2
 8007494:	18ed      	addgt	r5, r5, r3
 8007496:	2600      	movs	r6, #0
 8007498:	341a      	adds	r4, #26
 800749a:	42b5      	cmp	r5, r6
 800749c:	d11a      	bne.n	80074d4 <_printf_common+0xc8>
 800749e:	2000      	movs	r0, #0
 80074a0:	e008      	b.n	80074b4 <_printf_common+0xa8>
 80074a2:	2301      	movs	r3, #1
 80074a4:	4652      	mov	r2, sl
 80074a6:	4649      	mov	r1, r9
 80074a8:	4638      	mov	r0, r7
 80074aa:	47c0      	blx	r8
 80074ac:	3001      	adds	r0, #1
 80074ae:	d103      	bne.n	80074b8 <_printf_common+0xac>
 80074b0:	f04f 30ff 	mov.w	r0, #4294967295
 80074b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b8:	3501      	adds	r5, #1
 80074ba:	e7c6      	b.n	800744a <_printf_common+0x3e>
 80074bc:	18e1      	adds	r1, r4, r3
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	2030      	movs	r0, #48	; 0x30
 80074c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074c6:	4422      	add	r2, r4
 80074c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074d0:	3302      	adds	r3, #2
 80074d2:	e7c7      	b.n	8007464 <_printf_common+0x58>
 80074d4:	2301      	movs	r3, #1
 80074d6:	4622      	mov	r2, r4
 80074d8:	4649      	mov	r1, r9
 80074da:	4638      	mov	r0, r7
 80074dc:	47c0      	blx	r8
 80074de:	3001      	adds	r0, #1
 80074e0:	d0e6      	beq.n	80074b0 <_printf_common+0xa4>
 80074e2:	3601      	adds	r6, #1
 80074e4:	e7d9      	b.n	800749a <_printf_common+0x8e>
	...

080074e8 <_printf_i>:
 80074e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074ec:	460c      	mov	r4, r1
 80074ee:	4691      	mov	r9, r2
 80074f0:	7e27      	ldrb	r7, [r4, #24]
 80074f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80074f4:	2f78      	cmp	r7, #120	; 0x78
 80074f6:	4680      	mov	r8, r0
 80074f8:	469a      	mov	sl, r3
 80074fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074fe:	d807      	bhi.n	8007510 <_printf_i+0x28>
 8007500:	2f62      	cmp	r7, #98	; 0x62
 8007502:	d80a      	bhi.n	800751a <_printf_i+0x32>
 8007504:	2f00      	cmp	r7, #0
 8007506:	f000 80d8 	beq.w	80076ba <_printf_i+0x1d2>
 800750a:	2f58      	cmp	r7, #88	; 0x58
 800750c:	f000 80a3 	beq.w	8007656 <_printf_i+0x16e>
 8007510:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007514:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007518:	e03a      	b.n	8007590 <_printf_i+0xa8>
 800751a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800751e:	2b15      	cmp	r3, #21
 8007520:	d8f6      	bhi.n	8007510 <_printf_i+0x28>
 8007522:	a001      	add	r0, pc, #4	; (adr r0, 8007528 <_printf_i+0x40>)
 8007524:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007528:	08007581 	.word	0x08007581
 800752c:	08007595 	.word	0x08007595
 8007530:	08007511 	.word	0x08007511
 8007534:	08007511 	.word	0x08007511
 8007538:	08007511 	.word	0x08007511
 800753c:	08007511 	.word	0x08007511
 8007540:	08007595 	.word	0x08007595
 8007544:	08007511 	.word	0x08007511
 8007548:	08007511 	.word	0x08007511
 800754c:	08007511 	.word	0x08007511
 8007550:	08007511 	.word	0x08007511
 8007554:	080076a1 	.word	0x080076a1
 8007558:	080075c5 	.word	0x080075c5
 800755c:	08007683 	.word	0x08007683
 8007560:	08007511 	.word	0x08007511
 8007564:	08007511 	.word	0x08007511
 8007568:	080076c3 	.word	0x080076c3
 800756c:	08007511 	.word	0x08007511
 8007570:	080075c5 	.word	0x080075c5
 8007574:	08007511 	.word	0x08007511
 8007578:	08007511 	.word	0x08007511
 800757c:	0800768b 	.word	0x0800768b
 8007580:	680b      	ldr	r3, [r1, #0]
 8007582:	1d1a      	adds	r2, r3, #4
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	600a      	str	r2, [r1, #0]
 8007588:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800758c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007590:	2301      	movs	r3, #1
 8007592:	e0a3      	b.n	80076dc <_printf_i+0x1f4>
 8007594:	6825      	ldr	r5, [r4, #0]
 8007596:	6808      	ldr	r0, [r1, #0]
 8007598:	062e      	lsls	r6, r5, #24
 800759a:	f100 0304 	add.w	r3, r0, #4
 800759e:	d50a      	bpl.n	80075b6 <_printf_i+0xce>
 80075a0:	6805      	ldr	r5, [r0, #0]
 80075a2:	600b      	str	r3, [r1, #0]
 80075a4:	2d00      	cmp	r5, #0
 80075a6:	da03      	bge.n	80075b0 <_printf_i+0xc8>
 80075a8:	232d      	movs	r3, #45	; 0x2d
 80075aa:	426d      	negs	r5, r5
 80075ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075b0:	485e      	ldr	r0, [pc, #376]	; (800772c <_printf_i+0x244>)
 80075b2:	230a      	movs	r3, #10
 80075b4:	e019      	b.n	80075ea <_printf_i+0x102>
 80075b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80075ba:	6805      	ldr	r5, [r0, #0]
 80075bc:	600b      	str	r3, [r1, #0]
 80075be:	bf18      	it	ne
 80075c0:	b22d      	sxthne	r5, r5
 80075c2:	e7ef      	b.n	80075a4 <_printf_i+0xbc>
 80075c4:	680b      	ldr	r3, [r1, #0]
 80075c6:	6825      	ldr	r5, [r4, #0]
 80075c8:	1d18      	adds	r0, r3, #4
 80075ca:	6008      	str	r0, [r1, #0]
 80075cc:	0628      	lsls	r0, r5, #24
 80075ce:	d501      	bpl.n	80075d4 <_printf_i+0xec>
 80075d0:	681d      	ldr	r5, [r3, #0]
 80075d2:	e002      	b.n	80075da <_printf_i+0xf2>
 80075d4:	0669      	lsls	r1, r5, #25
 80075d6:	d5fb      	bpl.n	80075d0 <_printf_i+0xe8>
 80075d8:	881d      	ldrh	r5, [r3, #0]
 80075da:	4854      	ldr	r0, [pc, #336]	; (800772c <_printf_i+0x244>)
 80075dc:	2f6f      	cmp	r7, #111	; 0x6f
 80075de:	bf0c      	ite	eq
 80075e0:	2308      	moveq	r3, #8
 80075e2:	230a      	movne	r3, #10
 80075e4:	2100      	movs	r1, #0
 80075e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075ea:	6866      	ldr	r6, [r4, #4]
 80075ec:	60a6      	str	r6, [r4, #8]
 80075ee:	2e00      	cmp	r6, #0
 80075f0:	bfa2      	ittt	ge
 80075f2:	6821      	ldrge	r1, [r4, #0]
 80075f4:	f021 0104 	bicge.w	r1, r1, #4
 80075f8:	6021      	strge	r1, [r4, #0]
 80075fa:	b90d      	cbnz	r5, 8007600 <_printf_i+0x118>
 80075fc:	2e00      	cmp	r6, #0
 80075fe:	d04d      	beq.n	800769c <_printf_i+0x1b4>
 8007600:	4616      	mov	r6, r2
 8007602:	fbb5 f1f3 	udiv	r1, r5, r3
 8007606:	fb03 5711 	mls	r7, r3, r1, r5
 800760a:	5dc7      	ldrb	r7, [r0, r7]
 800760c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007610:	462f      	mov	r7, r5
 8007612:	42bb      	cmp	r3, r7
 8007614:	460d      	mov	r5, r1
 8007616:	d9f4      	bls.n	8007602 <_printf_i+0x11a>
 8007618:	2b08      	cmp	r3, #8
 800761a:	d10b      	bne.n	8007634 <_printf_i+0x14c>
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	07df      	lsls	r7, r3, #31
 8007620:	d508      	bpl.n	8007634 <_printf_i+0x14c>
 8007622:	6923      	ldr	r3, [r4, #16]
 8007624:	6861      	ldr	r1, [r4, #4]
 8007626:	4299      	cmp	r1, r3
 8007628:	bfde      	ittt	le
 800762a:	2330      	movle	r3, #48	; 0x30
 800762c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007630:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007634:	1b92      	subs	r2, r2, r6
 8007636:	6122      	str	r2, [r4, #16]
 8007638:	f8cd a000 	str.w	sl, [sp]
 800763c:	464b      	mov	r3, r9
 800763e:	aa03      	add	r2, sp, #12
 8007640:	4621      	mov	r1, r4
 8007642:	4640      	mov	r0, r8
 8007644:	f7ff fee2 	bl	800740c <_printf_common>
 8007648:	3001      	adds	r0, #1
 800764a:	d14c      	bne.n	80076e6 <_printf_i+0x1fe>
 800764c:	f04f 30ff 	mov.w	r0, #4294967295
 8007650:	b004      	add	sp, #16
 8007652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007656:	4835      	ldr	r0, [pc, #212]	; (800772c <_printf_i+0x244>)
 8007658:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800765c:	6823      	ldr	r3, [r4, #0]
 800765e:	680e      	ldr	r6, [r1, #0]
 8007660:	061f      	lsls	r7, r3, #24
 8007662:	f856 5b04 	ldr.w	r5, [r6], #4
 8007666:	600e      	str	r6, [r1, #0]
 8007668:	d514      	bpl.n	8007694 <_printf_i+0x1ac>
 800766a:	07d9      	lsls	r1, r3, #31
 800766c:	bf44      	itt	mi
 800766e:	f043 0320 	orrmi.w	r3, r3, #32
 8007672:	6023      	strmi	r3, [r4, #0]
 8007674:	b91d      	cbnz	r5, 800767e <_printf_i+0x196>
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	f023 0320 	bic.w	r3, r3, #32
 800767c:	6023      	str	r3, [r4, #0]
 800767e:	2310      	movs	r3, #16
 8007680:	e7b0      	b.n	80075e4 <_printf_i+0xfc>
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	f043 0320 	orr.w	r3, r3, #32
 8007688:	6023      	str	r3, [r4, #0]
 800768a:	2378      	movs	r3, #120	; 0x78
 800768c:	4828      	ldr	r0, [pc, #160]	; (8007730 <_printf_i+0x248>)
 800768e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007692:	e7e3      	b.n	800765c <_printf_i+0x174>
 8007694:	065e      	lsls	r6, r3, #25
 8007696:	bf48      	it	mi
 8007698:	b2ad      	uxthmi	r5, r5
 800769a:	e7e6      	b.n	800766a <_printf_i+0x182>
 800769c:	4616      	mov	r6, r2
 800769e:	e7bb      	b.n	8007618 <_printf_i+0x130>
 80076a0:	680b      	ldr	r3, [r1, #0]
 80076a2:	6826      	ldr	r6, [r4, #0]
 80076a4:	6960      	ldr	r0, [r4, #20]
 80076a6:	1d1d      	adds	r5, r3, #4
 80076a8:	600d      	str	r5, [r1, #0]
 80076aa:	0635      	lsls	r5, r6, #24
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	d501      	bpl.n	80076b4 <_printf_i+0x1cc>
 80076b0:	6018      	str	r0, [r3, #0]
 80076b2:	e002      	b.n	80076ba <_printf_i+0x1d2>
 80076b4:	0671      	lsls	r1, r6, #25
 80076b6:	d5fb      	bpl.n	80076b0 <_printf_i+0x1c8>
 80076b8:	8018      	strh	r0, [r3, #0]
 80076ba:	2300      	movs	r3, #0
 80076bc:	6123      	str	r3, [r4, #16]
 80076be:	4616      	mov	r6, r2
 80076c0:	e7ba      	b.n	8007638 <_printf_i+0x150>
 80076c2:	680b      	ldr	r3, [r1, #0]
 80076c4:	1d1a      	adds	r2, r3, #4
 80076c6:	600a      	str	r2, [r1, #0]
 80076c8:	681e      	ldr	r6, [r3, #0]
 80076ca:	6862      	ldr	r2, [r4, #4]
 80076cc:	2100      	movs	r1, #0
 80076ce:	4630      	mov	r0, r6
 80076d0:	f7f8 fe0e 	bl	80002f0 <memchr>
 80076d4:	b108      	cbz	r0, 80076da <_printf_i+0x1f2>
 80076d6:	1b80      	subs	r0, r0, r6
 80076d8:	6060      	str	r0, [r4, #4]
 80076da:	6863      	ldr	r3, [r4, #4]
 80076dc:	6123      	str	r3, [r4, #16]
 80076de:	2300      	movs	r3, #0
 80076e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076e4:	e7a8      	b.n	8007638 <_printf_i+0x150>
 80076e6:	6923      	ldr	r3, [r4, #16]
 80076e8:	4632      	mov	r2, r6
 80076ea:	4649      	mov	r1, r9
 80076ec:	4640      	mov	r0, r8
 80076ee:	47d0      	blx	sl
 80076f0:	3001      	adds	r0, #1
 80076f2:	d0ab      	beq.n	800764c <_printf_i+0x164>
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	079b      	lsls	r3, r3, #30
 80076f8:	d413      	bmi.n	8007722 <_printf_i+0x23a>
 80076fa:	68e0      	ldr	r0, [r4, #12]
 80076fc:	9b03      	ldr	r3, [sp, #12]
 80076fe:	4298      	cmp	r0, r3
 8007700:	bfb8      	it	lt
 8007702:	4618      	movlt	r0, r3
 8007704:	e7a4      	b.n	8007650 <_printf_i+0x168>
 8007706:	2301      	movs	r3, #1
 8007708:	4632      	mov	r2, r6
 800770a:	4649      	mov	r1, r9
 800770c:	4640      	mov	r0, r8
 800770e:	47d0      	blx	sl
 8007710:	3001      	adds	r0, #1
 8007712:	d09b      	beq.n	800764c <_printf_i+0x164>
 8007714:	3501      	adds	r5, #1
 8007716:	68e3      	ldr	r3, [r4, #12]
 8007718:	9903      	ldr	r1, [sp, #12]
 800771a:	1a5b      	subs	r3, r3, r1
 800771c:	42ab      	cmp	r3, r5
 800771e:	dcf2      	bgt.n	8007706 <_printf_i+0x21e>
 8007720:	e7eb      	b.n	80076fa <_printf_i+0x212>
 8007722:	2500      	movs	r5, #0
 8007724:	f104 0619 	add.w	r6, r4, #25
 8007728:	e7f5      	b.n	8007716 <_printf_i+0x22e>
 800772a:	bf00      	nop
 800772c:	08024026 	.word	0x08024026
 8007730:	08024037 	.word	0x08024037

08007734 <_scanf_float>:
 8007734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007738:	b087      	sub	sp, #28
 800773a:	4617      	mov	r7, r2
 800773c:	9303      	str	r3, [sp, #12]
 800773e:	688b      	ldr	r3, [r1, #8]
 8007740:	1e5a      	subs	r2, r3, #1
 8007742:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007746:	bf83      	ittte	hi
 8007748:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800774c:	195b      	addhi	r3, r3, r5
 800774e:	9302      	strhi	r3, [sp, #8]
 8007750:	2300      	movls	r3, #0
 8007752:	bf86      	itte	hi
 8007754:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007758:	608b      	strhi	r3, [r1, #8]
 800775a:	9302      	strls	r3, [sp, #8]
 800775c:	680b      	ldr	r3, [r1, #0]
 800775e:	468b      	mov	fp, r1
 8007760:	2500      	movs	r5, #0
 8007762:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007766:	f84b 3b1c 	str.w	r3, [fp], #28
 800776a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800776e:	4680      	mov	r8, r0
 8007770:	460c      	mov	r4, r1
 8007772:	465e      	mov	r6, fp
 8007774:	46aa      	mov	sl, r5
 8007776:	46a9      	mov	r9, r5
 8007778:	9501      	str	r5, [sp, #4]
 800777a:	68a2      	ldr	r2, [r4, #8]
 800777c:	b152      	cbz	r2, 8007794 <_scanf_float+0x60>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	2b4e      	cmp	r3, #78	; 0x4e
 8007784:	d864      	bhi.n	8007850 <_scanf_float+0x11c>
 8007786:	2b40      	cmp	r3, #64	; 0x40
 8007788:	d83c      	bhi.n	8007804 <_scanf_float+0xd0>
 800778a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800778e:	b2c8      	uxtb	r0, r1
 8007790:	280e      	cmp	r0, #14
 8007792:	d93a      	bls.n	800780a <_scanf_float+0xd6>
 8007794:	f1b9 0f00 	cmp.w	r9, #0
 8007798:	d003      	beq.n	80077a2 <_scanf_float+0x6e>
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077a6:	f1ba 0f01 	cmp.w	sl, #1
 80077aa:	f200 8113 	bhi.w	80079d4 <_scanf_float+0x2a0>
 80077ae:	455e      	cmp	r6, fp
 80077b0:	f200 8105 	bhi.w	80079be <_scanf_float+0x28a>
 80077b4:	2501      	movs	r5, #1
 80077b6:	4628      	mov	r0, r5
 80077b8:	b007      	add	sp, #28
 80077ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80077c2:	2a0d      	cmp	r2, #13
 80077c4:	d8e6      	bhi.n	8007794 <_scanf_float+0x60>
 80077c6:	a101      	add	r1, pc, #4	; (adr r1, 80077cc <_scanf_float+0x98>)
 80077c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80077cc:	0800790b 	.word	0x0800790b
 80077d0:	08007795 	.word	0x08007795
 80077d4:	08007795 	.word	0x08007795
 80077d8:	08007795 	.word	0x08007795
 80077dc:	0800796b 	.word	0x0800796b
 80077e0:	08007943 	.word	0x08007943
 80077e4:	08007795 	.word	0x08007795
 80077e8:	08007795 	.word	0x08007795
 80077ec:	08007919 	.word	0x08007919
 80077f0:	08007795 	.word	0x08007795
 80077f4:	08007795 	.word	0x08007795
 80077f8:	08007795 	.word	0x08007795
 80077fc:	08007795 	.word	0x08007795
 8007800:	080078d1 	.word	0x080078d1
 8007804:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007808:	e7db      	b.n	80077c2 <_scanf_float+0x8e>
 800780a:	290e      	cmp	r1, #14
 800780c:	d8c2      	bhi.n	8007794 <_scanf_float+0x60>
 800780e:	a001      	add	r0, pc, #4	; (adr r0, 8007814 <_scanf_float+0xe0>)
 8007810:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007814:	080078c3 	.word	0x080078c3
 8007818:	08007795 	.word	0x08007795
 800781c:	080078c3 	.word	0x080078c3
 8007820:	08007957 	.word	0x08007957
 8007824:	08007795 	.word	0x08007795
 8007828:	08007871 	.word	0x08007871
 800782c:	080078ad 	.word	0x080078ad
 8007830:	080078ad 	.word	0x080078ad
 8007834:	080078ad 	.word	0x080078ad
 8007838:	080078ad 	.word	0x080078ad
 800783c:	080078ad 	.word	0x080078ad
 8007840:	080078ad 	.word	0x080078ad
 8007844:	080078ad 	.word	0x080078ad
 8007848:	080078ad 	.word	0x080078ad
 800784c:	080078ad 	.word	0x080078ad
 8007850:	2b6e      	cmp	r3, #110	; 0x6e
 8007852:	d809      	bhi.n	8007868 <_scanf_float+0x134>
 8007854:	2b60      	cmp	r3, #96	; 0x60
 8007856:	d8b2      	bhi.n	80077be <_scanf_float+0x8a>
 8007858:	2b54      	cmp	r3, #84	; 0x54
 800785a:	d077      	beq.n	800794c <_scanf_float+0x218>
 800785c:	2b59      	cmp	r3, #89	; 0x59
 800785e:	d199      	bne.n	8007794 <_scanf_float+0x60>
 8007860:	2d07      	cmp	r5, #7
 8007862:	d197      	bne.n	8007794 <_scanf_float+0x60>
 8007864:	2508      	movs	r5, #8
 8007866:	e029      	b.n	80078bc <_scanf_float+0x188>
 8007868:	2b74      	cmp	r3, #116	; 0x74
 800786a:	d06f      	beq.n	800794c <_scanf_float+0x218>
 800786c:	2b79      	cmp	r3, #121	; 0x79
 800786e:	e7f6      	b.n	800785e <_scanf_float+0x12a>
 8007870:	6821      	ldr	r1, [r4, #0]
 8007872:	05c8      	lsls	r0, r1, #23
 8007874:	d51a      	bpl.n	80078ac <_scanf_float+0x178>
 8007876:	9b02      	ldr	r3, [sp, #8]
 8007878:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800787c:	6021      	str	r1, [r4, #0]
 800787e:	f109 0901 	add.w	r9, r9, #1
 8007882:	b11b      	cbz	r3, 800788c <_scanf_float+0x158>
 8007884:	3b01      	subs	r3, #1
 8007886:	3201      	adds	r2, #1
 8007888:	9302      	str	r3, [sp, #8]
 800788a:	60a2      	str	r2, [r4, #8]
 800788c:	68a3      	ldr	r3, [r4, #8]
 800788e:	3b01      	subs	r3, #1
 8007890:	60a3      	str	r3, [r4, #8]
 8007892:	6923      	ldr	r3, [r4, #16]
 8007894:	3301      	adds	r3, #1
 8007896:	6123      	str	r3, [r4, #16]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	3b01      	subs	r3, #1
 800789c:	2b00      	cmp	r3, #0
 800789e:	607b      	str	r3, [r7, #4]
 80078a0:	f340 8084 	ble.w	80079ac <_scanf_float+0x278>
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	3301      	adds	r3, #1
 80078a8:	603b      	str	r3, [r7, #0]
 80078aa:	e766      	b.n	800777a <_scanf_float+0x46>
 80078ac:	eb1a 0f05 	cmn.w	sl, r5
 80078b0:	f47f af70 	bne.w	8007794 <_scanf_float+0x60>
 80078b4:	6822      	ldr	r2, [r4, #0]
 80078b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80078ba:	6022      	str	r2, [r4, #0]
 80078bc:	f806 3b01 	strb.w	r3, [r6], #1
 80078c0:	e7e4      	b.n	800788c <_scanf_float+0x158>
 80078c2:	6822      	ldr	r2, [r4, #0]
 80078c4:	0610      	lsls	r0, r2, #24
 80078c6:	f57f af65 	bpl.w	8007794 <_scanf_float+0x60>
 80078ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078ce:	e7f4      	b.n	80078ba <_scanf_float+0x186>
 80078d0:	f1ba 0f00 	cmp.w	sl, #0
 80078d4:	d10e      	bne.n	80078f4 <_scanf_float+0x1c0>
 80078d6:	f1b9 0f00 	cmp.w	r9, #0
 80078da:	d10e      	bne.n	80078fa <_scanf_float+0x1c6>
 80078dc:	6822      	ldr	r2, [r4, #0]
 80078de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80078e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80078e6:	d108      	bne.n	80078fa <_scanf_float+0x1c6>
 80078e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80078ec:	6022      	str	r2, [r4, #0]
 80078ee:	f04f 0a01 	mov.w	sl, #1
 80078f2:	e7e3      	b.n	80078bc <_scanf_float+0x188>
 80078f4:	f1ba 0f02 	cmp.w	sl, #2
 80078f8:	d055      	beq.n	80079a6 <_scanf_float+0x272>
 80078fa:	2d01      	cmp	r5, #1
 80078fc:	d002      	beq.n	8007904 <_scanf_float+0x1d0>
 80078fe:	2d04      	cmp	r5, #4
 8007900:	f47f af48 	bne.w	8007794 <_scanf_float+0x60>
 8007904:	3501      	adds	r5, #1
 8007906:	b2ed      	uxtb	r5, r5
 8007908:	e7d8      	b.n	80078bc <_scanf_float+0x188>
 800790a:	f1ba 0f01 	cmp.w	sl, #1
 800790e:	f47f af41 	bne.w	8007794 <_scanf_float+0x60>
 8007912:	f04f 0a02 	mov.w	sl, #2
 8007916:	e7d1      	b.n	80078bc <_scanf_float+0x188>
 8007918:	b97d      	cbnz	r5, 800793a <_scanf_float+0x206>
 800791a:	f1b9 0f00 	cmp.w	r9, #0
 800791e:	f47f af3c 	bne.w	800779a <_scanf_float+0x66>
 8007922:	6822      	ldr	r2, [r4, #0]
 8007924:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007928:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800792c:	f47f af39 	bne.w	80077a2 <_scanf_float+0x6e>
 8007930:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007934:	6022      	str	r2, [r4, #0]
 8007936:	2501      	movs	r5, #1
 8007938:	e7c0      	b.n	80078bc <_scanf_float+0x188>
 800793a:	2d03      	cmp	r5, #3
 800793c:	d0e2      	beq.n	8007904 <_scanf_float+0x1d0>
 800793e:	2d05      	cmp	r5, #5
 8007940:	e7de      	b.n	8007900 <_scanf_float+0x1cc>
 8007942:	2d02      	cmp	r5, #2
 8007944:	f47f af26 	bne.w	8007794 <_scanf_float+0x60>
 8007948:	2503      	movs	r5, #3
 800794a:	e7b7      	b.n	80078bc <_scanf_float+0x188>
 800794c:	2d06      	cmp	r5, #6
 800794e:	f47f af21 	bne.w	8007794 <_scanf_float+0x60>
 8007952:	2507      	movs	r5, #7
 8007954:	e7b2      	b.n	80078bc <_scanf_float+0x188>
 8007956:	6822      	ldr	r2, [r4, #0]
 8007958:	0591      	lsls	r1, r2, #22
 800795a:	f57f af1b 	bpl.w	8007794 <_scanf_float+0x60>
 800795e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007962:	6022      	str	r2, [r4, #0]
 8007964:	f8cd 9004 	str.w	r9, [sp, #4]
 8007968:	e7a8      	b.n	80078bc <_scanf_float+0x188>
 800796a:	6822      	ldr	r2, [r4, #0]
 800796c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007970:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007974:	d006      	beq.n	8007984 <_scanf_float+0x250>
 8007976:	0550      	lsls	r0, r2, #21
 8007978:	f57f af0c 	bpl.w	8007794 <_scanf_float+0x60>
 800797c:	f1b9 0f00 	cmp.w	r9, #0
 8007980:	f43f af0f 	beq.w	80077a2 <_scanf_float+0x6e>
 8007984:	0591      	lsls	r1, r2, #22
 8007986:	bf58      	it	pl
 8007988:	9901      	ldrpl	r1, [sp, #4]
 800798a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800798e:	bf58      	it	pl
 8007990:	eba9 0101 	subpl.w	r1, r9, r1
 8007994:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007998:	bf58      	it	pl
 800799a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800799e:	6022      	str	r2, [r4, #0]
 80079a0:	f04f 0900 	mov.w	r9, #0
 80079a4:	e78a      	b.n	80078bc <_scanf_float+0x188>
 80079a6:	f04f 0a03 	mov.w	sl, #3
 80079aa:	e787      	b.n	80078bc <_scanf_float+0x188>
 80079ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80079b0:	4639      	mov	r1, r7
 80079b2:	4640      	mov	r0, r8
 80079b4:	4798      	blx	r3
 80079b6:	2800      	cmp	r0, #0
 80079b8:	f43f aedf 	beq.w	800777a <_scanf_float+0x46>
 80079bc:	e6ea      	b.n	8007794 <_scanf_float+0x60>
 80079be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80079c6:	463a      	mov	r2, r7
 80079c8:	4640      	mov	r0, r8
 80079ca:	4798      	blx	r3
 80079cc:	6923      	ldr	r3, [r4, #16]
 80079ce:	3b01      	subs	r3, #1
 80079d0:	6123      	str	r3, [r4, #16]
 80079d2:	e6ec      	b.n	80077ae <_scanf_float+0x7a>
 80079d4:	1e6b      	subs	r3, r5, #1
 80079d6:	2b06      	cmp	r3, #6
 80079d8:	d825      	bhi.n	8007a26 <_scanf_float+0x2f2>
 80079da:	2d02      	cmp	r5, #2
 80079dc:	d836      	bhi.n	8007a4c <_scanf_float+0x318>
 80079de:	455e      	cmp	r6, fp
 80079e0:	f67f aee8 	bls.w	80077b4 <_scanf_float+0x80>
 80079e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80079ec:	463a      	mov	r2, r7
 80079ee:	4640      	mov	r0, r8
 80079f0:	4798      	blx	r3
 80079f2:	6923      	ldr	r3, [r4, #16]
 80079f4:	3b01      	subs	r3, #1
 80079f6:	6123      	str	r3, [r4, #16]
 80079f8:	e7f1      	b.n	80079de <_scanf_float+0x2aa>
 80079fa:	9802      	ldr	r0, [sp, #8]
 80079fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a00:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007a04:	9002      	str	r0, [sp, #8]
 8007a06:	463a      	mov	r2, r7
 8007a08:	4640      	mov	r0, r8
 8007a0a:	4798      	blx	r3
 8007a0c:	6923      	ldr	r3, [r4, #16]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	6123      	str	r3, [r4, #16]
 8007a12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a16:	fa5f fa8a 	uxtb.w	sl, sl
 8007a1a:	f1ba 0f02 	cmp.w	sl, #2
 8007a1e:	d1ec      	bne.n	80079fa <_scanf_float+0x2c6>
 8007a20:	3d03      	subs	r5, #3
 8007a22:	b2ed      	uxtb	r5, r5
 8007a24:	1b76      	subs	r6, r6, r5
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	05da      	lsls	r2, r3, #23
 8007a2a:	d52f      	bpl.n	8007a8c <_scanf_float+0x358>
 8007a2c:	055b      	lsls	r3, r3, #21
 8007a2e:	d510      	bpl.n	8007a52 <_scanf_float+0x31e>
 8007a30:	455e      	cmp	r6, fp
 8007a32:	f67f aebf 	bls.w	80077b4 <_scanf_float+0x80>
 8007a36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a3e:	463a      	mov	r2, r7
 8007a40:	4640      	mov	r0, r8
 8007a42:	4798      	blx	r3
 8007a44:	6923      	ldr	r3, [r4, #16]
 8007a46:	3b01      	subs	r3, #1
 8007a48:	6123      	str	r3, [r4, #16]
 8007a4a:	e7f1      	b.n	8007a30 <_scanf_float+0x2fc>
 8007a4c:	46aa      	mov	sl, r5
 8007a4e:	9602      	str	r6, [sp, #8]
 8007a50:	e7df      	b.n	8007a12 <_scanf_float+0x2de>
 8007a52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007a56:	6923      	ldr	r3, [r4, #16]
 8007a58:	2965      	cmp	r1, #101	; 0x65
 8007a5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a5e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007a62:	6123      	str	r3, [r4, #16]
 8007a64:	d00c      	beq.n	8007a80 <_scanf_float+0x34c>
 8007a66:	2945      	cmp	r1, #69	; 0x45
 8007a68:	d00a      	beq.n	8007a80 <_scanf_float+0x34c>
 8007a6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a6e:	463a      	mov	r2, r7
 8007a70:	4640      	mov	r0, r8
 8007a72:	4798      	blx	r3
 8007a74:	6923      	ldr	r3, [r4, #16]
 8007a76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	1eb5      	subs	r5, r6, #2
 8007a7e:	6123      	str	r3, [r4, #16]
 8007a80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a84:	463a      	mov	r2, r7
 8007a86:	4640      	mov	r0, r8
 8007a88:	4798      	blx	r3
 8007a8a:	462e      	mov	r6, r5
 8007a8c:	6825      	ldr	r5, [r4, #0]
 8007a8e:	f015 0510 	ands.w	r5, r5, #16
 8007a92:	d14d      	bne.n	8007b30 <_scanf_float+0x3fc>
 8007a94:	7035      	strb	r5, [r6, #0]
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa0:	d11a      	bne.n	8007ad8 <_scanf_float+0x3a4>
 8007aa2:	9b01      	ldr	r3, [sp, #4]
 8007aa4:	454b      	cmp	r3, r9
 8007aa6:	eba3 0209 	sub.w	r2, r3, r9
 8007aaa:	d122      	bne.n	8007af2 <_scanf_float+0x3be>
 8007aac:	2200      	movs	r2, #0
 8007aae:	4659      	mov	r1, fp
 8007ab0:	4640      	mov	r0, r8
 8007ab2:	f000 fe6b 	bl	800878c <_strtod_r>
 8007ab6:	9b03      	ldr	r3, [sp, #12]
 8007ab8:	6821      	ldr	r1, [r4, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f011 0f02 	tst.w	r1, #2
 8007ac0:	f103 0204 	add.w	r2, r3, #4
 8007ac4:	d020      	beq.n	8007b08 <_scanf_float+0x3d4>
 8007ac6:	9903      	ldr	r1, [sp, #12]
 8007ac8:	600a      	str	r2, [r1, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	ed83 0b00 	vstr	d0, [r3]
 8007ad0:	68e3      	ldr	r3, [r4, #12]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	60e3      	str	r3, [r4, #12]
 8007ad6:	e66e      	b.n	80077b6 <_scanf_float+0x82>
 8007ad8:	9b04      	ldr	r3, [sp, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d0e6      	beq.n	8007aac <_scanf_float+0x378>
 8007ade:	9905      	ldr	r1, [sp, #20]
 8007ae0:	230a      	movs	r3, #10
 8007ae2:	462a      	mov	r2, r5
 8007ae4:	3101      	adds	r1, #1
 8007ae6:	4640      	mov	r0, r8
 8007ae8:	f000 feda 	bl	80088a0 <_strtol_r>
 8007aec:	9b04      	ldr	r3, [sp, #16]
 8007aee:	9e05      	ldr	r6, [sp, #20]
 8007af0:	1ac2      	subs	r2, r0, r3
 8007af2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007af6:	429e      	cmp	r6, r3
 8007af8:	bf28      	it	cs
 8007afa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007afe:	490d      	ldr	r1, [pc, #52]	; (8007b34 <_scanf_float+0x400>)
 8007b00:	4630      	mov	r0, r6
 8007b02:	f000 f82b 	bl	8007b5c <siprintf>
 8007b06:	e7d1      	b.n	8007aac <_scanf_float+0x378>
 8007b08:	f011 0f04 	tst.w	r1, #4
 8007b0c:	9903      	ldr	r1, [sp, #12]
 8007b0e:	600a      	str	r2, [r1, #0]
 8007b10:	d1db      	bne.n	8007aca <_scanf_float+0x396>
 8007b12:	eeb4 0b40 	vcmp.f64	d0, d0
 8007b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b1a:	681e      	ldr	r6, [r3, #0]
 8007b1c:	d705      	bvc.n	8007b2a <_scanf_float+0x3f6>
 8007b1e:	4806      	ldr	r0, [pc, #24]	; (8007b38 <_scanf_float+0x404>)
 8007b20:	f7ff f8cc 	bl	8006cbc <nanf>
 8007b24:	ed86 0a00 	vstr	s0, [r6]
 8007b28:	e7d2      	b.n	8007ad0 <_scanf_float+0x39c>
 8007b2a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007b2e:	e7f9      	b.n	8007b24 <_scanf_float+0x3f0>
 8007b30:	2500      	movs	r5, #0
 8007b32:	e640      	b.n	80077b6 <_scanf_float+0x82>
 8007b34:	08024048 	.word	0x08024048
 8007b38:	0800b4f2 	.word	0x0800b4f2

08007b3c <_sbrk_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	4d06      	ldr	r5, [pc, #24]	; (8007b58 <_sbrk_r+0x1c>)
 8007b40:	2300      	movs	r3, #0
 8007b42:	4604      	mov	r4, r0
 8007b44:	4608      	mov	r0, r1
 8007b46:	602b      	str	r3, [r5, #0]
 8007b48:	f7f9 fc80 	bl	800144c <_sbrk>
 8007b4c:	1c43      	adds	r3, r0, #1
 8007b4e:	d102      	bne.n	8007b56 <_sbrk_r+0x1a>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	b103      	cbz	r3, 8007b56 <_sbrk_r+0x1a>
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	bd38      	pop	{r3, r4, r5, pc}
 8007b58:	24001110 	.word	0x24001110

08007b5c <siprintf>:
 8007b5c:	b40e      	push	{r1, r2, r3}
 8007b5e:	b500      	push	{lr}
 8007b60:	b09c      	sub	sp, #112	; 0x70
 8007b62:	ab1d      	add	r3, sp, #116	; 0x74
 8007b64:	9002      	str	r0, [sp, #8]
 8007b66:	9006      	str	r0, [sp, #24]
 8007b68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b6c:	4809      	ldr	r0, [pc, #36]	; (8007b94 <siprintf+0x38>)
 8007b6e:	9107      	str	r1, [sp, #28]
 8007b70:	9104      	str	r1, [sp, #16]
 8007b72:	4909      	ldr	r1, [pc, #36]	; (8007b98 <siprintf+0x3c>)
 8007b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b78:	9105      	str	r1, [sp, #20]
 8007b7a:	6800      	ldr	r0, [r0, #0]
 8007b7c:	9301      	str	r3, [sp, #4]
 8007b7e:	a902      	add	r1, sp, #8
 8007b80:	f002 fd7e 	bl	800a680 <_svfiprintf_r>
 8007b84:	9b02      	ldr	r3, [sp, #8]
 8007b86:	2200      	movs	r2, #0
 8007b88:	701a      	strb	r2, [r3, #0]
 8007b8a:	b01c      	add	sp, #112	; 0x70
 8007b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b90:	b003      	add	sp, #12
 8007b92:	4770      	bx	lr
 8007b94:	240007f8 	.word	0x240007f8
 8007b98:	ffff0208 	.word	0xffff0208

08007b9c <strcpy>:
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ba2:	f803 2b01 	strb.w	r2, [r3], #1
 8007ba6:	2a00      	cmp	r2, #0
 8007ba8:	d1f9      	bne.n	8007b9e <strcpy+0x2>
 8007baa:	4770      	bx	lr

08007bac <sulp>:
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	4604      	mov	r4, r0
 8007bb0:	460d      	mov	r5, r1
 8007bb2:	4616      	mov	r6, r2
 8007bb4:	ec45 4b10 	vmov	d0, r4, r5
 8007bb8:	f002 fb82 	bl	800a2c0 <__ulp>
 8007bbc:	b17e      	cbz	r6, 8007bde <sulp+0x32>
 8007bbe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007bc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	dd09      	ble.n	8007bde <sulp+0x32>
 8007bca:	051b      	lsls	r3, r3, #20
 8007bcc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8007bd6:	ec41 0b17 	vmov	d7, r0, r1
 8007bda:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007bde:	bd70      	pop	{r4, r5, r6, pc}

08007be0 <_strtod_l>:
 8007be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be4:	ed2d 8b0c 	vpush	{d8-d13}
 8007be8:	b09d      	sub	sp, #116	; 0x74
 8007bea:	461f      	mov	r7, r3
 8007bec:	2300      	movs	r3, #0
 8007bee:	9318      	str	r3, [sp, #96]	; 0x60
 8007bf0:	4ba6      	ldr	r3, [pc, #664]	; (8007e8c <_strtod_l+0x2ac>)
 8007bf2:	9213      	str	r2, [sp, #76]	; 0x4c
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	9308      	str	r3, [sp, #32]
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	468a      	mov	sl, r1
 8007bfe:	f7f8 fb6f 	bl	80002e0 <strlen>
 8007c02:	f04f 0800 	mov.w	r8, #0
 8007c06:	4605      	mov	r5, r0
 8007c08:	f04f 0900 	mov.w	r9, #0
 8007c0c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007c10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c12:	781a      	ldrb	r2, [r3, #0]
 8007c14:	2a2b      	cmp	r2, #43	; 0x2b
 8007c16:	d04d      	beq.n	8007cb4 <_strtod_l+0xd4>
 8007c18:	d83a      	bhi.n	8007c90 <_strtod_l+0xb0>
 8007c1a:	2a0d      	cmp	r2, #13
 8007c1c:	d833      	bhi.n	8007c86 <_strtod_l+0xa6>
 8007c1e:	2a08      	cmp	r2, #8
 8007c20:	d833      	bhi.n	8007c8a <_strtod_l+0xaa>
 8007c22:	2a00      	cmp	r2, #0
 8007c24:	d03d      	beq.n	8007ca2 <_strtod_l+0xc2>
 8007c26:	2300      	movs	r3, #0
 8007c28:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007c2c:	7833      	ldrb	r3, [r6, #0]
 8007c2e:	2b30      	cmp	r3, #48	; 0x30
 8007c30:	f040 80b6 	bne.w	8007da0 <_strtod_l+0x1c0>
 8007c34:	7873      	ldrb	r3, [r6, #1]
 8007c36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c3a:	2b58      	cmp	r3, #88	; 0x58
 8007c3c:	d16d      	bne.n	8007d1a <_strtod_l+0x13a>
 8007c3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c40:	9301      	str	r3, [sp, #4]
 8007c42:	ab18      	add	r3, sp, #96	; 0x60
 8007c44:	9702      	str	r7, [sp, #8]
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	4a91      	ldr	r2, [pc, #580]	; (8007e90 <_strtod_l+0x2b0>)
 8007c4a:	ab19      	add	r3, sp, #100	; 0x64
 8007c4c:	a917      	add	r1, sp, #92	; 0x5c
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f001 fca0 	bl	8009594 <__gethex>
 8007c54:	f010 0507 	ands.w	r5, r0, #7
 8007c58:	4607      	mov	r7, r0
 8007c5a:	d005      	beq.n	8007c68 <_strtod_l+0x88>
 8007c5c:	2d06      	cmp	r5, #6
 8007c5e:	d12b      	bne.n	8007cb8 <_strtod_l+0xd8>
 8007c60:	3601      	adds	r6, #1
 8007c62:	2300      	movs	r3, #0
 8007c64:	9617      	str	r6, [sp, #92]	; 0x5c
 8007c66:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f040 856e 	bne.w	800874c <_strtod_l+0xb6c>
 8007c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c72:	b1e3      	cbz	r3, 8007cae <_strtod_l+0xce>
 8007c74:	ec49 8b17 	vmov	d7, r8, r9
 8007c78:	eeb1 0b47 	vneg.f64	d0, d7
 8007c7c:	b01d      	add	sp, #116	; 0x74
 8007c7e:	ecbd 8b0c 	vpop	{d8-d13}
 8007c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c86:	2a20      	cmp	r2, #32
 8007c88:	d1cd      	bne.n	8007c26 <_strtod_l+0x46>
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007c8e:	e7bf      	b.n	8007c10 <_strtod_l+0x30>
 8007c90:	2a2d      	cmp	r2, #45	; 0x2d
 8007c92:	d1c8      	bne.n	8007c26 <_strtod_l+0x46>
 8007c94:	2201      	movs	r2, #1
 8007c96:	920b      	str	r2, [sp, #44]	; 0x2c
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c9c:	785b      	ldrb	r3, [r3, #1]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1c3      	bne.n	8007c2a <_strtod_l+0x4a>
 8007ca2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ca4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f040 854d 	bne.w	8008748 <_strtod_l+0xb68>
 8007cae:	ec49 8b10 	vmov	d0, r8, r9
 8007cb2:	e7e3      	b.n	8007c7c <_strtod_l+0x9c>
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	e7ee      	b.n	8007c96 <_strtod_l+0xb6>
 8007cb8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007cba:	b13a      	cbz	r2, 8007ccc <_strtod_l+0xec>
 8007cbc:	2135      	movs	r1, #53	; 0x35
 8007cbe:	a81a      	add	r0, sp, #104	; 0x68
 8007cc0:	f002 fc0a 	bl	800a4d8 <__copybits>
 8007cc4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f001 ffce 	bl	8009c68 <_Bfree>
 8007ccc:	3d01      	subs	r5, #1
 8007cce:	2d05      	cmp	r5, #5
 8007cd0:	d807      	bhi.n	8007ce2 <_strtod_l+0x102>
 8007cd2:	e8df f005 	tbb	[pc, r5]
 8007cd6:	0b0e      	.short	0x0b0e
 8007cd8:	030e1d18 	.word	0x030e1d18
 8007cdc:	f04f 0900 	mov.w	r9, #0
 8007ce0:	46c8      	mov	r8, r9
 8007ce2:	073b      	lsls	r3, r7, #28
 8007ce4:	d5c0      	bpl.n	8007c68 <_strtod_l+0x88>
 8007ce6:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007cea:	e7bd      	b.n	8007c68 <_strtod_l+0x88>
 8007cec:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8007cf0:	e7f7      	b.n	8007ce2 <_strtod_l+0x102>
 8007cf2:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8007cf6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007cf8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007cfc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007d00:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007d04:	e7ed      	b.n	8007ce2 <_strtod_l+0x102>
 8007d06:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8007e94 <_strtod_l+0x2b4>
 8007d0a:	f04f 0800 	mov.w	r8, #0
 8007d0e:	e7e8      	b.n	8007ce2 <_strtod_l+0x102>
 8007d10:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007d14:	f04f 38ff 	mov.w	r8, #4294967295
 8007d18:	e7e3      	b.n	8007ce2 <_strtod_l+0x102>
 8007d1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d20:	785b      	ldrb	r3, [r3, #1]
 8007d22:	2b30      	cmp	r3, #48	; 0x30
 8007d24:	d0f9      	beq.n	8007d1a <_strtod_l+0x13a>
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d09e      	beq.n	8007c68 <_strtod_l+0x88>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	9306      	str	r3, [sp, #24]
 8007d2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d30:	930c      	str	r3, [sp, #48]	; 0x30
 8007d32:	2300      	movs	r3, #0
 8007d34:	9304      	str	r3, [sp, #16]
 8007d36:	930a      	str	r3, [sp, #40]	; 0x28
 8007d38:	461e      	mov	r6, r3
 8007d3a:	220a      	movs	r2, #10
 8007d3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007d3e:	f890 b000 	ldrb.w	fp, [r0]
 8007d42:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8007d46:	b2d9      	uxtb	r1, r3
 8007d48:	2909      	cmp	r1, #9
 8007d4a:	d92b      	bls.n	8007da4 <_strtod_l+0x1c4>
 8007d4c:	9908      	ldr	r1, [sp, #32]
 8007d4e:	462a      	mov	r2, r5
 8007d50:	f002 fd9e 	bl	800a890 <strncmp>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	d035      	beq.n	8007dc4 <_strtod_l+0x1e4>
 8007d58:	2000      	movs	r0, #0
 8007d5a:	465a      	mov	r2, fp
 8007d5c:	4633      	mov	r3, r6
 8007d5e:	4683      	mov	fp, r0
 8007d60:	4601      	mov	r1, r0
 8007d62:	2a65      	cmp	r2, #101	; 0x65
 8007d64:	d001      	beq.n	8007d6a <_strtod_l+0x18a>
 8007d66:	2a45      	cmp	r2, #69	; 0x45
 8007d68:	d118      	bne.n	8007d9c <_strtod_l+0x1bc>
 8007d6a:	b91b      	cbnz	r3, 8007d74 <_strtod_l+0x194>
 8007d6c:	9b06      	ldr	r3, [sp, #24]
 8007d6e:	4303      	orrs	r3, r0
 8007d70:	d097      	beq.n	8007ca2 <_strtod_l+0xc2>
 8007d72:	2300      	movs	r3, #0
 8007d74:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8007d78:	f10a 0201 	add.w	r2, sl, #1
 8007d7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d7e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8007d82:	2a2b      	cmp	r2, #43	; 0x2b
 8007d84:	d077      	beq.n	8007e76 <_strtod_l+0x296>
 8007d86:	2a2d      	cmp	r2, #45	; 0x2d
 8007d88:	d07d      	beq.n	8007e86 <_strtod_l+0x2a6>
 8007d8a:	f04f 0e00 	mov.w	lr, #0
 8007d8e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007d92:	2d09      	cmp	r5, #9
 8007d94:	f240 8084 	bls.w	8007ea0 <_strtod_l+0x2c0>
 8007d98:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007d9c:	2500      	movs	r5, #0
 8007d9e:	e09f      	b.n	8007ee0 <_strtod_l+0x300>
 8007da0:	2300      	movs	r3, #0
 8007da2:	e7c3      	b.n	8007d2c <_strtod_l+0x14c>
 8007da4:	2e08      	cmp	r6, #8
 8007da6:	bfd5      	itete	le
 8007da8:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007daa:	9904      	ldrgt	r1, [sp, #16]
 8007dac:	fb02 3301 	mlale	r3, r2, r1, r3
 8007db0:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007db4:	f100 0001 	add.w	r0, r0, #1
 8007db8:	bfd4      	ite	le
 8007dba:	930a      	strle	r3, [sp, #40]	; 0x28
 8007dbc:	9304      	strgt	r3, [sp, #16]
 8007dbe:	3601      	adds	r6, #1
 8007dc0:	9017      	str	r0, [sp, #92]	; 0x5c
 8007dc2:	e7bb      	b.n	8007d3c <_strtod_l+0x15c>
 8007dc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007dc6:	195a      	adds	r2, r3, r5
 8007dc8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007dca:	5d5a      	ldrb	r2, [r3, r5]
 8007dcc:	b3ae      	cbz	r6, 8007e3a <_strtod_l+0x25a>
 8007dce:	4683      	mov	fp, r0
 8007dd0:	4633      	mov	r3, r6
 8007dd2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007dd6:	2909      	cmp	r1, #9
 8007dd8:	d912      	bls.n	8007e00 <_strtod_l+0x220>
 8007dda:	2101      	movs	r1, #1
 8007ddc:	e7c1      	b.n	8007d62 <_strtod_l+0x182>
 8007dde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	9217      	str	r2, [sp, #92]	; 0x5c
 8007de4:	785a      	ldrb	r2, [r3, #1]
 8007de6:	3001      	adds	r0, #1
 8007de8:	2a30      	cmp	r2, #48	; 0x30
 8007dea:	d0f8      	beq.n	8007dde <_strtod_l+0x1fe>
 8007dec:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007df0:	2b08      	cmp	r3, #8
 8007df2:	f200 84b0 	bhi.w	8008756 <_strtod_l+0xb76>
 8007df6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007df8:	930c      	str	r3, [sp, #48]	; 0x30
 8007dfa:	4683      	mov	fp, r0
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	4603      	mov	r3, r0
 8007e00:	3a30      	subs	r2, #48	; 0x30
 8007e02:	f100 0101 	add.w	r1, r0, #1
 8007e06:	d012      	beq.n	8007e2e <_strtod_l+0x24e>
 8007e08:	448b      	add	fp, r1
 8007e0a:	eb00 0c03 	add.w	ip, r0, r3
 8007e0e:	4619      	mov	r1, r3
 8007e10:	250a      	movs	r5, #10
 8007e12:	4561      	cmp	r1, ip
 8007e14:	d113      	bne.n	8007e3e <_strtod_l+0x25e>
 8007e16:	1819      	adds	r1, r3, r0
 8007e18:	2908      	cmp	r1, #8
 8007e1a:	f103 0301 	add.w	r3, r3, #1
 8007e1e:	4403      	add	r3, r0
 8007e20:	dc1d      	bgt.n	8007e5e <_strtod_l+0x27e>
 8007e22:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e24:	210a      	movs	r1, #10
 8007e26:	fb01 2200 	mla	r2, r1, r0, r2
 8007e2a:	920a      	str	r2, [sp, #40]	; 0x28
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e30:	1c50      	adds	r0, r2, #1
 8007e32:	9017      	str	r0, [sp, #92]	; 0x5c
 8007e34:	7852      	ldrb	r2, [r2, #1]
 8007e36:	4608      	mov	r0, r1
 8007e38:	e7cb      	b.n	8007dd2 <_strtod_l+0x1f2>
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	e7d4      	b.n	8007de8 <_strtod_l+0x208>
 8007e3e:	2908      	cmp	r1, #8
 8007e40:	dc04      	bgt.n	8007e4c <_strtod_l+0x26c>
 8007e42:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007e44:	436f      	muls	r7, r5
 8007e46:	970a      	str	r7, [sp, #40]	; 0x28
 8007e48:	3101      	adds	r1, #1
 8007e4a:	e7e2      	b.n	8007e12 <_strtod_l+0x232>
 8007e4c:	f101 0e01 	add.w	lr, r1, #1
 8007e50:	f1be 0f10 	cmp.w	lr, #16
 8007e54:	bfde      	ittt	le
 8007e56:	9f04      	ldrle	r7, [sp, #16]
 8007e58:	436f      	mulle	r7, r5
 8007e5a:	9704      	strle	r7, [sp, #16]
 8007e5c:	e7f4      	b.n	8007e48 <_strtod_l+0x268>
 8007e5e:	2b10      	cmp	r3, #16
 8007e60:	bfdf      	itttt	le
 8007e62:	9804      	ldrle	r0, [sp, #16]
 8007e64:	210a      	movle	r1, #10
 8007e66:	fb01 2200 	mlale	r2, r1, r0, r2
 8007e6a:	9204      	strle	r2, [sp, #16]
 8007e6c:	e7de      	b.n	8007e2c <_strtod_l+0x24c>
 8007e6e:	f04f 0b00 	mov.w	fp, #0
 8007e72:	2101      	movs	r1, #1
 8007e74:	e77a      	b.n	8007d6c <_strtod_l+0x18c>
 8007e76:	f04f 0e00 	mov.w	lr, #0
 8007e7a:	f10a 0202 	add.w	r2, sl, #2
 8007e7e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e80:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8007e84:	e783      	b.n	8007d8e <_strtod_l+0x1ae>
 8007e86:	f04f 0e01 	mov.w	lr, #1
 8007e8a:	e7f6      	b.n	8007e7a <_strtod_l+0x29a>
 8007e8c:	080242a0 	.word	0x080242a0
 8007e90:	08024050 	.word	0x08024050
 8007e94:	7ff00000 	.word	0x7ff00000
 8007e98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e9a:	1c55      	adds	r5, r2, #1
 8007e9c:	9517      	str	r5, [sp, #92]	; 0x5c
 8007e9e:	7852      	ldrb	r2, [r2, #1]
 8007ea0:	2a30      	cmp	r2, #48	; 0x30
 8007ea2:	d0f9      	beq.n	8007e98 <_strtod_l+0x2b8>
 8007ea4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8007ea8:	2d08      	cmp	r5, #8
 8007eaa:	f63f af77 	bhi.w	8007d9c <_strtod_l+0x1bc>
 8007eae:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007eb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007eb4:	9208      	str	r2, [sp, #32]
 8007eb6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007eb8:	1c55      	adds	r5, r2, #1
 8007eba:	9517      	str	r5, [sp, #92]	; 0x5c
 8007ebc:	7852      	ldrb	r2, [r2, #1]
 8007ebe:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8007ec2:	2f09      	cmp	r7, #9
 8007ec4:	d937      	bls.n	8007f36 <_strtod_l+0x356>
 8007ec6:	9f08      	ldr	r7, [sp, #32]
 8007ec8:	1bed      	subs	r5, r5, r7
 8007eca:	2d08      	cmp	r5, #8
 8007ecc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007ed0:	dc02      	bgt.n	8007ed8 <_strtod_l+0x2f8>
 8007ed2:	4565      	cmp	r5, ip
 8007ed4:	bfa8      	it	ge
 8007ed6:	4665      	movge	r5, ip
 8007ed8:	f1be 0f00 	cmp.w	lr, #0
 8007edc:	d000      	beq.n	8007ee0 <_strtod_l+0x300>
 8007ede:	426d      	negs	r5, r5
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d14f      	bne.n	8007f84 <_strtod_l+0x3a4>
 8007ee4:	9b06      	ldr	r3, [sp, #24]
 8007ee6:	4303      	orrs	r3, r0
 8007ee8:	f47f aebe 	bne.w	8007c68 <_strtod_l+0x88>
 8007eec:	2900      	cmp	r1, #0
 8007eee:	f47f aed8 	bne.w	8007ca2 <_strtod_l+0xc2>
 8007ef2:	2a69      	cmp	r2, #105	; 0x69
 8007ef4:	d027      	beq.n	8007f46 <_strtod_l+0x366>
 8007ef6:	dc24      	bgt.n	8007f42 <_strtod_l+0x362>
 8007ef8:	2a49      	cmp	r2, #73	; 0x49
 8007efa:	d024      	beq.n	8007f46 <_strtod_l+0x366>
 8007efc:	2a4e      	cmp	r2, #78	; 0x4e
 8007efe:	f47f aed0 	bne.w	8007ca2 <_strtod_l+0xc2>
 8007f02:	499b      	ldr	r1, [pc, #620]	; (8008170 <_strtod_l+0x590>)
 8007f04:	a817      	add	r0, sp, #92	; 0x5c
 8007f06:	f001 fd9d 	bl	8009a44 <__match>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	f43f aec9 	beq.w	8007ca2 <_strtod_l+0xc2>
 8007f10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	2b28      	cmp	r3, #40	; 0x28
 8007f16:	d12d      	bne.n	8007f74 <_strtod_l+0x394>
 8007f18:	4996      	ldr	r1, [pc, #600]	; (8008174 <_strtod_l+0x594>)
 8007f1a:	aa1a      	add	r2, sp, #104	; 0x68
 8007f1c:	a817      	add	r0, sp, #92	; 0x5c
 8007f1e:	f001 fda5 	bl	8009a6c <__hexnan>
 8007f22:	2805      	cmp	r0, #5
 8007f24:	d126      	bne.n	8007f74 <_strtod_l+0x394>
 8007f26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f28:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007f2c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007f30:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007f34:	e698      	b.n	8007c68 <_strtod_l+0x88>
 8007f36:	250a      	movs	r5, #10
 8007f38:	fb05 250c 	mla	r5, r5, ip, r2
 8007f3c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8007f40:	e7b9      	b.n	8007eb6 <_strtod_l+0x2d6>
 8007f42:	2a6e      	cmp	r2, #110	; 0x6e
 8007f44:	e7db      	b.n	8007efe <_strtod_l+0x31e>
 8007f46:	498c      	ldr	r1, [pc, #560]	; (8008178 <_strtod_l+0x598>)
 8007f48:	a817      	add	r0, sp, #92	; 0x5c
 8007f4a:	f001 fd7b 	bl	8009a44 <__match>
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	f43f aea7 	beq.w	8007ca2 <_strtod_l+0xc2>
 8007f54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f56:	4989      	ldr	r1, [pc, #548]	; (800817c <_strtod_l+0x59c>)
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	a817      	add	r0, sp, #92	; 0x5c
 8007f5c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007f5e:	f001 fd71 	bl	8009a44 <__match>
 8007f62:	b910      	cbnz	r0, 8007f6a <_strtod_l+0x38a>
 8007f64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f66:	3301      	adds	r3, #1
 8007f68:	9317      	str	r3, [sp, #92]	; 0x5c
 8007f6a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8008190 <_strtod_l+0x5b0>
 8007f6e:	f04f 0800 	mov.w	r8, #0
 8007f72:	e679      	b.n	8007c68 <_strtod_l+0x88>
 8007f74:	4882      	ldr	r0, [pc, #520]	; (8008180 <_strtod_l+0x5a0>)
 8007f76:	f002 fc83 	bl	800a880 <nan>
 8007f7a:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007f7e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007f82:	e671      	b.n	8007c68 <_strtod_l+0x88>
 8007f84:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8007f88:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007f8c:	eba5 020b 	sub.w	r2, r5, fp
 8007f90:	2e00      	cmp	r6, #0
 8007f92:	bf08      	it	eq
 8007f94:	461e      	moveq	r6, r3
 8007f96:	2b10      	cmp	r3, #16
 8007f98:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007f9c:	9206      	str	r2, [sp, #24]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	bfa8      	it	ge
 8007fa2:	2210      	movge	r2, #16
 8007fa4:	2b09      	cmp	r3, #9
 8007fa6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8007faa:	dd0e      	ble.n	8007fca <_strtod_l+0x3ea>
 8007fac:	4975      	ldr	r1, [pc, #468]	; (8008184 <_strtod_l+0x5a4>)
 8007fae:	eddd 7a04 	vldr	s15, [sp, #16]
 8007fb2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007fb6:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8007fba:	ed9d 5b08 	vldr	d5, [sp, #32]
 8007fbe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007fc2:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007fc6:	ec59 8b17 	vmov	r8, r9, d7
 8007fca:	2b0f      	cmp	r3, #15
 8007fcc:	dc37      	bgt.n	800803e <_strtod_l+0x45e>
 8007fce:	9906      	ldr	r1, [sp, #24]
 8007fd0:	2900      	cmp	r1, #0
 8007fd2:	f43f ae49 	beq.w	8007c68 <_strtod_l+0x88>
 8007fd6:	dd23      	ble.n	8008020 <_strtod_l+0x440>
 8007fd8:	2916      	cmp	r1, #22
 8007fda:	dc0b      	bgt.n	8007ff4 <_strtod_l+0x414>
 8007fdc:	4b69      	ldr	r3, [pc, #420]	; (8008184 <_strtod_l+0x5a4>)
 8007fde:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007fe2:	ed93 7b00 	vldr	d7, [r3]
 8007fe6:	ec49 8b16 	vmov	d6, r8, r9
 8007fea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007fee:	ec59 8b17 	vmov	r8, r9, d7
 8007ff2:	e639      	b.n	8007c68 <_strtod_l+0x88>
 8007ff4:	9806      	ldr	r0, [sp, #24]
 8007ff6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8007ffa:	4281      	cmp	r1, r0
 8007ffc:	db1f      	blt.n	800803e <_strtod_l+0x45e>
 8007ffe:	4a61      	ldr	r2, [pc, #388]	; (8008184 <_strtod_l+0x5a4>)
 8008000:	f1c3 030f 	rsb	r3, r3, #15
 8008004:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008008:	ed91 7b00 	vldr	d7, [r1]
 800800c:	ec49 8b16 	vmov	d6, r8, r9
 8008010:	1ac3      	subs	r3, r0, r3
 8008012:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008016:	ee27 7b06 	vmul.f64	d7, d7, d6
 800801a:	ed92 6b00 	vldr	d6, [r2]
 800801e:	e7e4      	b.n	8007fea <_strtod_l+0x40a>
 8008020:	9906      	ldr	r1, [sp, #24]
 8008022:	3116      	adds	r1, #22
 8008024:	db0b      	blt.n	800803e <_strtod_l+0x45e>
 8008026:	4b57      	ldr	r3, [pc, #348]	; (8008184 <_strtod_l+0x5a4>)
 8008028:	ebab 0505 	sub.w	r5, fp, r5
 800802c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008030:	ed95 7b00 	vldr	d7, [r5]
 8008034:	ec49 8b16 	vmov	d6, r8, r9
 8008038:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800803c:	e7d7      	b.n	8007fee <_strtod_l+0x40e>
 800803e:	9906      	ldr	r1, [sp, #24]
 8008040:	1a9a      	subs	r2, r3, r2
 8008042:	440a      	add	r2, r1
 8008044:	2a00      	cmp	r2, #0
 8008046:	dd74      	ble.n	8008132 <_strtod_l+0x552>
 8008048:	f012 000f 	ands.w	r0, r2, #15
 800804c:	d00a      	beq.n	8008064 <_strtod_l+0x484>
 800804e:	494d      	ldr	r1, [pc, #308]	; (8008184 <_strtod_l+0x5a4>)
 8008050:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008054:	ed91 7b00 	vldr	d7, [r1]
 8008058:	ec49 8b16 	vmov	d6, r8, r9
 800805c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008060:	ec59 8b17 	vmov	r8, r9, d7
 8008064:	f032 020f 	bics.w	r2, r2, #15
 8008068:	d04f      	beq.n	800810a <_strtod_l+0x52a>
 800806a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800806e:	dd22      	ble.n	80080b6 <_strtod_l+0x4d6>
 8008070:	2500      	movs	r5, #0
 8008072:	462e      	mov	r6, r5
 8008074:	950a      	str	r5, [sp, #40]	; 0x28
 8008076:	462f      	mov	r7, r5
 8008078:	2322      	movs	r3, #34	; 0x22
 800807a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8008190 <_strtod_l+0x5b0>
 800807e:	6023      	str	r3, [r4, #0]
 8008080:	f04f 0800 	mov.w	r8, #0
 8008084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008086:	2b00      	cmp	r3, #0
 8008088:	f43f adee 	beq.w	8007c68 <_strtod_l+0x88>
 800808c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800808e:	4620      	mov	r0, r4
 8008090:	f001 fdea 	bl	8009c68 <_Bfree>
 8008094:	4639      	mov	r1, r7
 8008096:	4620      	mov	r0, r4
 8008098:	f001 fde6 	bl	8009c68 <_Bfree>
 800809c:	4631      	mov	r1, r6
 800809e:	4620      	mov	r0, r4
 80080a0:	f001 fde2 	bl	8009c68 <_Bfree>
 80080a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80080a6:	4620      	mov	r0, r4
 80080a8:	f001 fdde 	bl	8009c68 <_Bfree>
 80080ac:	4629      	mov	r1, r5
 80080ae:	4620      	mov	r0, r4
 80080b0:	f001 fdda 	bl	8009c68 <_Bfree>
 80080b4:	e5d8      	b.n	8007c68 <_strtod_l+0x88>
 80080b6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80080ba:	2000      	movs	r0, #0
 80080bc:	4f32      	ldr	r7, [pc, #200]	; (8008188 <_strtod_l+0x5a8>)
 80080be:	1112      	asrs	r2, r2, #4
 80080c0:	4601      	mov	r1, r0
 80080c2:	2a01      	cmp	r2, #1
 80080c4:	dc24      	bgt.n	8008110 <_strtod_l+0x530>
 80080c6:	b108      	cbz	r0, 80080cc <_strtod_l+0x4ec>
 80080c8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80080cc:	4a2e      	ldr	r2, [pc, #184]	; (8008188 <_strtod_l+0x5a8>)
 80080ce:	482f      	ldr	r0, [pc, #188]	; (800818c <_strtod_l+0x5ac>)
 80080d0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80080d4:	ed91 7b00 	vldr	d7, [r1]
 80080d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80080dc:	ec49 8b16 	vmov	d6, r8, r9
 80080e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80080e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80080e8:	9905      	ldr	r1, [sp, #20]
 80080ea:	4a29      	ldr	r2, [pc, #164]	; (8008190 <_strtod_l+0x5b0>)
 80080ec:	400a      	ands	r2, r1
 80080ee:	4282      	cmp	r2, r0
 80080f0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80080f4:	d8bc      	bhi.n	8008070 <_strtod_l+0x490>
 80080f6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80080fa:	4282      	cmp	r2, r0
 80080fc:	bf86      	itte	hi
 80080fe:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008194 <_strtod_l+0x5b4>
 8008102:	f04f 38ff 	movhi.w	r8, #4294967295
 8008106:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800810a:	2200      	movs	r2, #0
 800810c:	9204      	str	r2, [sp, #16]
 800810e:	e07f      	b.n	8008210 <_strtod_l+0x630>
 8008110:	f012 0f01 	tst.w	r2, #1
 8008114:	d00a      	beq.n	800812c <_strtod_l+0x54c>
 8008116:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 800811a:	ed90 7b00 	vldr	d7, [r0]
 800811e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8008122:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008126:	ed8d 7b04 	vstr	d7, [sp, #16]
 800812a:	2001      	movs	r0, #1
 800812c:	3101      	adds	r1, #1
 800812e:	1052      	asrs	r2, r2, #1
 8008130:	e7c7      	b.n	80080c2 <_strtod_l+0x4e2>
 8008132:	d0ea      	beq.n	800810a <_strtod_l+0x52a>
 8008134:	4252      	negs	r2, r2
 8008136:	f012 000f 	ands.w	r0, r2, #15
 800813a:	d00a      	beq.n	8008152 <_strtod_l+0x572>
 800813c:	4911      	ldr	r1, [pc, #68]	; (8008184 <_strtod_l+0x5a4>)
 800813e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008142:	ed91 7b00 	vldr	d7, [r1]
 8008146:	ec49 8b16 	vmov	d6, r8, r9
 800814a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800814e:	ec59 8b17 	vmov	r8, r9, d7
 8008152:	1112      	asrs	r2, r2, #4
 8008154:	d0d9      	beq.n	800810a <_strtod_l+0x52a>
 8008156:	2a1f      	cmp	r2, #31
 8008158:	dd1e      	ble.n	8008198 <_strtod_l+0x5b8>
 800815a:	2500      	movs	r5, #0
 800815c:	462e      	mov	r6, r5
 800815e:	950a      	str	r5, [sp, #40]	; 0x28
 8008160:	462f      	mov	r7, r5
 8008162:	2322      	movs	r3, #34	; 0x22
 8008164:	f04f 0800 	mov.w	r8, #0
 8008168:	f04f 0900 	mov.w	r9, #0
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	e789      	b.n	8008084 <_strtod_l+0x4a4>
 8008170:	08024021 	.word	0x08024021
 8008174:	08024064 	.word	0x08024064
 8008178:	08024019 	.word	0x08024019
 800817c:	080241a4 	.word	0x080241a4
 8008180:	0800b4f2 	.word	0x0800b4f2
 8008184:	08024340 	.word	0x08024340
 8008188:	08024318 	.word	0x08024318
 800818c:	7ca00000 	.word	0x7ca00000
 8008190:	7ff00000 	.word	0x7ff00000
 8008194:	7fefffff 	.word	0x7fefffff
 8008198:	f012 0110 	ands.w	r1, r2, #16
 800819c:	bf18      	it	ne
 800819e:	216a      	movne	r1, #106	; 0x6a
 80081a0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80081a4:	9104      	str	r1, [sp, #16]
 80081a6:	49c0      	ldr	r1, [pc, #768]	; (80084a8 <_strtod_l+0x8c8>)
 80081a8:	2000      	movs	r0, #0
 80081aa:	07d7      	lsls	r7, r2, #31
 80081ac:	d508      	bpl.n	80081c0 <_strtod_l+0x5e0>
 80081ae:	ed9d 6b08 	vldr	d6, [sp, #32]
 80081b2:	ed91 7b00 	vldr	d7, [r1]
 80081b6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80081ba:	ed8d 7b08 	vstr	d7, [sp, #32]
 80081be:	2001      	movs	r0, #1
 80081c0:	1052      	asrs	r2, r2, #1
 80081c2:	f101 0108 	add.w	r1, r1, #8
 80081c6:	d1f0      	bne.n	80081aa <_strtod_l+0x5ca>
 80081c8:	b108      	cbz	r0, 80081ce <_strtod_l+0x5ee>
 80081ca:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80081ce:	9a04      	ldr	r2, [sp, #16]
 80081d0:	b1ba      	cbz	r2, 8008202 <_strtod_l+0x622>
 80081d2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80081d6:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80081da:	2a00      	cmp	r2, #0
 80081dc:	4649      	mov	r1, r9
 80081de:	dd10      	ble.n	8008202 <_strtod_l+0x622>
 80081e0:	2a1f      	cmp	r2, #31
 80081e2:	f340 8132 	ble.w	800844a <_strtod_l+0x86a>
 80081e6:	2a34      	cmp	r2, #52	; 0x34
 80081e8:	bfde      	ittt	le
 80081ea:	3a20      	suble	r2, #32
 80081ec:	f04f 30ff 	movle.w	r0, #4294967295
 80081f0:	fa00 f202 	lslle.w	r2, r0, r2
 80081f4:	f04f 0800 	mov.w	r8, #0
 80081f8:	bfcc      	ite	gt
 80081fa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80081fe:	ea02 0901 	andle.w	r9, r2, r1
 8008202:	ec49 8b17 	vmov	d7, r8, r9
 8008206:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800820a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800820e:	d0a4      	beq.n	800815a <_strtod_l+0x57a>
 8008210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008212:	9200      	str	r2, [sp, #0]
 8008214:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008216:	4632      	mov	r2, r6
 8008218:	4620      	mov	r0, r4
 800821a:	f001 fd91 	bl	8009d40 <__s2b>
 800821e:	900a      	str	r0, [sp, #40]	; 0x28
 8008220:	2800      	cmp	r0, #0
 8008222:	f43f af25 	beq.w	8008070 <_strtod_l+0x490>
 8008226:	9b06      	ldr	r3, [sp, #24]
 8008228:	ebab 0505 	sub.w	r5, fp, r5
 800822c:	2b00      	cmp	r3, #0
 800822e:	bfb4      	ite	lt
 8008230:	462b      	movlt	r3, r5
 8008232:	2300      	movge	r3, #0
 8008234:	930c      	str	r3, [sp, #48]	; 0x30
 8008236:	9b06      	ldr	r3, [sp, #24]
 8008238:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8008490 <_strtod_l+0x8b0>
 800823c:	ed9f ab96 	vldr	d10, [pc, #600]	; 8008498 <_strtod_l+0x8b8>
 8008240:	ed9f bb97 	vldr	d11, [pc, #604]	; 80084a0 <_strtod_l+0x8c0>
 8008244:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008248:	2500      	movs	r5, #0
 800824a:	9312      	str	r3, [sp, #72]	; 0x48
 800824c:	462e      	mov	r6, r5
 800824e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008250:	4620      	mov	r0, r4
 8008252:	6859      	ldr	r1, [r3, #4]
 8008254:	f001 fcc8 	bl	8009be8 <_Balloc>
 8008258:	4607      	mov	r7, r0
 800825a:	2800      	cmp	r0, #0
 800825c:	f43f af0c 	beq.w	8008078 <_strtod_l+0x498>
 8008260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008262:	691a      	ldr	r2, [r3, #16]
 8008264:	3202      	adds	r2, #2
 8008266:	f103 010c 	add.w	r1, r3, #12
 800826a:	0092      	lsls	r2, r2, #2
 800826c:	300c      	adds	r0, #12
 800826e:	f7fe fd5d 	bl	8006d2c <memcpy>
 8008272:	ec49 8b10 	vmov	d0, r8, r9
 8008276:	aa1a      	add	r2, sp, #104	; 0x68
 8008278:	a919      	add	r1, sp, #100	; 0x64
 800827a:	4620      	mov	r0, r4
 800827c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8008280:	f002 f89a 	bl	800a3b8 <__d2b>
 8008284:	9018      	str	r0, [sp, #96]	; 0x60
 8008286:	2800      	cmp	r0, #0
 8008288:	f43f aef6 	beq.w	8008078 <_strtod_l+0x498>
 800828c:	2101      	movs	r1, #1
 800828e:	4620      	mov	r0, r4
 8008290:	f001 fdf0 	bl	8009e74 <__i2b>
 8008294:	4606      	mov	r6, r0
 8008296:	2800      	cmp	r0, #0
 8008298:	f43f aeee 	beq.w	8008078 <_strtod_l+0x498>
 800829c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800829e:	991a      	ldr	r1, [sp, #104]	; 0x68
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	bfab      	itete	ge
 80082a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80082a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80082a8:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 80082ac:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 80082b0:	bfac      	ite	ge
 80082b2:	eb03 0b02 	addge.w	fp, r3, r2
 80082b6:	eba2 0a03 	sublt.w	sl, r2, r3
 80082ba:	9a04      	ldr	r2, [sp, #16]
 80082bc:	1a9b      	subs	r3, r3, r2
 80082be:	440b      	add	r3, r1
 80082c0:	4a7a      	ldr	r2, [pc, #488]	; (80084ac <_strtod_l+0x8cc>)
 80082c2:	3b01      	subs	r3, #1
 80082c4:	4293      	cmp	r3, r2
 80082c6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80082ca:	f280 80d1 	bge.w	8008470 <_strtod_l+0x890>
 80082ce:	1ad2      	subs	r2, r2, r3
 80082d0:	2a1f      	cmp	r2, #31
 80082d2:	eba1 0102 	sub.w	r1, r1, r2
 80082d6:	f04f 0001 	mov.w	r0, #1
 80082da:	f300 80bd 	bgt.w	8008458 <_strtod_l+0x878>
 80082de:	fa00 f302 	lsl.w	r3, r0, r2
 80082e2:	930e      	str	r3, [sp, #56]	; 0x38
 80082e4:	2300      	movs	r3, #0
 80082e6:	930d      	str	r3, [sp, #52]	; 0x34
 80082e8:	eb0b 0301 	add.w	r3, fp, r1
 80082ec:	9a04      	ldr	r2, [sp, #16]
 80082ee:	459b      	cmp	fp, r3
 80082f0:	448a      	add	sl, r1
 80082f2:	4492      	add	sl, r2
 80082f4:	465a      	mov	r2, fp
 80082f6:	bfa8      	it	ge
 80082f8:	461a      	movge	r2, r3
 80082fa:	4552      	cmp	r2, sl
 80082fc:	bfa8      	it	ge
 80082fe:	4652      	movge	r2, sl
 8008300:	2a00      	cmp	r2, #0
 8008302:	bfc2      	ittt	gt
 8008304:	1a9b      	subgt	r3, r3, r2
 8008306:	ebaa 0a02 	subgt.w	sl, sl, r2
 800830a:	ebab 0b02 	subgt.w	fp, fp, r2
 800830e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008310:	2a00      	cmp	r2, #0
 8008312:	dd18      	ble.n	8008346 <_strtod_l+0x766>
 8008314:	4631      	mov	r1, r6
 8008316:	4620      	mov	r0, r4
 8008318:	9315      	str	r3, [sp, #84]	; 0x54
 800831a:	f001 fe67 	bl	8009fec <__pow5mult>
 800831e:	4606      	mov	r6, r0
 8008320:	2800      	cmp	r0, #0
 8008322:	f43f aea9 	beq.w	8008078 <_strtod_l+0x498>
 8008326:	4601      	mov	r1, r0
 8008328:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800832a:	4620      	mov	r0, r4
 800832c:	f001 fdb8 	bl	8009ea0 <__multiply>
 8008330:	9014      	str	r0, [sp, #80]	; 0x50
 8008332:	2800      	cmp	r0, #0
 8008334:	f43f aea0 	beq.w	8008078 <_strtod_l+0x498>
 8008338:	9918      	ldr	r1, [sp, #96]	; 0x60
 800833a:	4620      	mov	r0, r4
 800833c:	f001 fc94 	bl	8009c68 <_Bfree>
 8008340:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008342:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008344:	9218      	str	r2, [sp, #96]	; 0x60
 8008346:	2b00      	cmp	r3, #0
 8008348:	f300 8097 	bgt.w	800847a <_strtod_l+0x89a>
 800834c:	9b06      	ldr	r3, [sp, #24]
 800834e:	2b00      	cmp	r3, #0
 8008350:	dd08      	ble.n	8008364 <_strtod_l+0x784>
 8008352:	4639      	mov	r1, r7
 8008354:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008356:	4620      	mov	r0, r4
 8008358:	f001 fe48 	bl	8009fec <__pow5mult>
 800835c:	4607      	mov	r7, r0
 800835e:	2800      	cmp	r0, #0
 8008360:	f43f ae8a 	beq.w	8008078 <_strtod_l+0x498>
 8008364:	f1ba 0f00 	cmp.w	sl, #0
 8008368:	dd08      	ble.n	800837c <_strtod_l+0x79c>
 800836a:	4639      	mov	r1, r7
 800836c:	4652      	mov	r2, sl
 800836e:	4620      	mov	r0, r4
 8008370:	f001 fe96 	bl	800a0a0 <__lshift>
 8008374:	4607      	mov	r7, r0
 8008376:	2800      	cmp	r0, #0
 8008378:	f43f ae7e 	beq.w	8008078 <_strtod_l+0x498>
 800837c:	f1bb 0f00 	cmp.w	fp, #0
 8008380:	dd08      	ble.n	8008394 <_strtod_l+0x7b4>
 8008382:	4631      	mov	r1, r6
 8008384:	465a      	mov	r2, fp
 8008386:	4620      	mov	r0, r4
 8008388:	f001 fe8a 	bl	800a0a0 <__lshift>
 800838c:	4606      	mov	r6, r0
 800838e:	2800      	cmp	r0, #0
 8008390:	f43f ae72 	beq.w	8008078 <_strtod_l+0x498>
 8008394:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008396:	463a      	mov	r2, r7
 8008398:	4620      	mov	r0, r4
 800839a:	f001 ff09 	bl	800a1b0 <__mdiff>
 800839e:	4605      	mov	r5, r0
 80083a0:	2800      	cmp	r0, #0
 80083a2:	f43f ae69 	beq.w	8008078 <_strtod_l+0x498>
 80083a6:	2300      	movs	r3, #0
 80083a8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80083ac:	60c3      	str	r3, [r0, #12]
 80083ae:	4631      	mov	r1, r6
 80083b0:	f001 fee2 	bl	800a178 <__mcmp>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	da7f      	bge.n	80084b8 <_strtod_l+0x8d8>
 80083b8:	ea5a 0308 	orrs.w	r3, sl, r8
 80083bc:	f040 80a5 	bne.w	800850a <_strtod_l+0x92a>
 80083c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f040 80a0 	bne.w	800850a <_strtod_l+0x92a>
 80083ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083ce:	0d1b      	lsrs	r3, r3, #20
 80083d0:	051b      	lsls	r3, r3, #20
 80083d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80083d6:	f240 8098 	bls.w	800850a <_strtod_l+0x92a>
 80083da:	696b      	ldr	r3, [r5, #20]
 80083dc:	b91b      	cbnz	r3, 80083e6 <_strtod_l+0x806>
 80083de:	692b      	ldr	r3, [r5, #16]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	f340 8092 	ble.w	800850a <_strtod_l+0x92a>
 80083e6:	4629      	mov	r1, r5
 80083e8:	2201      	movs	r2, #1
 80083ea:	4620      	mov	r0, r4
 80083ec:	f001 fe58 	bl	800a0a0 <__lshift>
 80083f0:	4631      	mov	r1, r6
 80083f2:	4605      	mov	r5, r0
 80083f4:	f001 fec0 	bl	800a178 <__mcmp>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	f340 8086 	ble.w	800850a <_strtod_l+0x92a>
 80083fe:	9904      	ldr	r1, [sp, #16]
 8008400:	4a2b      	ldr	r2, [pc, #172]	; (80084b0 <_strtod_l+0x8d0>)
 8008402:	464b      	mov	r3, r9
 8008404:	2900      	cmp	r1, #0
 8008406:	f000 80a1 	beq.w	800854c <_strtod_l+0x96c>
 800840a:	ea02 0109 	and.w	r1, r2, r9
 800840e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008412:	f300 809b 	bgt.w	800854c <_strtod_l+0x96c>
 8008416:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800841a:	f77f aea2 	ble.w	8008162 <_strtod_l+0x582>
 800841e:	4a25      	ldr	r2, [pc, #148]	; (80084b4 <_strtod_l+0x8d4>)
 8008420:	2300      	movs	r3, #0
 8008422:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8008426:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800842a:	ec49 8b17 	vmov	d7, r8, r9
 800842e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008432:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008436:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800843a:	4313      	orrs	r3, r2
 800843c:	bf08      	it	eq
 800843e:	2322      	moveq	r3, #34	; 0x22
 8008440:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008444:	bf08      	it	eq
 8008446:	6023      	streq	r3, [r4, #0]
 8008448:	e620      	b.n	800808c <_strtod_l+0x4ac>
 800844a:	f04f 31ff 	mov.w	r1, #4294967295
 800844e:	fa01 f202 	lsl.w	r2, r1, r2
 8008452:	ea02 0808 	and.w	r8, r2, r8
 8008456:	e6d4      	b.n	8008202 <_strtod_l+0x622>
 8008458:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800845c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008460:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008464:	33e2      	adds	r3, #226	; 0xe2
 8008466:	fa00 f303 	lsl.w	r3, r0, r3
 800846a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 800846e:	e73b      	b.n	80082e8 <_strtod_l+0x708>
 8008470:	2000      	movs	r0, #0
 8008472:	2301      	movs	r3, #1
 8008474:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8008478:	e736      	b.n	80082e8 <_strtod_l+0x708>
 800847a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800847c:	461a      	mov	r2, r3
 800847e:	4620      	mov	r0, r4
 8008480:	f001 fe0e 	bl	800a0a0 <__lshift>
 8008484:	9018      	str	r0, [sp, #96]	; 0x60
 8008486:	2800      	cmp	r0, #0
 8008488:	f47f af60 	bne.w	800834c <_strtod_l+0x76c>
 800848c:	e5f4      	b.n	8008078 <_strtod_l+0x498>
 800848e:	bf00      	nop
 8008490:	94a03595 	.word	0x94a03595
 8008494:	3fcfffff 	.word	0x3fcfffff
 8008498:	94a03595 	.word	0x94a03595
 800849c:	3fdfffff 	.word	0x3fdfffff
 80084a0:	35afe535 	.word	0x35afe535
 80084a4:	3fe00000 	.word	0x3fe00000
 80084a8:	08024078 	.word	0x08024078
 80084ac:	fffffc02 	.word	0xfffffc02
 80084b0:	7ff00000 	.word	0x7ff00000
 80084b4:	39500000 	.word	0x39500000
 80084b8:	46cb      	mov	fp, r9
 80084ba:	d165      	bne.n	8008588 <_strtod_l+0x9a8>
 80084bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084c0:	f1ba 0f00 	cmp.w	sl, #0
 80084c4:	d02a      	beq.n	800851c <_strtod_l+0x93c>
 80084c6:	4aaa      	ldr	r2, [pc, #680]	; (8008770 <_strtod_l+0xb90>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d12b      	bne.n	8008524 <_strtod_l+0x944>
 80084cc:	9b04      	ldr	r3, [sp, #16]
 80084ce:	4641      	mov	r1, r8
 80084d0:	b1fb      	cbz	r3, 8008512 <_strtod_l+0x932>
 80084d2:	4aa8      	ldr	r2, [pc, #672]	; (8008774 <_strtod_l+0xb94>)
 80084d4:	ea09 0202 	and.w	r2, r9, r2
 80084d8:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80084dc:	f04f 30ff 	mov.w	r0, #4294967295
 80084e0:	d81a      	bhi.n	8008518 <_strtod_l+0x938>
 80084e2:	0d12      	lsrs	r2, r2, #20
 80084e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80084e8:	fa00 f303 	lsl.w	r3, r0, r3
 80084ec:	4299      	cmp	r1, r3
 80084ee:	d119      	bne.n	8008524 <_strtod_l+0x944>
 80084f0:	4ba1      	ldr	r3, [pc, #644]	; (8008778 <_strtod_l+0xb98>)
 80084f2:	459b      	cmp	fp, r3
 80084f4:	d102      	bne.n	80084fc <_strtod_l+0x91c>
 80084f6:	3101      	adds	r1, #1
 80084f8:	f43f adbe 	beq.w	8008078 <_strtod_l+0x498>
 80084fc:	4b9d      	ldr	r3, [pc, #628]	; (8008774 <_strtod_l+0xb94>)
 80084fe:	ea0b 0303 	and.w	r3, fp, r3
 8008502:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008506:	f04f 0800 	mov.w	r8, #0
 800850a:	9b04      	ldr	r3, [sp, #16]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d186      	bne.n	800841e <_strtod_l+0x83e>
 8008510:	e5bc      	b.n	800808c <_strtod_l+0x4ac>
 8008512:	f04f 33ff 	mov.w	r3, #4294967295
 8008516:	e7e9      	b.n	80084ec <_strtod_l+0x90c>
 8008518:	4603      	mov	r3, r0
 800851a:	e7e7      	b.n	80084ec <_strtod_l+0x90c>
 800851c:	ea53 0308 	orrs.w	r3, r3, r8
 8008520:	f43f af6d 	beq.w	80083fe <_strtod_l+0x81e>
 8008524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008526:	b1db      	cbz	r3, 8008560 <_strtod_l+0x980>
 8008528:	ea13 0f0b 	tst.w	r3, fp
 800852c:	d0ed      	beq.n	800850a <_strtod_l+0x92a>
 800852e:	9a04      	ldr	r2, [sp, #16]
 8008530:	4640      	mov	r0, r8
 8008532:	4649      	mov	r1, r9
 8008534:	f1ba 0f00 	cmp.w	sl, #0
 8008538:	d016      	beq.n	8008568 <_strtod_l+0x988>
 800853a:	f7ff fb37 	bl	8007bac <sulp>
 800853e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008542:	ee37 7b00 	vadd.f64	d7, d7, d0
 8008546:	ec59 8b17 	vmov	r8, r9, d7
 800854a:	e7de      	b.n	800850a <_strtod_l+0x92a>
 800854c:	4013      	ands	r3, r2
 800854e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008552:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008556:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800855a:	f04f 38ff 	mov.w	r8, #4294967295
 800855e:	e7d4      	b.n	800850a <_strtod_l+0x92a>
 8008560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008562:	ea13 0f08 	tst.w	r3, r8
 8008566:	e7e1      	b.n	800852c <_strtod_l+0x94c>
 8008568:	f7ff fb20 	bl	8007bac <sulp>
 800856c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008570:	ee37 7b40 	vsub.f64	d7, d7, d0
 8008574:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008578:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800857c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008580:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8008584:	d1c1      	bne.n	800850a <_strtod_l+0x92a>
 8008586:	e5ec      	b.n	8008162 <_strtod_l+0x582>
 8008588:	4631      	mov	r1, r6
 800858a:	4628      	mov	r0, r5
 800858c:	f001 ff70 	bl	800a470 <__ratio>
 8008590:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008594:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800859c:	d867      	bhi.n	800866e <_strtod_l+0xa8e>
 800859e:	f1ba 0f00 	cmp.w	sl, #0
 80085a2:	d044      	beq.n	800862e <_strtod_l+0xa4e>
 80085a4:	4b75      	ldr	r3, [pc, #468]	; (800877c <_strtod_l+0xb9c>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80085ac:	4971      	ldr	r1, [pc, #452]	; (8008774 <_strtod_l+0xb94>)
 80085ae:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8008788 <_strtod_l+0xba8>
 80085b2:	ea0b 0001 	and.w	r0, fp, r1
 80085b6:	4560      	cmp	r0, ip
 80085b8:	900d      	str	r0, [sp, #52]	; 0x34
 80085ba:	f040 808b 	bne.w	80086d4 <_strtod_l+0xaf4>
 80085be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085c2:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80085c6:	ec49 8b10 	vmov	d0, r8, r9
 80085ca:	ec43 2b1c 	vmov	d12, r2, r3
 80085ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80085d2:	f001 fe75 	bl	800a2c0 <__ulp>
 80085d6:	ec49 8b1d 	vmov	d13, r8, r9
 80085da:	eeac db00 	vfma.f64	d13, d12, d0
 80085de:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 80085e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085e4:	4963      	ldr	r1, [pc, #396]	; (8008774 <_strtod_l+0xb94>)
 80085e6:	4a66      	ldr	r2, [pc, #408]	; (8008780 <_strtod_l+0xba0>)
 80085e8:	4019      	ands	r1, r3
 80085ea:	4291      	cmp	r1, r2
 80085ec:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80085f0:	d947      	bls.n	8008682 <_strtod_l+0xaa2>
 80085f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d103      	bne.n	8008604 <_strtod_l+0xa24>
 80085fc:	9b08      	ldr	r3, [sp, #32]
 80085fe:	3301      	adds	r3, #1
 8008600:	f43f ad3a 	beq.w	8008078 <_strtod_l+0x498>
 8008604:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8008778 <_strtod_l+0xb98>
 8008608:	f04f 38ff 	mov.w	r8, #4294967295
 800860c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800860e:	4620      	mov	r0, r4
 8008610:	f001 fb2a 	bl	8009c68 <_Bfree>
 8008614:	4639      	mov	r1, r7
 8008616:	4620      	mov	r0, r4
 8008618:	f001 fb26 	bl	8009c68 <_Bfree>
 800861c:	4631      	mov	r1, r6
 800861e:	4620      	mov	r0, r4
 8008620:	f001 fb22 	bl	8009c68 <_Bfree>
 8008624:	4629      	mov	r1, r5
 8008626:	4620      	mov	r0, r4
 8008628:	f001 fb1e 	bl	8009c68 <_Bfree>
 800862c:	e60f      	b.n	800824e <_strtod_l+0x66e>
 800862e:	f1b8 0f00 	cmp.w	r8, #0
 8008632:	d112      	bne.n	800865a <_strtod_l+0xa7a>
 8008634:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008638:	b9b3      	cbnz	r3, 8008668 <_strtod_l+0xa88>
 800863a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800863e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008646:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800864a:	d401      	bmi.n	8008650 <_strtod_l+0xa70>
 800864c:	ee20 8b08 	vmul.f64	d8, d0, d8
 8008650:	eeb1 7b48 	vneg.f64	d7, d8
 8008654:	ec53 2b17 	vmov	r2, r3, d7
 8008658:	e7a8      	b.n	80085ac <_strtod_l+0x9cc>
 800865a:	f1b8 0f01 	cmp.w	r8, #1
 800865e:	d103      	bne.n	8008668 <_strtod_l+0xa88>
 8008660:	f1b9 0f00 	cmp.w	r9, #0
 8008664:	f43f ad7d 	beq.w	8008162 <_strtod_l+0x582>
 8008668:	4b46      	ldr	r3, [pc, #280]	; (8008784 <_strtod_l+0xba4>)
 800866a:	2200      	movs	r2, #0
 800866c:	e79c      	b.n	80085a8 <_strtod_l+0x9c8>
 800866e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8008672:	ee20 8b08 	vmul.f64	d8, d0, d8
 8008676:	f1ba 0f00 	cmp.w	sl, #0
 800867a:	d0e9      	beq.n	8008650 <_strtod_l+0xa70>
 800867c:	ec53 2b18 	vmov	r2, r3, d8
 8008680:	e794      	b.n	80085ac <_strtod_l+0x9cc>
 8008682:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008686:	9b04      	ldr	r3, [sp, #16]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1bf      	bne.n	800860c <_strtod_l+0xa2c>
 800868c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008690:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008692:	0d1b      	lsrs	r3, r3, #20
 8008694:	051b      	lsls	r3, r3, #20
 8008696:	429a      	cmp	r2, r3
 8008698:	d1b8      	bne.n	800860c <_strtod_l+0xa2c>
 800869a:	ec51 0b18 	vmov	r0, r1, d8
 800869e:	f7f8 f84b 	bl	8000738 <__aeabi_d2lz>
 80086a2:	f7f8 f803 	bl	80006ac <__aeabi_l2d>
 80086a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086aa:	ec41 0b17 	vmov	d7, r0, r1
 80086ae:	ea43 0308 	orr.w	r3, r3, r8
 80086b2:	ea53 030a 	orrs.w	r3, r3, sl
 80086b6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80086ba:	d03e      	beq.n	800873a <_strtod_l+0xb5a>
 80086bc:	eeb4 8bca 	vcmpe.f64	d8, d10
 80086c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086c4:	f53f ace2 	bmi.w	800808c <_strtod_l+0x4ac>
 80086c8:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80086cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d0:	dd9c      	ble.n	800860c <_strtod_l+0xa2c>
 80086d2:	e4db      	b.n	800808c <_strtod_l+0x4ac>
 80086d4:	9904      	ldr	r1, [sp, #16]
 80086d6:	b301      	cbz	r1, 800871a <_strtod_l+0xb3a>
 80086d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80086da:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80086de:	d81c      	bhi.n	800871a <_strtod_l+0xb3a>
 80086e0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008768 <_strtod_l+0xb88>
 80086e4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80086e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ec:	d811      	bhi.n	8008712 <_strtod_l+0xb32>
 80086ee:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80086f2:	ee18 3a10 	vmov	r3, s16
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	bf38      	it	cc
 80086fa:	2301      	movcc	r3, #1
 80086fc:	ee08 3a10 	vmov	s16, r3
 8008700:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8008704:	f1ba 0f00 	cmp.w	sl, #0
 8008708:	d114      	bne.n	8008734 <_strtod_l+0xb54>
 800870a:	eeb1 7b48 	vneg.f64	d7, d8
 800870e:	ec53 2b17 	vmov	r2, r3, d7
 8008712:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008714:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8008718:	1a0b      	subs	r3, r1, r0
 800871a:	ed9d 0b08 	vldr	d0, [sp, #32]
 800871e:	ec43 2b1c 	vmov	d12, r2, r3
 8008722:	f001 fdcd 	bl	800a2c0 <__ulp>
 8008726:	ed9d 7b08 	vldr	d7, [sp, #32]
 800872a:	eeac 7b00 	vfma.f64	d7, d12, d0
 800872e:	ec59 8b17 	vmov	r8, r9, d7
 8008732:	e7a8      	b.n	8008686 <_strtod_l+0xaa6>
 8008734:	ec53 2b18 	vmov	r2, r3, d8
 8008738:	e7eb      	b.n	8008712 <_strtod_l+0xb32>
 800873a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800873e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008742:	f57f af63 	bpl.w	800860c <_strtod_l+0xa2c>
 8008746:	e4a1      	b.n	800808c <_strtod_l+0x4ac>
 8008748:	2300      	movs	r3, #0
 800874a:	930b      	str	r3, [sp, #44]	; 0x2c
 800874c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800874e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	f7ff ba8d 	b.w	8007c70 <_strtod_l+0x90>
 8008756:	2a65      	cmp	r2, #101	; 0x65
 8008758:	f43f ab89 	beq.w	8007e6e <_strtod_l+0x28e>
 800875c:	2a45      	cmp	r2, #69	; 0x45
 800875e:	f43f ab86 	beq.w	8007e6e <_strtod_l+0x28e>
 8008762:	2101      	movs	r1, #1
 8008764:	f7ff bbbe 	b.w	8007ee4 <_strtod_l+0x304>
 8008768:	ffc00000 	.word	0xffc00000
 800876c:	41dfffff 	.word	0x41dfffff
 8008770:	000fffff 	.word	0x000fffff
 8008774:	7ff00000 	.word	0x7ff00000
 8008778:	7fefffff 	.word	0x7fefffff
 800877c:	3ff00000 	.word	0x3ff00000
 8008780:	7c9fffff 	.word	0x7c9fffff
 8008784:	bff00000 	.word	0xbff00000
 8008788:	7fe00000 	.word	0x7fe00000

0800878c <_strtod_r>:
 800878c:	4b01      	ldr	r3, [pc, #4]	; (8008794 <_strtod_r+0x8>)
 800878e:	f7ff ba27 	b.w	8007be0 <_strtod_l>
 8008792:	bf00      	nop
 8008794:	24000860 	.word	0x24000860

08008798 <_strtol_l.isra.0>:
 8008798:	2b01      	cmp	r3, #1
 800879a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800879e:	d001      	beq.n	80087a4 <_strtol_l.isra.0+0xc>
 80087a0:	2b24      	cmp	r3, #36	; 0x24
 80087a2:	d906      	bls.n	80087b2 <_strtol_l.isra.0+0x1a>
 80087a4:	f7fe fa90 	bl	8006cc8 <__errno>
 80087a8:	2316      	movs	r3, #22
 80087aa:	6003      	str	r3, [r0, #0]
 80087ac:	2000      	movs	r0, #0
 80087ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b2:	4f3a      	ldr	r7, [pc, #232]	; (800889c <_strtol_l.isra.0+0x104>)
 80087b4:	468e      	mov	lr, r1
 80087b6:	4676      	mov	r6, lr
 80087b8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80087bc:	5de5      	ldrb	r5, [r4, r7]
 80087be:	f015 0508 	ands.w	r5, r5, #8
 80087c2:	d1f8      	bne.n	80087b6 <_strtol_l.isra.0+0x1e>
 80087c4:	2c2d      	cmp	r4, #45	; 0x2d
 80087c6:	d134      	bne.n	8008832 <_strtol_l.isra.0+0x9a>
 80087c8:	f89e 4000 	ldrb.w	r4, [lr]
 80087cc:	f04f 0801 	mov.w	r8, #1
 80087d0:	f106 0e02 	add.w	lr, r6, #2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d05c      	beq.n	8008892 <_strtol_l.isra.0+0xfa>
 80087d8:	2b10      	cmp	r3, #16
 80087da:	d10c      	bne.n	80087f6 <_strtol_l.isra.0+0x5e>
 80087dc:	2c30      	cmp	r4, #48	; 0x30
 80087de:	d10a      	bne.n	80087f6 <_strtol_l.isra.0+0x5e>
 80087e0:	f89e 4000 	ldrb.w	r4, [lr]
 80087e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80087e8:	2c58      	cmp	r4, #88	; 0x58
 80087ea:	d14d      	bne.n	8008888 <_strtol_l.isra.0+0xf0>
 80087ec:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80087f0:	2310      	movs	r3, #16
 80087f2:	f10e 0e02 	add.w	lr, lr, #2
 80087f6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80087fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80087fe:	2600      	movs	r6, #0
 8008800:	fbbc f9f3 	udiv	r9, ip, r3
 8008804:	4635      	mov	r5, r6
 8008806:	fb03 ca19 	mls	sl, r3, r9, ip
 800880a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800880e:	2f09      	cmp	r7, #9
 8008810:	d818      	bhi.n	8008844 <_strtol_l.isra.0+0xac>
 8008812:	463c      	mov	r4, r7
 8008814:	42a3      	cmp	r3, r4
 8008816:	dd24      	ble.n	8008862 <_strtol_l.isra.0+0xca>
 8008818:	2e00      	cmp	r6, #0
 800881a:	db1f      	blt.n	800885c <_strtol_l.isra.0+0xc4>
 800881c:	45a9      	cmp	r9, r5
 800881e:	d31d      	bcc.n	800885c <_strtol_l.isra.0+0xc4>
 8008820:	d101      	bne.n	8008826 <_strtol_l.isra.0+0x8e>
 8008822:	45a2      	cmp	sl, r4
 8008824:	db1a      	blt.n	800885c <_strtol_l.isra.0+0xc4>
 8008826:	fb05 4503 	mla	r5, r5, r3, r4
 800882a:	2601      	movs	r6, #1
 800882c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008830:	e7eb      	b.n	800880a <_strtol_l.isra.0+0x72>
 8008832:	2c2b      	cmp	r4, #43	; 0x2b
 8008834:	bf08      	it	eq
 8008836:	f89e 4000 	ldrbeq.w	r4, [lr]
 800883a:	46a8      	mov	r8, r5
 800883c:	bf08      	it	eq
 800883e:	f106 0e02 	addeq.w	lr, r6, #2
 8008842:	e7c7      	b.n	80087d4 <_strtol_l.isra.0+0x3c>
 8008844:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008848:	2f19      	cmp	r7, #25
 800884a:	d801      	bhi.n	8008850 <_strtol_l.isra.0+0xb8>
 800884c:	3c37      	subs	r4, #55	; 0x37
 800884e:	e7e1      	b.n	8008814 <_strtol_l.isra.0+0x7c>
 8008850:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008854:	2f19      	cmp	r7, #25
 8008856:	d804      	bhi.n	8008862 <_strtol_l.isra.0+0xca>
 8008858:	3c57      	subs	r4, #87	; 0x57
 800885a:	e7db      	b.n	8008814 <_strtol_l.isra.0+0x7c>
 800885c:	f04f 36ff 	mov.w	r6, #4294967295
 8008860:	e7e4      	b.n	800882c <_strtol_l.isra.0+0x94>
 8008862:	2e00      	cmp	r6, #0
 8008864:	da05      	bge.n	8008872 <_strtol_l.isra.0+0xda>
 8008866:	2322      	movs	r3, #34	; 0x22
 8008868:	6003      	str	r3, [r0, #0]
 800886a:	4665      	mov	r5, ip
 800886c:	b942      	cbnz	r2, 8008880 <_strtol_l.isra.0+0xe8>
 800886e:	4628      	mov	r0, r5
 8008870:	e79d      	b.n	80087ae <_strtol_l.isra.0+0x16>
 8008872:	f1b8 0f00 	cmp.w	r8, #0
 8008876:	d000      	beq.n	800887a <_strtol_l.isra.0+0xe2>
 8008878:	426d      	negs	r5, r5
 800887a:	2a00      	cmp	r2, #0
 800887c:	d0f7      	beq.n	800886e <_strtol_l.isra.0+0xd6>
 800887e:	b10e      	cbz	r6, 8008884 <_strtol_l.isra.0+0xec>
 8008880:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008884:	6011      	str	r1, [r2, #0]
 8008886:	e7f2      	b.n	800886e <_strtol_l.isra.0+0xd6>
 8008888:	2430      	movs	r4, #48	; 0x30
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1b3      	bne.n	80087f6 <_strtol_l.isra.0+0x5e>
 800888e:	2308      	movs	r3, #8
 8008890:	e7b1      	b.n	80087f6 <_strtol_l.isra.0+0x5e>
 8008892:	2c30      	cmp	r4, #48	; 0x30
 8008894:	d0a4      	beq.n	80087e0 <_strtol_l.isra.0+0x48>
 8008896:	230a      	movs	r3, #10
 8008898:	e7ad      	b.n	80087f6 <_strtol_l.isra.0+0x5e>
 800889a:	bf00      	nop
 800889c:	080240a1 	.word	0x080240a1

080088a0 <_strtol_r>:
 80088a0:	f7ff bf7a 	b.w	8008798 <_strtol_l.isra.0>

080088a4 <quorem>:
 80088a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a8:	6903      	ldr	r3, [r0, #16]
 80088aa:	690c      	ldr	r4, [r1, #16]
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	4607      	mov	r7, r0
 80088b0:	f2c0 8081 	blt.w	80089b6 <quorem+0x112>
 80088b4:	3c01      	subs	r4, #1
 80088b6:	f101 0814 	add.w	r8, r1, #20
 80088ba:	f100 0514 	add.w	r5, r0, #20
 80088be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088c2:	9301      	str	r3, [sp, #4]
 80088c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088cc:	3301      	adds	r3, #1
 80088ce:	429a      	cmp	r2, r3
 80088d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80088d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80088dc:	d331      	bcc.n	8008942 <quorem+0x9e>
 80088de:	f04f 0e00 	mov.w	lr, #0
 80088e2:	4640      	mov	r0, r8
 80088e4:	46ac      	mov	ip, r5
 80088e6:	46f2      	mov	sl, lr
 80088e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80088ec:	b293      	uxth	r3, r2
 80088ee:	fb06 e303 	mla	r3, r6, r3, lr
 80088f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	ebaa 0303 	sub.w	r3, sl, r3
 80088fc:	0c12      	lsrs	r2, r2, #16
 80088fe:	f8dc a000 	ldr.w	sl, [ip]
 8008902:	fb06 e202 	mla	r2, r6, r2, lr
 8008906:	fa13 f38a 	uxtah	r3, r3, sl
 800890a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800890e:	fa1f fa82 	uxth.w	sl, r2
 8008912:	f8dc 2000 	ldr.w	r2, [ip]
 8008916:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800891a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800891e:	b29b      	uxth	r3, r3
 8008920:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008924:	4581      	cmp	r9, r0
 8008926:	f84c 3b04 	str.w	r3, [ip], #4
 800892a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800892e:	d2db      	bcs.n	80088e8 <quorem+0x44>
 8008930:	f855 300b 	ldr.w	r3, [r5, fp]
 8008934:	b92b      	cbnz	r3, 8008942 <quorem+0x9e>
 8008936:	9b01      	ldr	r3, [sp, #4]
 8008938:	3b04      	subs	r3, #4
 800893a:	429d      	cmp	r5, r3
 800893c:	461a      	mov	r2, r3
 800893e:	d32e      	bcc.n	800899e <quorem+0xfa>
 8008940:	613c      	str	r4, [r7, #16]
 8008942:	4638      	mov	r0, r7
 8008944:	f001 fc18 	bl	800a178 <__mcmp>
 8008948:	2800      	cmp	r0, #0
 800894a:	db24      	blt.n	8008996 <quorem+0xf2>
 800894c:	3601      	adds	r6, #1
 800894e:	4628      	mov	r0, r5
 8008950:	f04f 0c00 	mov.w	ip, #0
 8008954:	f858 2b04 	ldr.w	r2, [r8], #4
 8008958:	f8d0 e000 	ldr.w	lr, [r0]
 800895c:	b293      	uxth	r3, r2
 800895e:	ebac 0303 	sub.w	r3, ip, r3
 8008962:	0c12      	lsrs	r2, r2, #16
 8008964:	fa13 f38e 	uxtah	r3, r3, lr
 8008968:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800896c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008970:	b29b      	uxth	r3, r3
 8008972:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008976:	45c1      	cmp	r9, r8
 8008978:	f840 3b04 	str.w	r3, [r0], #4
 800897c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008980:	d2e8      	bcs.n	8008954 <quorem+0xb0>
 8008982:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008986:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800898a:	b922      	cbnz	r2, 8008996 <quorem+0xf2>
 800898c:	3b04      	subs	r3, #4
 800898e:	429d      	cmp	r5, r3
 8008990:	461a      	mov	r2, r3
 8008992:	d30a      	bcc.n	80089aa <quorem+0x106>
 8008994:	613c      	str	r4, [r7, #16]
 8008996:	4630      	mov	r0, r6
 8008998:	b003      	add	sp, #12
 800899a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899e:	6812      	ldr	r2, [r2, #0]
 80089a0:	3b04      	subs	r3, #4
 80089a2:	2a00      	cmp	r2, #0
 80089a4:	d1cc      	bne.n	8008940 <quorem+0x9c>
 80089a6:	3c01      	subs	r4, #1
 80089a8:	e7c7      	b.n	800893a <quorem+0x96>
 80089aa:	6812      	ldr	r2, [r2, #0]
 80089ac:	3b04      	subs	r3, #4
 80089ae:	2a00      	cmp	r2, #0
 80089b0:	d1f0      	bne.n	8008994 <quorem+0xf0>
 80089b2:	3c01      	subs	r4, #1
 80089b4:	e7eb      	b.n	800898e <quorem+0xea>
 80089b6:	2000      	movs	r0, #0
 80089b8:	e7ee      	b.n	8008998 <quorem+0xf4>
 80089ba:	0000      	movs	r0, r0
 80089bc:	0000      	movs	r0, r0
	...

080089c0 <_dtoa_r>:
 80089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	ec59 8b10 	vmov	r8, r9, d0
 80089c8:	b095      	sub	sp, #84	; 0x54
 80089ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80089cc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80089ce:	9107      	str	r1, [sp, #28]
 80089d0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80089d4:	4606      	mov	r6, r0
 80089d6:	9209      	str	r2, [sp, #36]	; 0x24
 80089d8:	9310      	str	r3, [sp, #64]	; 0x40
 80089da:	b975      	cbnz	r5, 80089fa <_dtoa_r+0x3a>
 80089dc:	2010      	movs	r0, #16
 80089de:	f7fe f99d 	bl	8006d1c <malloc>
 80089e2:	4602      	mov	r2, r0
 80089e4:	6270      	str	r0, [r6, #36]	; 0x24
 80089e6:	b920      	cbnz	r0, 80089f2 <_dtoa_r+0x32>
 80089e8:	4bab      	ldr	r3, [pc, #684]	; (8008c98 <_dtoa_r+0x2d8>)
 80089ea:	21ea      	movs	r1, #234	; 0xea
 80089ec:	48ab      	ldr	r0, [pc, #684]	; (8008c9c <_dtoa_r+0x2dc>)
 80089ee:	f001 ff6f 	bl	800a8d0 <__assert_func>
 80089f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089f6:	6005      	str	r5, [r0, #0]
 80089f8:	60c5      	str	r5, [r0, #12]
 80089fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80089fc:	6819      	ldr	r1, [r3, #0]
 80089fe:	b151      	cbz	r1, 8008a16 <_dtoa_r+0x56>
 8008a00:	685a      	ldr	r2, [r3, #4]
 8008a02:	604a      	str	r2, [r1, #4]
 8008a04:	2301      	movs	r3, #1
 8008a06:	4093      	lsls	r3, r2
 8008a08:	608b      	str	r3, [r1, #8]
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	f001 f92c 	bl	8009c68 <_Bfree>
 8008a10:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008a12:	2200      	movs	r2, #0
 8008a14:	601a      	str	r2, [r3, #0]
 8008a16:	f1b9 0300 	subs.w	r3, r9, #0
 8008a1a:	bfbb      	ittet	lt
 8008a1c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a20:	9303      	strlt	r3, [sp, #12]
 8008a22:	2300      	movge	r3, #0
 8008a24:	2201      	movlt	r2, #1
 8008a26:	bfac      	ite	ge
 8008a28:	6023      	strge	r3, [r4, #0]
 8008a2a:	6022      	strlt	r2, [r4, #0]
 8008a2c:	4b9c      	ldr	r3, [pc, #624]	; (8008ca0 <_dtoa_r+0x2e0>)
 8008a2e:	9c03      	ldr	r4, [sp, #12]
 8008a30:	43a3      	bics	r3, r4
 8008a32:	d11a      	bne.n	8008a6a <_dtoa_r+0xaa>
 8008a34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a36:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a3a:	6013      	str	r3, [r2, #0]
 8008a3c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008a40:	ea53 0308 	orrs.w	r3, r3, r8
 8008a44:	f000 8512 	beq.w	800946c <_dtoa_r+0xaac>
 8008a48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008a4a:	b953      	cbnz	r3, 8008a62 <_dtoa_r+0xa2>
 8008a4c:	4b95      	ldr	r3, [pc, #596]	; (8008ca4 <_dtoa_r+0x2e4>)
 8008a4e:	e01f      	b.n	8008a90 <_dtoa_r+0xd0>
 8008a50:	4b95      	ldr	r3, [pc, #596]	; (8008ca8 <_dtoa_r+0x2e8>)
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	3308      	adds	r3, #8
 8008a56:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008a58:	6013      	str	r3, [r2, #0]
 8008a5a:	9800      	ldr	r0, [sp, #0]
 8008a5c:	b015      	add	sp, #84	; 0x54
 8008a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a62:	4b90      	ldr	r3, [pc, #576]	; (8008ca4 <_dtoa_r+0x2e4>)
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	3303      	adds	r3, #3
 8008a68:	e7f5      	b.n	8008a56 <_dtoa_r+0x96>
 8008a6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a6e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a76:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008a7a:	d10b      	bne.n	8008a94 <_dtoa_r+0xd4>
 8008a7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a7e:	2301      	movs	r3, #1
 8008a80:	6013      	str	r3, [r2, #0]
 8008a82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 84ee 	beq.w	8009466 <_dtoa_r+0xaa6>
 8008a8a:	4888      	ldr	r0, [pc, #544]	; (8008cac <_dtoa_r+0x2ec>)
 8008a8c:	6018      	str	r0, [r3, #0]
 8008a8e:	1e43      	subs	r3, r0, #1
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	e7e2      	b.n	8008a5a <_dtoa_r+0x9a>
 8008a94:	a913      	add	r1, sp, #76	; 0x4c
 8008a96:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008a9a:	aa12      	add	r2, sp, #72	; 0x48
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f001 fc8b 	bl	800a3b8 <__d2b>
 8008aa2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008aaa:	2900      	cmp	r1, #0
 8008aac:	d047      	beq.n	8008b3e <_dtoa_r+0x17e>
 8008aae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008ab0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008ab4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ab8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008abc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008ac0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008ac4:	2400      	movs	r4, #0
 8008ac6:	ec43 2b16 	vmov	d6, r2, r3
 8008aca:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008ace:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8008c80 <_dtoa_r+0x2c0>
 8008ad2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008ad6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8008c88 <_dtoa_r+0x2c8>
 8008ada:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008ade:	eeb0 7b46 	vmov.f64	d7, d6
 8008ae2:	ee06 1a90 	vmov	s13, r1
 8008ae6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8008aea:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008c90 <_dtoa_r+0x2d0>
 8008aee:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008af2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008af6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008afe:	ee16 ba90 	vmov	fp, s13
 8008b02:	9411      	str	r4, [sp, #68]	; 0x44
 8008b04:	d508      	bpl.n	8008b18 <_dtoa_r+0x158>
 8008b06:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008b0a:	eeb4 6b47 	vcmp.f64	d6, d7
 8008b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b12:	bf18      	it	ne
 8008b14:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008b18:	f1bb 0f16 	cmp.w	fp, #22
 8008b1c:	d832      	bhi.n	8008b84 <_dtoa_r+0x1c4>
 8008b1e:	4b64      	ldr	r3, [pc, #400]	; (8008cb0 <_dtoa_r+0x2f0>)
 8008b20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008b24:	ed93 7b00 	vldr	d7, [r3]
 8008b28:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8008b2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b34:	d501      	bpl.n	8008b3a <_dtoa_r+0x17a>
 8008b36:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	e023      	b.n	8008b86 <_dtoa_r+0x1c6>
 8008b3e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008b40:	4401      	add	r1, r0
 8008b42:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008b46:	2b20      	cmp	r3, #32
 8008b48:	bfc3      	ittte	gt
 8008b4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b4e:	fa04 f303 	lslgt.w	r3, r4, r3
 8008b52:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008b56:	f1c3 0320 	rsble	r3, r3, #32
 8008b5a:	bfc6      	itte	gt
 8008b5c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008b60:	ea43 0308 	orrgt.w	r3, r3, r8
 8008b64:	fa08 f303 	lslle.w	r3, r8, r3
 8008b68:	ee07 3a90 	vmov	s15, r3
 8008b6c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008b70:	3901      	subs	r1, #1
 8008b72:	ed8d 7b00 	vstr	d7, [sp]
 8008b76:	9c01      	ldr	r4, [sp, #4]
 8008b78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b7c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008b80:	2401      	movs	r4, #1
 8008b82:	e7a0      	b.n	8008ac6 <_dtoa_r+0x106>
 8008b84:	2301      	movs	r3, #1
 8008b86:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b88:	1a43      	subs	r3, r0, r1
 8008b8a:	1e5a      	subs	r2, r3, #1
 8008b8c:	bf45      	ittet	mi
 8008b8e:	f1c3 0301 	rsbmi	r3, r3, #1
 8008b92:	9305      	strmi	r3, [sp, #20]
 8008b94:	2300      	movpl	r3, #0
 8008b96:	2300      	movmi	r3, #0
 8008b98:	9206      	str	r2, [sp, #24]
 8008b9a:	bf54      	ite	pl
 8008b9c:	9305      	strpl	r3, [sp, #20]
 8008b9e:	9306      	strmi	r3, [sp, #24]
 8008ba0:	f1bb 0f00 	cmp.w	fp, #0
 8008ba4:	db18      	blt.n	8008bd8 <_dtoa_r+0x218>
 8008ba6:	9b06      	ldr	r3, [sp, #24]
 8008ba8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008bac:	445b      	add	r3, fp
 8008bae:	9306      	str	r3, [sp, #24]
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	9a07      	ldr	r2, [sp, #28]
 8008bb4:	2a09      	cmp	r2, #9
 8008bb6:	d849      	bhi.n	8008c4c <_dtoa_r+0x28c>
 8008bb8:	2a05      	cmp	r2, #5
 8008bba:	bfc4      	itt	gt
 8008bbc:	3a04      	subgt	r2, #4
 8008bbe:	9207      	strgt	r2, [sp, #28]
 8008bc0:	9a07      	ldr	r2, [sp, #28]
 8008bc2:	f1a2 0202 	sub.w	r2, r2, #2
 8008bc6:	bfcc      	ite	gt
 8008bc8:	2400      	movgt	r4, #0
 8008bca:	2401      	movle	r4, #1
 8008bcc:	2a03      	cmp	r2, #3
 8008bce:	d848      	bhi.n	8008c62 <_dtoa_r+0x2a2>
 8008bd0:	e8df f002 	tbb	[pc, r2]
 8008bd4:	3a2c2e0b 	.word	0x3a2c2e0b
 8008bd8:	9b05      	ldr	r3, [sp, #20]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	eba3 030b 	sub.w	r3, r3, fp
 8008be0:	9305      	str	r3, [sp, #20]
 8008be2:	920e      	str	r2, [sp, #56]	; 0x38
 8008be4:	f1cb 0300 	rsb	r3, fp, #0
 8008be8:	e7e3      	b.n	8008bb2 <_dtoa_r+0x1f2>
 8008bea:	2200      	movs	r2, #0
 8008bec:	9208      	str	r2, [sp, #32]
 8008bee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bf0:	2a00      	cmp	r2, #0
 8008bf2:	dc39      	bgt.n	8008c68 <_dtoa_r+0x2a8>
 8008bf4:	f04f 0a01 	mov.w	sl, #1
 8008bf8:	46d1      	mov	r9, sl
 8008bfa:	4652      	mov	r2, sl
 8008bfc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008c00:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008c02:	2100      	movs	r1, #0
 8008c04:	6079      	str	r1, [r7, #4]
 8008c06:	2004      	movs	r0, #4
 8008c08:	f100 0c14 	add.w	ip, r0, #20
 8008c0c:	4594      	cmp	ip, r2
 8008c0e:	6879      	ldr	r1, [r7, #4]
 8008c10:	d92f      	bls.n	8008c72 <_dtoa_r+0x2b2>
 8008c12:	4630      	mov	r0, r6
 8008c14:	930c      	str	r3, [sp, #48]	; 0x30
 8008c16:	f000 ffe7 	bl	8009be8 <_Balloc>
 8008c1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c1c:	9000      	str	r0, [sp, #0]
 8008c1e:	4602      	mov	r2, r0
 8008c20:	2800      	cmp	r0, #0
 8008c22:	d149      	bne.n	8008cb8 <_dtoa_r+0x2f8>
 8008c24:	4b23      	ldr	r3, [pc, #140]	; (8008cb4 <_dtoa_r+0x2f4>)
 8008c26:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008c2a:	e6df      	b.n	80089ec <_dtoa_r+0x2c>
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	e7dd      	b.n	8008bec <_dtoa_r+0x22c>
 8008c30:	2200      	movs	r2, #0
 8008c32:	9208      	str	r2, [sp, #32]
 8008c34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c36:	eb0b 0a02 	add.w	sl, fp, r2
 8008c3a:	f10a 0901 	add.w	r9, sl, #1
 8008c3e:	464a      	mov	r2, r9
 8008c40:	2a01      	cmp	r2, #1
 8008c42:	bfb8      	it	lt
 8008c44:	2201      	movlt	r2, #1
 8008c46:	e7db      	b.n	8008c00 <_dtoa_r+0x240>
 8008c48:	2201      	movs	r2, #1
 8008c4a:	e7f2      	b.n	8008c32 <_dtoa_r+0x272>
 8008c4c:	2401      	movs	r4, #1
 8008c4e:	2200      	movs	r2, #0
 8008c50:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008c54:	f04f 3aff 	mov.w	sl, #4294967295
 8008c58:	2100      	movs	r1, #0
 8008c5a:	46d1      	mov	r9, sl
 8008c5c:	2212      	movs	r2, #18
 8008c5e:	9109      	str	r1, [sp, #36]	; 0x24
 8008c60:	e7ce      	b.n	8008c00 <_dtoa_r+0x240>
 8008c62:	2201      	movs	r2, #1
 8008c64:	9208      	str	r2, [sp, #32]
 8008c66:	e7f5      	b.n	8008c54 <_dtoa_r+0x294>
 8008c68:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8008c6c:	46d1      	mov	r9, sl
 8008c6e:	4652      	mov	r2, sl
 8008c70:	e7c6      	b.n	8008c00 <_dtoa_r+0x240>
 8008c72:	3101      	adds	r1, #1
 8008c74:	6079      	str	r1, [r7, #4]
 8008c76:	0040      	lsls	r0, r0, #1
 8008c78:	e7c6      	b.n	8008c08 <_dtoa_r+0x248>
 8008c7a:	bf00      	nop
 8008c7c:	f3af 8000 	nop.w
 8008c80:	636f4361 	.word	0x636f4361
 8008c84:	3fd287a7 	.word	0x3fd287a7
 8008c88:	8b60c8b3 	.word	0x8b60c8b3
 8008c8c:	3fc68a28 	.word	0x3fc68a28
 8008c90:	509f79fb 	.word	0x509f79fb
 8008c94:	3fd34413 	.word	0x3fd34413
 8008c98:	080241ae 	.word	0x080241ae
 8008c9c:	080241c5 	.word	0x080241c5
 8008ca0:	7ff00000 	.word	0x7ff00000
 8008ca4:	080241aa 	.word	0x080241aa
 8008ca8:	080241a1 	.word	0x080241a1
 8008cac:	08024025 	.word	0x08024025
 8008cb0:	08024340 	.word	0x08024340
 8008cb4:	08024224 	.word	0x08024224
 8008cb8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008cba:	9900      	ldr	r1, [sp, #0]
 8008cbc:	6011      	str	r1, [r2, #0]
 8008cbe:	f1b9 0f0e 	cmp.w	r9, #14
 8008cc2:	d872      	bhi.n	8008daa <_dtoa_r+0x3ea>
 8008cc4:	2c00      	cmp	r4, #0
 8008cc6:	d070      	beq.n	8008daa <_dtoa_r+0x3ea>
 8008cc8:	f1bb 0f00 	cmp.w	fp, #0
 8008ccc:	f340 80a6 	ble.w	8008e1c <_dtoa_r+0x45c>
 8008cd0:	49ca      	ldr	r1, [pc, #808]	; (8008ffc <_dtoa_r+0x63c>)
 8008cd2:	f00b 020f 	and.w	r2, fp, #15
 8008cd6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008cda:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008cde:	ed92 7b00 	vldr	d7, [r2]
 8008ce2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008ce6:	f000 808d 	beq.w	8008e04 <_dtoa_r+0x444>
 8008cea:	4ac5      	ldr	r2, [pc, #788]	; (8009000 <_dtoa_r+0x640>)
 8008cec:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8008cf0:	ed92 6b08 	vldr	d6, [r2, #32]
 8008cf4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008cf8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008cfc:	f001 010f 	and.w	r1, r1, #15
 8008d00:	2203      	movs	r2, #3
 8008d02:	48bf      	ldr	r0, [pc, #764]	; (8009000 <_dtoa_r+0x640>)
 8008d04:	2900      	cmp	r1, #0
 8008d06:	d17f      	bne.n	8008e08 <_dtoa_r+0x448>
 8008d08:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008d0c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008d10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008d16:	2900      	cmp	r1, #0
 8008d18:	f000 80b2 	beq.w	8008e80 <_dtoa_r+0x4c0>
 8008d1c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008d20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d24:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d2c:	f140 80a8 	bpl.w	8008e80 <_dtoa_r+0x4c0>
 8008d30:	f1b9 0f00 	cmp.w	r9, #0
 8008d34:	f000 80a4 	beq.w	8008e80 <_dtoa_r+0x4c0>
 8008d38:	f1ba 0f00 	cmp.w	sl, #0
 8008d3c:	dd31      	ble.n	8008da2 <_dtoa_r+0x3e2>
 8008d3e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008d42:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d46:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d4a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008d4e:	3201      	adds	r2, #1
 8008d50:	4650      	mov	r0, sl
 8008d52:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008d56:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008d5a:	ee07 2a90 	vmov	s15, r2
 8008d5e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008d62:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008d66:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008d6a:	9c03      	ldr	r4, [sp, #12]
 8008d6c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008d70:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008d74:	2800      	cmp	r0, #0
 8008d76:	f040 8086 	bne.w	8008e86 <_dtoa_r+0x4c6>
 8008d7a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008d7e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008d82:	ec42 1b17 	vmov	d7, r1, r2
 8008d86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d8e:	f300 8272 	bgt.w	8009276 <_dtoa_r+0x8b6>
 8008d92:	eeb1 7b47 	vneg.f64	d7, d7
 8008d96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d9e:	f100 8267 	bmi.w	8009270 <_dtoa_r+0x8b0>
 8008da2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8008da6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008daa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008dac:	2a00      	cmp	r2, #0
 8008dae:	f2c0 8129 	blt.w	8009004 <_dtoa_r+0x644>
 8008db2:	f1bb 0f0e 	cmp.w	fp, #14
 8008db6:	f300 8125 	bgt.w	8009004 <_dtoa_r+0x644>
 8008dba:	4b90      	ldr	r3, [pc, #576]	; (8008ffc <_dtoa_r+0x63c>)
 8008dbc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008dc0:	ed93 6b00 	vldr	d6, [r3]
 8008dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f280 80c3 	bge.w	8008f52 <_dtoa_r+0x592>
 8008dcc:	f1b9 0f00 	cmp.w	r9, #0
 8008dd0:	f300 80bf 	bgt.w	8008f52 <_dtoa_r+0x592>
 8008dd4:	f040 824c 	bne.w	8009270 <_dtoa_r+0x8b0>
 8008dd8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008ddc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008de0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008de4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dec:	464c      	mov	r4, r9
 8008dee:	464f      	mov	r7, r9
 8008df0:	f280 8222 	bge.w	8009238 <_dtoa_r+0x878>
 8008df4:	f8dd 8000 	ldr.w	r8, [sp]
 8008df8:	2331      	movs	r3, #49	; 0x31
 8008dfa:	f808 3b01 	strb.w	r3, [r8], #1
 8008dfe:	f10b 0b01 	add.w	fp, fp, #1
 8008e02:	e21e      	b.n	8009242 <_dtoa_r+0x882>
 8008e04:	2202      	movs	r2, #2
 8008e06:	e77c      	b.n	8008d02 <_dtoa_r+0x342>
 8008e08:	07cc      	lsls	r4, r1, #31
 8008e0a:	d504      	bpl.n	8008e16 <_dtoa_r+0x456>
 8008e0c:	ed90 6b00 	vldr	d6, [r0]
 8008e10:	3201      	adds	r2, #1
 8008e12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008e16:	1049      	asrs	r1, r1, #1
 8008e18:	3008      	adds	r0, #8
 8008e1a:	e773      	b.n	8008d04 <_dtoa_r+0x344>
 8008e1c:	d02e      	beq.n	8008e7c <_dtoa_r+0x4bc>
 8008e1e:	f1cb 0100 	rsb	r1, fp, #0
 8008e22:	4a76      	ldr	r2, [pc, #472]	; (8008ffc <_dtoa_r+0x63c>)
 8008e24:	f001 000f 	and.w	r0, r1, #15
 8008e28:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008e2c:	ed92 7b00 	vldr	d7, [r2]
 8008e30:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8008e34:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008e38:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008e3c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8008e40:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8008e44:	486e      	ldr	r0, [pc, #440]	; (8009000 <_dtoa_r+0x640>)
 8008e46:	1109      	asrs	r1, r1, #4
 8008e48:	2400      	movs	r4, #0
 8008e4a:	2202      	movs	r2, #2
 8008e4c:	b939      	cbnz	r1, 8008e5e <_dtoa_r+0x49e>
 8008e4e:	2c00      	cmp	r4, #0
 8008e50:	f43f af60 	beq.w	8008d14 <_dtoa_r+0x354>
 8008e54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e5c:	e75a      	b.n	8008d14 <_dtoa_r+0x354>
 8008e5e:	07cf      	lsls	r7, r1, #31
 8008e60:	d509      	bpl.n	8008e76 <_dtoa_r+0x4b6>
 8008e62:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008e66:	ed90 7b00 	vldr	d7, [r0]
 8008e6a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008e6e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008e72:	3201      	adds	r2, #1
 8008e74:	2401      	movs	r4, #1
 8008e76:	1049      	asrs	r1, r1, #1
 8008e78:	3008      	adds	r0, #8
 8008e7a:	e7e7      	b.n	8008e4c <_dtoa_r+0x48c>
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	e749      	b.n	8008d14 <_dtoa_r+0x354>
 8008e80:	465f      	mov	r7, fp
 8008e82:	4648      	mov	r0, r9
 8008e84:	e765      	b.n	8008d52 <_dtoa_r+0x392>
 8008e86:	ec42 1b17 	vmov	d7, r1, r2
 8008e8a:	4a5c      	ldr	r2, [pc, #368]	; (8008ffc <_dtoa_r+0x63c>)
 8008e8c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008e90:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008e94:	9a00      	ldr	r2, [sp, #0]
 8008e96:	1814      	adds	r4, r2, r0
 8008e98:	9a08      	ldr	r2, [sp, #32]
 8008e9a:	b352      	cbz	r2, 8008ef2 <_dtoa_r+0x532>
 8008e9c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008ea0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008ea4:	f8dd 8000 	ldr.w	r8, [sp]
 8008ea8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008eac:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008eb0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008eb4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008eb8:	ee14 2a90 	vmov	r2, s9
 8008ebc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008ec0:	3230      	adds	r2, #48	; 0x30
 8008ec2:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008ec6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ece:	f808 2b01 	strb.w	r2, [r8], #1
 8008ed2:	d439      	bmi.n	8008f48 <_dtoa_r+0x588>
 8008ed4:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008ed8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee0:	d472      	bmi.n	8008fc8 <_dtoa_r+0x608>
 8008ee2:	45a0      	cmp	r8, r4
 8008ee4:	f43f af5d 	beq.w	8008da2 <_dtoa_r+0x3e2>
 8008ee8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008eec:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008ef0:	e7e0      	b.n	8008eb4 <_dtoa_r+0x4f4>
 8008ef2:	f8dd 8000 	ldr.w	r8, [sp]
 8008ef6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008efa:	4621      	mov	r1, r4
 8008efc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008f00:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008f04:	ee14 2a90 	vmov	r2, s9
 8008f08:	3230      	adds	r2, #48	; 0x30
 8008f0a:	f808 2b01 	strb.w	r2, [r8], #1
 8008f0e:	45a0      	cmp	r8, r4
 8008f10:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008f14:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008f18:	d118      	bne.n	8008f4c <_dtoa_r+0x58c>
 8008f1a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008f1e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008f22:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f2a:	dc4d      	bgt.n	8008fc8 <_dtoa_r+0x608>
 8008f2c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008f30:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f38:	f57f af33 	bpl.w	8008da2 <_dtoa_r+0x3e2>
 8008f3c:	4688      	mov	r8, r1
 8008f3e:	3901      	subs	r1, #1
 8008f40:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008f44:	2b30      	cmp	r3, #48	; 0x30
 8008f46:	d0f9      	beq.n	8008f3c <_dtoa_r+0x57c>
 8008f48:	46bb      	mov	fp, r7
 8008f4a:	e02a      	b.n	8008fa2 <_dtoa_r+0x5e2>
 8008f4c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008f50:	e7d6      	b.n	8008f00 <_dtoa_r+0x540>
 8008f52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f56:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008f5a:	f8dd 8000 	ldr.w	r8, [sp]
 8008f5e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008f62:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008f66:	ee15 3a10 	vmov	r3, s10
 8008f6a:	3330      	adds	r3, #48	; 0x30
 8008f6c:	f808 3b01 	strb.w	r3, [r8], #1
 8008f70:	9b00      	ldr	r3, [sp, #0]
 8008f72:	eba8 0303 	sub.w	r3, r8, r3
 8008f76:	4599      	cmp	r9, r3
 8008f78:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008f7c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008f80:	d133      	bne.n	8008fea <_dtoa_r+0x62a>
 8008f82:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008f86:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8e:	dc1a      	bgt.n	8008fc6 <_dtoa_r+0x606>
 8008f90:	eeb4 7b46 	vcmp.f64	d7, d6
 8008f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f98:	d103      	bne.n	8008fa2 <_dtoa_r+0x5e2>
 8008f9a:	ee15 3a10 	vmov	r3, s10
 8008f9e:	07d9      	lsls	r1, r3, #31
 8008fa0:	d411      	bmi.n	8008fc6 <_dtoa_r+0x606>
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	f000 fe5f 	bl	8009c68 <_Bfree>
 8008faa:	2300      	movs	r3, #0
 8008fac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008fae:	f888 3000 	strb.w	r3, [r8]
 8008fb2:	f10b 0301 	add.w	r3, fp, #1
 8008fb6:	6013      	str	r3, [r2, #0]
 8008fb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	f43f ad4d 	beq.w	8008a5a <_dtoa_r+0x9a>
 8008fc0:	f8c3 8000 	str.w	r8, [r3]
 8008fc4:	e549      	b.n	8008a5a <_dtoa_r+0x9a>
 8008fc6:	465f      	mov	r7, fp
 8008fc8:	4643      	mov	r3, r8
 8008fca:	4698      	mov	r8, r3
 8008fcc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fd0:	2a39      	cmp	r2, #57	; 0x39
 8008fd2:	d106      	bne.n	8008fe2 <_dtoa_r+0x622>
 8008fd4:	9a00      	ldr	r2, [sp, #0]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d1f7      	bne.n	8008fca <_dtoa_r+0x60a>
 8008fda:	9900      	ldr	r1, [sp, #0]
 8008fdc:	2230      	movs	r2, #48	; 0x30
 8008fde:	3701      	adds	r7, #1
 8008fe0:	700a      	strb	r2, [r1, #0]
 8008fe2:	781a      	ldrb	r2, [r3, #0]
 8008fe4:	3201      	adds	r2, #1
 8008fe6:	701a      	strb	r2, [r3, #0]
 8008fe8:	e7ae      	b.n	8008f48 <_dtoa_r+0x588>
 8008fea:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008fee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff6:	d1b2      	bne.n	8008f5e <_dtoa_r+0x59e>
 8008ff8:	e7d3      	b.n	8008fa2 <_dtoa_r+0x5e2>
 8008ffa:	bf00      	nop
 8008ffc:	08024340 	.word	0x08024340
 8009000:	08024318 	.word	0x08024318
 8009004:	9908      	ldr	r1, [sp, #32]
 8009006:	2900      	cmp	r1, #0
 8009008:	f000 80d1 	beq.w	80091ae <_dtoa_r+0x7ee>
 800900c:	9907      	ldr	r1, [sp, #28]
 800900e:	2901      	cmp	r1, #1
 8009010:	f300 80b4 	bgt.w	800917c <_dtoa_r+0x7bc>
 8009014:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009016:	2900      	cmp	r1, #0
 8009018:	f000 80ac 	beq.w	8009174 <_dtoa_r+0x7b4>
 800901c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009020:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009024:	461c      	mov	r4, r3
 8009026:	930a      	str	r3, [sp, #40]	; 0x28
 8009028:	9b05      	ldr	r3, [sp, #20]
 800902a:	4413      	add	r3, r2
 800902c:	9305      	str	r3, [sp, #20]
 800902e:	9b06      	ldr	r3, [sp, #24]
 8009030:	2101      	movs	r1, #1
 8009032:	4413      	add	r3, r2
 8009034:	4630      	mov	r0, r6
 8009036:	9306      	str	r3, [sp, #24]
 8009038:	f000 ff1c 	bl	8009e74 <__i2b>
 800903c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800903e:	4607      	mov	r7, r0
 8009040:	f1b8 0f00 	cmp.w	r8, #0
 8009044:	dd0d      	ble.n	8009062 <_dtoa_r+0x6a2>
 8009046:	9a06      	ldr	r2, [sp, #24]
 8009048:	2a00      	cmp	r2, #0
 800904a:	dd0a      	ble.n	8009062 <_dtoa_r+0x6a2>
 800904c:	4542      	cmp	r2, r8
 800904e:	9905      	ldr	r1, [sp, #20]
 8009050:	bfa8      	it	ge
 8009052:	4642      	movge	r2, r8
 8009054:	1a89      	subs	r1, r1, r2
 8009056:	9105      	str	r1, [sp, #20]
 8009058:	9906      	ldr	r1, [sp, #24]
 800905a:	eba8 0802 	sub.w	r8, r8, r2
 800905e:	1a8a      	subs	r2, r1, r2
 8009060:	9206      	str	r2, [sp, #24]
 8009062:	b303      	cbz	r3, 80090a6 <_dtoa_r+0x6e6>
 8009064:	9a08      	ldr	r2, [sp, #32]
 8009066:	2a00      	cmp	r2, #0
 8009068:	f000 80a6 	beq.w	80091b8 <_dtoa_r+0x7f8>
 800906c:	2c00      	cmp	r4, #0
 800906e:	dd13      	ble.n	8009098 <_dtoa_r+0x6d8>
 8009070:	4639      	mov	r1, r7
 8009072:	4622      	mov	r2, r4
 8009074:	4630      	mov	r0, r6
 8009076:	930c      	str	r3, [sp, #48]	; 0x30
 8009078:	f000 ffb8 	bl	8009fec <__pow5mult>
 800907c:	462a      	mov	r2, r5
 800907e:	4601      	mov	r1, r0
 8009080:	4607      	mov	r7, r0
 8009082:	4630      	mov	r0, r6
 8009084:	f000 ff0c 	bl	8009ea0 <__multiply>
 8009088:	4629      	mov	r1, r5
 800908a:	900a      	str	r0, [sp, #40]	; 0x28
 800908c:	4630      	mov	r0, r6
 800908e:	f000 fdeb 	bl	8009c68 <_Bfree>
 8009092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009094:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009096:	4615      	mov	r5, r2
 8009098:	1b1a      	subs	r2, r3, r4
 800909a:	d004      	beq.n	80090a6 <_dtoa_r+0x6e6>
 800909c:	4629      	mov	r1, r5
 800909e:	4630      	mov	r0, r6
 80090a0:	f000 ffa4 	bl	8009fec <__pow5mult>
 80090a4:	4605      	mov	r5, r0
 80090a6:	2101      	movs	r1, #1
 80090a8:	4630      	mov	r0, r6
 80090aa:	f000 fee3 	bl	8009e74 <__i2b>
 80090ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	4604      	mov	r4, r0
 80090b4:	f340 8082 	ble.w	80091bc <_dtoa_r+0x7fc>
 80090b8:	461a      	mov	r2, r3
 80090ba:	4601      	mov	r1, r0
 80090bc:	4630      	mov	r0, r6
 80090be:	f000 ff95 	bl	8009fec <__pow5mult>
 80090c2:	9b07      	ldr	r3, [sp, #28]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	4604      	mov	r4, r0
 80090c8:	dd7b      	ble.n	80091c2 <_dtoa_r+0x802>
 80090ca:	2300      	movs	r3, #0
 80090cc:	930a      	str	r3, [sp, #40]	; 0x28
 80090ce:	6922      	ldr	r2, [r4, #16]
 80090d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80090d4:	6910      	ldr	r0, [r2, #16]
 80090d6:	f000 fe7d 	bl	8009dd4 <__hi0bits>
 80090da:	f1c0 0020 	rsb	r0, r0, #32
 80090de:	9b06      	ldr	r3, [sp, #24]
 80090e0:	4418      	add	r0, r3
 80090e2:	f010 001f 	ands.w	r0, r0, #31
 80090e6:	f000 808d 	beq.w	8009204 <_dtoa_r+0x844>
 80090ea:	f1c0 0220 	rsb	r2, r0, #32
 80090ee:	2a04      	cmp	r2, #4
 80090f0:	f340 8086 	ble.w	8009200 <_dtoa_r+0x840>
 80090f4:	f1c0 001c 	rsb	r0, r0, #28
 80090f8:	9b05      	ldr	r3, [sp, #20]
 80090fa:	4403      	add	r3, r0
 80090fc:	9305      	str	r3, [sp, #20]
 80090fe:	9b06      	ldr	r3, [sp, #24]
 8009100:	4403      	add	r3, r0
 8009102:	4480      	add	r8, r0
 8009104:	9306      	str	r3, [sp, #24]
 8009106:	9b05      	ldr	r3, [sp, #20]
 8009108:	2b00      	cmp	r3, #0
 800910a:	dd05      	ble.n	8009118 <_dtoa_r+0x758>
 800910c:	4629      	mov	r1, r5
 800910e:	461a      	mov	r2, r3
 8009110:	4630      	mov	r0, r6
 8009112:	f000 ffc5 	bl	800a0a0 <__lshift>
 8009116:	4605      	mov	r5, r0
 8009118:	9b06      	ldr	r3, [sp, #24]
 800911a:	2b00      	cmp	r3, #0
 800911c:	dd05      	ble.n	800912a <_dtoa_r+0x76a>
 800911e:	4621      	mov	r1, r4
 8009120:	461a      	mov	r2, r3
 8009122:	4630      	mov	r0, r6
 8009124:	f000 ffbc 	bl	800a0a0 <__lshift>
 8009128:	4604      	mov	r4, r0
 800912a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800912c:	2b00      	cmp	r3, #0
 800912e:	d06b      	beq.n	8009208 <_dtoa_r+0x848>
 8009130:	4621      	mov	r1, r4
 8009132:	4628      	mov	r0, r5
 8009134:	f001 f820 	bl	800a178 <__mcmp>
 8009138:	2800      	cmp	r0, #0
 800913a:	da65      	bge.n	8009208 <_dtoa_r+0x848>
 800913c:	2300      	movs	r3, #0
 800913e:	4629      	mov	r1, r5
 8009140:	220a      	movs	r2, #10
 8009142:	4630      	mov	r0, r6
 8009144:	f000 fdb2 	bl	8009cac <__multadd>
 8009148:	9b08      	ldr	r3, [sp, #32]
 800914a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800914e:	4605      	mov	r5, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 8192 	beq.w	800947a <_dtoa_r+0xaba>
 8009156:	4639      	mov	r1, r7
 8009158:	2300      	movs	r3, #0
 800915a:	220a      	movs	r2, #10
 800915c:	4630      	mov	r0, r6
 800915e:	f000 fda5 	bl	8009cac <__multadd>
 8009162:	f1ba 0f00 	cmp.w	sl, #0
 8009166:	4607      	mov	r7, r0
 8009168:	f300 808e 	bgt.w	8009288 <_dtoa_r+0x8c8>
 800916c:	9b07      	ldr	r3, [sp, #28]
 800916e:	2b02      	cmp	r3, #2
 8009170:	dc51      	bgt.n	8009216 <_dtoa_r+0x856>
 8009172:	e089      	b.n	8009288 <_dtoa_r+0x8c8>
 8009174:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009176:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800917a:	e751      	b.n	8009020 <_dtoa_r+0x660>
 800917c:	f109 34ff 	add.w	r4, r9, #4294967295
 8009180:	42a3      	cmp	r3, r4
 8009182:	bfbf      	itttt	lt
 8009184:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009186:	1ae3      	sublt	r3, r4, r3
 8009188:	18d2      	addlt	r2, r2, r3
 800918a:	4613      	movlt	r3, r2
 800918c:	bfb7      	itett	lt
 800918e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009190:	1b1c      	subge	r4, r3, r4
 8009192:	4623      	movlt	r3, r4
 8009194:	2400      	movlt	r4, #0
 8009196:	f1b9 0f00 	cmp.w	r9, #0
 800919a:	bfb5      	itete	lt
 800919c:	9a05      	ldrlt	r2, [sp, #20]
 800919e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80091a2:	eba2 0809 	sublt.w	r8, r2, r9
 80091a6:	464a      	movge	r2, r9
 80091a8:	bfb8      	it	lt
 80091aa:	2200      	movlt	r2, #0
 80091ac:	e73b      	b.n	8009026 <_dtoa_r+0x666>
 80091ae:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80091b2:	9f08      	ldr	r7, [sp, #32]
 80091b4:	461c      	mov	r4, r3
 80091b6:	e743      	b.n	8009040 <_dtoa_r+0x680>
 80091b8:	461a      	mov	r2, r3
 80091ba:	e76f      	b.n	800909c <_dtoa_r+0x6dc>
 80091bc:	9b07      	ldr	r3, [sp, #28]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	dc18      	bgt.n	80091f4 <_dtoa_r+0x834>
 80091c2:	9b02      	ldr	r3, [sp, #8]
 80091c4:	b9b3      	cbnz	r3, 80091f4 <_dtoa_r+0x834>
 80091c6:	9b03      	ldr	r3, [sp, #12]
 80091c8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80091cc:	b9a2      	cbnz	r2, 80091f8 <_dtoa_r+0x838>
 80091ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80091d2:	0d12      	lsrs	r2, r2, #20
 80091d4:	0512      	lsls	r2, r2, #20
 80091d6:	b18a      	cbz	r2, 80091fc <_dtoa_r+0x83c>
 80091d8:	9b05      	ldr	r3, [sp, #20]
 80091da:	3301      	adds	r3, #1
 80091dc:	9305      	str	r3, [sp, #20]
 80091de:	9b06      	ldr	r3, [sp, #24]
 80091e0:	3301      	adds	r3, #1
 80091e2:	9306      	str	r3, [sp, #24]
 80091e4:	2301      	movs	r3, #1
 80091e6:	930a      	str	r3, [sp, #40]	; 0x28
 80091e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f47f af6f 	bne.w	80090ce <_dtoa_r+0x70e>
 80091f0:	2001      	movs	r0, #1
 80091f2:	e774      	b.n	80090de <_dtoa_r+0x71e>
 80091f4:	2300      	movs	r3, #0
 80091f6:	e7f6      	b.n	80091e6 <_dtoa_r+0x826>
 80091f8:	9b02      	ldr	r3, [sp, #8]
 80091fa:	e7f4      	b.n	80091e6 <_dtoa_r+0x826>
 80091fc:	920a      	str	r2, [sp, #40]	; 0x28
 80091fe:	e7f3      	b.n	80091e8 <_dtoa_r+0x828>
 8009200:	d081      	beq.n	8009106 <_dtoa_r+0x746>
 8009202:	4610      	mov	r0, r2
 8009204:	301c      	adds	r0, #28
 8009206:	e777      	b.n	80090f8 <_dtoa_r+0x738>
 8009208:	f1b9 0f00 	cmp.w	r9, #0
 800920c:	dc37      	bgt.n	800927e <_dtoa_r+0x8be>
 800920e:	9b07      	ldr	r3, [sp, #28]
 8009210:	2b02      	cmp	r3, #2
 8009212:	dd34      	ble.n	800927e <_dtoa_r+0x8be>
 8009214:	46ca      	mov	sl, r9
 8009216:	f1ba 0f00 	cmp.w	sl, #0
 800921a:	d10d      	bne.n	8009238 <_dtoa_r+0x878>
 800921c:	4621      	mov	r1, r4
 800921e:	4653      	mov	r3, sl
 8009220:	2205      	movs	r2, #5
 8009222:	4630      	mov	r0, r6
 8009224:	f000 fd42 	bl	8009cac <__multadd>
 8009228:	4601      	mov	r1, r0
 800922a:	4604      	mov	r4, r0
 800922c:	4628      	mov	r0, r5
 800922e:	f000 ffa3 	bl	800a178 <__mcmp>
 8009232:	2800      	cmp	r0, #0
 8009234:	f73f adde 	bgt.w	8008df4 <_dtoa_r+0x434>
 8009238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800923a:	f8dd 8000 	ldr.w	r8, [sp]
 800923e:	ea6f 0b03 	mvn.w	fp, r3
 8009242:	f04f 0900 	mov.w	r9, #0
 8009246:	4621      	mov	r1, r4
 8009248:	4630      	mov	r0, r6
 800924a:	f000 fd0d 	bl	8009c68 <_Bfree>
 800924e:	2f00      	cmp	r7, #0
 8009250:	f43f aea7 	beq.w	8008fa2 <_dtoa_r+0x5e2>
 8009254:	f1b9 0f00 	cmp.w	r9, #0
 8009258:	d005      	beq.n	8009266 <_dtoa_r+0x8a6>
 800925a:	45b9      	cmp	r9, r7
 800925c:	d003      	beq.n	8009266 <_dtoa_r+0x8a6>
 800925e:	4649      	mov	r1, r9
 8009260:	4630      	mov	r0, r6
 8009262:	f000 fd01 	bl	8009c68 <_Bfree>
 8009266:	4639      	mov	r1, r7
 8009268:	4630      	mov	r0, r6
 800926a:	f000 fcfd 	bl	8009c68 <_Bfree>
 800926e:	e698      	b.n	8008fa2 <_dtoa_r+0x5e2>
 8009270:	2400      	movs	r4, #0
 8009272:	4627      	mov	r7, r4
 8009274:	e7e0      	b.n	8009238 <_dtoa_r+0x878>
 8009276:	46bb      	mov	fp, r7
 8009278:	4604      	mov	r4, r0
 800927a:	4607      	mov	r7, r0
 800927c:	e5ba      	b.n	8008df4 <_dtoa_r+0x434>
 800927e:	9b08      	ldr	r3, [sp, #32]
 8009280:	46ca      	mov	sl, r9
 8009282:	2b00      	cmp	r3, #0
 8009284:	f000 8100 	beq.w	8009488 <_dtoa_r+0xac8>
 8009288:	f1b8 0f00 	cmp.w	r8, #0
 800928c:	dd05      	ble.n	800929a <_dtoa_r+0x8da>
 800928e:	4639      	mov	r1, r7
 8009290:	4642      	mov	r2, r8
 8009292:	4630      	mov	r0, r6
 8009294:	f000 ff04 	bl	800a0a0 <__lshift>
 8009298:	4607      	mov	r7, r0
 800929a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800929c:	2b00      	cmp	r3, #0
 800929e:	d05d      	beq.n	800935c <_dtoa_r+0x99c>
 80092a0:	6879      	ldr	r1, [r7, #4]
 80092a2:	4630      	mov	r0, r6
 80092a4:	f000 fca0 	bl	8009be8 <_Balloc>
 80092a8:	4680      	mov	r8, r0
 80092aa:	b928      	cbnz	r0, 80092b8 <_dtoa_r+0x8f8>
 80092ac:	4b82      	ldr	r3, [pc, #520]	; (80094b8 <_dtoa_r+0xaf8>)
 80092ae:	4602      	mov	r2, r0
 80092b0:	f240 21ea 	movw	r1, #746	; 0x2ea
 80092b4:	f7ff bb9a 	b.w	80089ec <_dtoa_r+0x2c>
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	3202      	adds	r2, #2
 80092bc:	0092      	lsls	r2, r2, #2
 80092be:	f107 010c 	add.w	r1, r7, #12
 80092c2:	300c      	adds	r0, #12
 80092c4:	f7fd fd32 	bl	8006d2c <memcpy>
 80092c8:	2201      	movs	r2, #1
 80092ca:	4641      	mov	r1, r8
 80092cc:	4630      	mov	r0, r6
 80092ce:	f000 fee7 	bl	800a0a0 <__lshift>
 80092d2:	9b00      	ldr	r3, [sp, #0]
 80092d4:	3301      	adds	r3, #1
 80092d6:	9305      	str	r3, [sp, #20]
 80092d8:	9b00      	ldr	r3, [sp, #0]
 80092da:	4453      	add	r3, sl
 80092dc:	9309      	str	r3, [sp, #36]	; 0x24
 80092de:	9b02      	ldr	r3, [sp, #8]
 80092e0:	f003 0301 	and.w	r3, r3, #1
 80092e4:	46b9      	mov	r9, r7
 80092e6:	9308      	str	r3, [sp, #32]
 80092e8:	4607      	mov	r7, r0
 80092ea:	9b05      	ldr	r3, [sp, #20]
 80092ec:	4621      	mov	r1, r4
 80092ee:	3b01      	subs	r3, #1
 80092f0:	4628      	mov	r0, r5
 80092f2:	9302      	str	r3, [sp, #8]
 80092f4:	f7ff fad6 	bl	80088a4 <quorem>
 80092f8:	4603      	mov	r3, r0
 80092fa:	3330      	adds	r3, #48	; 0x30
 80092fc:	9006      	str	r0, [sp, #24]
 80092fe:	4649      	mov	r1, r9
 8009300:	4628      	mov	r0, r5
 8009302:	930a      	str	r3, [sp, #40]	; 0x28
 8009304:	f000 ff38 	bl	800a178 <__mcmp>
 8009308:	463a      	mov	r2, r7
 800930a:	4682      	mov	sl, r0
 800930c:	4621      	mov	r1, r4
 800930e:	4630      	mov	r0, r6
 8009310:	f000 ff4e 	bl	800a1b0 <__mdiff>
 8009314:	68c2      	ldr	r2, [r0, #12]
 8009316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009318:	4680      	mov	r8, r0
 800931a:	bb0a      	cbnz	r2, 8009360 <_dtoa_r+0x9a0>
 800931c:	4601      	mov	r1, r0
 800931e:	4628      	mov	r0, r5
 8009320:	f000 ff2a 	bl	800a178 <__mcmp>
 8009324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009326:	4602      	mov	r2, r0
 8009328:	4641      	mov	r1, r8
 800932a:	4630      	mov	r0, r6
 800932c:	920e      	str	r2, [sp, #56]	; 0x38
 800932e:	930a      	str	r3, [sp, #40]	; 0x28
 8009330:	f000 fc9a 	bl	8009c68 <_Bfree>
 8009334:	9b07      	ldr	r3, [sp, #28]
 8009336:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009338:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800933c:	ea43 0102 	orr.w	r1, r3, r2
 8009340:	9b08      	ldr	r3, [sp, #32]
 8009342:	430b      	orrs	r3, r1
 8009344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009346:	d10d      	bne.n	8009364 <_dtoa_r+0x9a4>
 8009348:	2b39      	cmp	r3, #57	; 0x39
 800934a:	d029      	beq.n	80093a0 <_dtoa_r+0x9e0>
 800934c:	f1ba 0f00 	cmp.w	sl, #0
 8009350:	dd01      	ble.n	8009356 <_dtoa_r+0x996>
 8009352:	9b06      	ldr	r3, [sp, #24]
 8009354:	3331      	adds	r3, #49	; 0x31
 8009356:	9a02      	ldr	r2, [sp, #8]
 8009358:	7013      	strb	r3, [r2, #0]
 800935a:	e774      	b.n	8009246 <_dtoa_r+0x886>
 800935c:	4638      	mov	r0, r7
 800935e:	e7b8      	b.n	80092d2 <_dtoa_r+0x912>
 8009360:	2201      	movs	r2, #1
 8009362:	e7e1      	b.n	8009328 <_dtoa_r+0x968>
 8009364:	f1ba 0f00 	cmp.w	sl, #0
 8009368:	db06      	blt.n	8009378 <_dtoa_r+0x9b8>
 800936a:	9907      	ldr	r1, [sp, #28]
 800936c:	ea41 0a0a 	orr.w	sl, r1, sl
 8009370:	9908      	ldr	r1, [sp, #32]
 8009372:	ea5a 0101 	orrs.w	r1, sl, r1
 8009376:	d120      	bne.n	80093ba <_dtoa_r+0x9fa>
 8009378:	2a00      	cmp	r2, #0
 800937a:	ddec      	ble.n	8009356 <_dtoa_r+0x996>
 800937c:	4629      	mov	r1, r5
 800937e:	2201      	movs	r2, #1
 8009380:	4630      	mov	r0, r6
 8009382:	9305      	str	r3, [sp, #20]
 8009384:	f000 fe8c 	bl	800a0a0 <__lshift>
 8009388:	4621      	mov	r1, r4
 800938a:	4605      	mov	r5, r0
 800938c:	f000 fef4 	bl	800a178 <__mcmp>
 8009390:	2800      	cmp	r0, #0
 8009392:	9b05      	ldr	r3, [sp, #20]
 8009394:	dc02      	bgt.n	800939c <_dtoa_r+0x9dc>
 8009396:	d1de      	bne.n	8009356 <_dtoa_r+0x996>
 8009398:	07da      	lsls	r2, r3, #31
 800939a:	d5dc      	bpl.n	8009356 <_dtoa_r+0x996>
 800939c:	2b39      	cmp	r3, #57	; 0x39
 800939e:	d1d8      	bne.n	8009352 <_dtoa_r+0x992>
 80093a0:	9a02      	ldr	r2, [sp, #8]
 80093a2:	2339      	movs	r3, #57	; 0x39
 80093a4:	7013      	strb	r3, [r2, #0]
 80093a6:	4643      	mov	r3, r8
 80093a8:	4698      	mov	r8, r3
 80093aa:	3b01      	subs	r3, #1
 80093ac:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80093b0:	2a39      	cmp	r2, #57	; 0x39
 80093b2:	d051      	beq.n	8009458 <_dtoa_r+0xa98>
 80093b4:	3201      	adds	r2, #1
 80093b6:	701a      	strb	r2, [r3, #0]
 80093b8:	e745      	b.n	8009246 <_dtoa_r+0x886>
 80093ba:	2a00      	cmp	r2, #0
 80093bc:	dd03      	ble.n	80093c6 <_dtoa_r+0xa06>
 80093be:	2b39      	cmp	r3, #57	; 0x39
 80093c0:	d0ee      	beq.n	80093a0 <_dtoa_r+0x9e0>
 80093c2:	3301      	adds	r3, #1
 80093c4:	e7c7      	b.n	8009356 <_dtoa_r+0x996>
 80093c6:	9a05      	ldr	r2, [sp, #20]
 80093c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093ca:	f802 3c01 	strb.w	r3, [r2, #-1]
 80093ce:	428a      	cmp	r2, r1
 80093d0:	d02b      	beq.n	800942a <_dtoa_r+0xa6a>
 80093d2:	4629      	mov	r1, r5
 80093d4:	2300      	movs	r3, #0
 80093d6:	220a      	movs	r2, #10
 80093d8:	4630      	mov	r0, r6
 80093da:	f000 fc67 	bl	8009cac <__multadd>
 80093de:	45b9      	cmp	r9, r7
 80093e0:	4605      	mov	r5, r0
 80093e2:	f04f 0300 	mov.w	r3, #0
 80093e6:	f04f 020a 	mov.w	r2, #10
 80093ea:	4649      	mov	r1, r9
 80093ec:	4630      	mov	r0, r6
 80093ee:	d107      	bne.n	8009400 <_dtoa_r+0xa40>
 80093f0:	f000 fc5c 	bl	8009cac <__multadd>
 80093f4:	4681      	mov	r9, r0
 80093f6:	4607      	mov	r7, r0
 80093f8:	9b05      	ldr	r3, [sp, #20]
 80093fa:	3301      	adds	r3, #1
 80093fc:	9305      	str	r3, [sp, #20]
 80093fe:	e774      	b.n	80092ea <_dtoa_r+0x92a>
 8009400:	f000 fc54 	bl	8009cac <__multadd>
 8009404:	4639      	mov	r1, r7
 8009406:	4681      	mov	r9, r0
 8009408:	2300      	movs	r3, #0
 800940a:	220a      	movs	r2, #10
 800940c:	4630      	mov	r0, r6
 800940e:	f000 fc4d 	bl	8009cac <__multadd>
 8009412:	4607      	mov	r7, r0
 8009414:	e7f0      	b.n	80093f8 <_dtoa_r+0xa38>
 8009416:	f1ba 0f00 	cmp.w	sl, #0
 800941a:	9a00      	ldr	r2, [sp, #0]
 800941c:	bfcc      	ite	gt
 800941e:	46d0      	movgt	r8, sl
 8009420:	f04f 0801 	movle.w	r8, #1
 8009424:	4490      	add	r8, r2
 8009426:	f04f 0900 	mov.w	r9, #0
 800942a:	4629      	mov	r1, r5
 800942c:	2201      	movs	r2, #1
 800942e:	4630      	mov	r0, r6
 8009430:	9302      	str	r3, [sp, #8]
 8009432:	f000 fe35 	bl	800a0a0 <__lshift>
 8009436:	4621      	mov	r1, r4
 8009438:	4605      	mov	r5, r0
 800943a:	f000 fe9d 	bl	800a178 <__mcmp>
 800943e:	2800      	cmp	r0, #0
 8009440:	dcb1      	bgt.n	80093a6 <_dtoa_r+0x9e6>
 8009442:	d102      	bne.n	800944a <_dtoa_r+0xa8a>
 8009444:	9b02      	ldr	r3, [sp, #8]
 8009446:	07db      	lsls	r3, r3, #31
 8009448:	d4ad      	bmi.n	80093a6 <_dtoa_r+0x9e6>
 800944a:	4643      	mov	r3, r8
 800944c:	4698      	mov	r8, r3
 800944e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009452:	2a30      	cmp	r2, #48	; 0x30
 8009454:	d0fa      	beq.n	800944c <_dtoa_r+0xa8c>
 8009456:	e6f6      	b.n	8009246 <_dtoa_r+0x886>
 8009458:	9a00      	ldr	r2, [sp, #0]
 800945a:	429a      	cmp	r2, r3
 800945c:	d1a4      	bne.n	80093a8 <_dtoa_r+0x9e8>
 800945e:	f10b 0b01 	add.w	fp, fp, #1
 8009462:	2331      	movs	r3, #49	; 0x31
 8009464:	e778      	b.n	8009358 <_dtoa_r+0x998>
 8009466:	4b15      	ldr	r3, [pc, #84]	; (80094bc <_dtoa_r+0xafc>)
 8009468:	f7ff bb12 	b.w	8008a90 <_dtoa_r+0xd0>
 800946c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800946e:	2b00      	cmp	r3, #0
 8009470:	f47f aaee 	bne.w	8008a50 <_dtoa_r+0x90>
 8009474:	4b12      	ldr	r3, [pc, #72]	; (80094c0 <_dtoa_r+0xb00>)
 8009476:	f7ff bb0b 	b.w	8008a90 <_dtoa_r+0xd0>
 800947a:	f1ba 0f00 	cmp.w	sl, #0
 800947e:	dc03      	bgt.n	8009488 <_dtoa_r+0xac8>
 8009480:	9b07      	ldr	r3, [sp, #28]
 8009482:	2b02      	cmp	r3, #2
 8009484:	f73f aec7 	bgt.w	8009216 <_dtoa_r+0x856>
 8009488:	f8dd 8000 	ldr.w	r8, [sp]
 800948c:	4621      	mov	r1, r4
 800948e:	4628      	mov	r0, r5
 8009490:	f7ff fa08 	bl	80088a4 <quorem>
 8009494:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009498:	f808 3b01 	strb.w	r3, [r8], #1
 800949c:	9a00      	ldr	r2, [sp, #0]
 800949e:	eba8 0202 	sub.w	r2, r8, r2
 80094a2:	4592      	cmp	sl, r2
 80094a4:	ddb7      	ble.n	8009416 <_dtoa_r+0xa56>
 80094a6:	4629      	mov	r1, r5
 80094a8:	2300      	movs	r3, #0
 80094aa:	220a      	movs	r2, #10
 80094ac:	4630      	mov	r0, r6
 80094ae:	f000 fbfd 	bl	8009cac <__multadd>
 80094b2:	4605      	mov	r5, r0
 80094b4:	e7ea      	b.n	800948c <_dtoa_r+0xacc>
 80094b6:	bf00      	nop
 80094b8:	08024224 	.word	0x08024224
 80094bc:	08024024 	.word	0x08024024
 80094c0:	080241a1 	.word	0x080241a1

080094c4 <rshift>:
 80094c4:	6903      	ldr	r3, [r0, #16]
 80094c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80094ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 80094d2:	f100 0414 	add.w	r4, r0, #20
 80094d6:	dd45      	ble.n	8009564 <rshift+0xa0>
 80094d8:	f011 011f 	ands.w	r1, r1, #31
 80094dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80094e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80094e4:	d10c      	bne.n	8009500 <rshift+0x3c>
 80094e6:	f100 0710 	add.w	r7, r0, #16
 80094ea:	4629      	mov	r1, r5
 80094ec:	42b1      	cmp	r1, r6
 80094ee:	d334      	bcc.n	800955a <rshift+0x96>
 80094f0:	1a9b      	subs	r3, r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	1eea      	subs	r2, r5, #3
 80094f6:	4296      	cmp	r6, r2
 80094f8:	bf38      	it	cc
 80094fa:	2300      	movcc	r3, #0
 80094fc:	4423      	add	r3, r4
 80094fe:	e015      	b.n	800952c <rshift+0x68>
 8009500:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009504:	f1c1 0820 	rsb	r8, r1, #32
 8009508:	40cf      	lsrs	r7, r1
 800950a:	f105 0e04 	add.w	lr, r5, #4
 800950e:	46a1      	mov	r9, r4
 8009510:	4576      	cmp	r6, lr
 8009512:	46f4      	mov	ip, lr
 8009514:	d815      	bhi.n	8009542 <rshift+0x7e>
 8009516:	1a9b      	subs	r3, r3, r2
 8009518:	009a      	lsls	r2, r3, #2
 800951a:	3a04      	subs	r2, #4
 800951c:	3501      	adds	r5, #1
 800951e:	42ae      	cmp	r6, r5
 8009520:	bf38      	it	cc
 8009522:	2200      	movcc	r2, #0
 8009524:	18a3      	adds	r3, r4, r2
 8009526:	50a7      	str	r7, [r4, r2]
 8009528:	b107      	cbz	r7, 800952c <rshift+0x68>
 800952a:	3304      	adds	r3, #4
 800952c:	1b1a      	subs	r2, r3, r4
 800952e:	42a3      	cmp	r3, r4
 8009530:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009534:	bf08      	it	eq
 8009536:	2300      	moveq	r3, #0
 8009538:	6102      	str	r2, [r0, #16]
 800953a:	bf08      	it	eq
 800953c:	6143      	streq	r3, [r0, #20]
 800953e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009542:	f8dc c000 	ldr.w	ip, [ip]
 8009546:	fa0c fc08 	lsl.w	ip, ip, r8
 800954a:	ea4c 0707 	orr.w	r7, ip, r7
 800954e:	f849 7b04 	str.w	r7, [r9], #4
 8009552:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009556:	40cf      	lsrs	r7, r1
 8009558:	e7da      	b.n	8009510 <rshift+0x4c>
 800955a:	f851 cb04 	ldr.w	ip, [r1], #4
 800955e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009562:	e7c3      	b.n	80094ec <rshift+0x28>
 8009564:	4623      	mov	r3, r4
 8009566:	e7e1      	b.n	800952c <rshift+0x68>

08009568 <__hexdig_fun>:
 8009568:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800956c:	2b09      	cmp	r3, #9
 800956e:	d802      	bhi.n	8009576 <__hexdig_fun+0xe>
 8009570:	3820      	subs	r0, #32
 8009572:	b2c0      	uxtb	r0, r0
 8009574:	4770      	bx	lr
 8009576:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800957a:	2b05      	cmp	r3, #5
 800957c:	d801      	bhi.n	8009582 <__hexdig_fun+0x1a>
 800957e:	3847      	subs	r0, #71	; 0x47
 8009580:	e7f7      	b.n	8009572 <__hexdig_fun+0xa>
 8009582:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009586:	2b05      	cmp	r3, #5
 8009588:	d801      	bhi.n	800958e <__hexdig_fun+0x26>
 800958a:	3827      	subs	r0, #39	; 0x27
 800958c:	e7f1      	b.n	8009572 <__hexdig_fun+0xa>
 800958e:	2000      	movs	r0, #0
 8009590:	4770      	bx	lr
	...

08009594 <__gethex>:
 8009594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009598:	ed2d 8b02 	vpush	{d8}
 800959c:	b089      	sub	sp, #36	; 0x24
 800959e:	ee08 0a10 	vmov	s16, r0
 80095a2:	9304      	str	r3, [sp, #16]
 80095a4:	4bbc      	ldr	r3, [pc, #752]	; (8009898 <__gethex+0x304>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	9301      	str	r3, [sp, #4]
 80095aa:	4618      	mov	r0, r3
 80095ac:	468b      	mov	fp, r1
 80095ae:	4690      	mov	r8, r2
 80095b0:	f7f6 fe96 	bl	80002e0 <strlen>
 80095b4:	9b01      	ldr	r3, [sp, #4]
 80095b6:	f8db 2000 	ldr.w	r2, [fp]
 80095ba:	4403      	add	r3, r0
 80095bc:	4682      	mov	sl, r0
 80095be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80095c2:	9305      	str	r3, [sp, #20]
 80095c4:	1c93      	adds	r3, r2, #2
 80095c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80095ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80095ce:	32fe      	adds	r2, #254	; 0xfe
 80095d0:	18d1      	adds	r1, r2, r3
 80095d2:	461f      	mov	r7, r3
 80095d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80095d8:	9100      	str	r1, [sp, #0]
 80095da:	2830      	cmp	r0, #48	; 0x30
 80095dc:	d0f8      	beq.n	80095d0 <__gethex+0x3c>
 80095de:	f7ff ffc3 	bl	8009568 <__hexdig_fun>
 80095e2:	4604      	mov	r4, r0
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d13a      	bne.n	800965e <__gethex+0xca>
 80095e8:	9901      	ldr	r1, [sp, #4]
 80095ea:	4652      	mov	r2, sl
 80095ec:	4638      	mov	r0, r7
 80095ee:	f001 f94f 	bl	800a890 <strncmp>
 80095f2:	4605      	mov	r5, r0
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d168      	bne.n	80096ca <__gethex+0x136>
 80095f8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80095fc:	eb07 060a 	add.w	r6, r7, sl
 8009600:	f7ff ffb2 	bl	8009568 <__hexdig_fun>
 8009604:	2800      	cmp	r0, #0
 8009606:	d062      	beq.n	80096ce <__gethex+0x13a>
 8009608:	4633      	mov	r3, r6
 800960a:	7818      	ldrb	r0, [r3, #0]
 800960c:	2830      	cmp	r0, #48	; 0x30
 800960e:	461f      	mov	r7, r3
 8009610:	f103 0301 	add.w	r3, r3, #1
 8009614:	d0f9      	beq.n	800960a <__gethex+0x76>
 8009616:	f7ff ffa7 	bl	8009568 <__hexdig_fun>
 800961a:	2301      	movs	r3, #1
 800961c:	fab0 f480 	clz	r4, r0
 8009620:	0964      	lsrs	r4, r4, #5
 8009622:	4635      	mov	r5, r6
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	463a      	mov	r2, r7
 8009628:	4616      	mov	r6, r2
 800962a:	3201      	adds	r2, #1
 800962c:	7830      	ldrb	r0, [r6, #0]
 800962e:	f7ff ff9b 	bl	8009568 <__hexdig_fun>
 8009632:	2800      	cmp	r0, #0
 8009634:	d1f8      	bne.n	8009628 <__gethex+0x94>
 8009636:	9901      	ldr	r1, [sp, #4]
 8009638:	4652      	mov	r2, sl
 800963a:	4630      	mov	r0, r6
 800963c:	f001 f928 	bl	800a890 <strncmp>
 8009640:	b980      	cbnz	r0, 8009664 <__gethex+0xd0>
 8009642:	b94d      	cbnz	r5, 8009658 <__gethex+0xc4>
 8009644:	eb06 050a 	add.w	r5, r6, sl
 8009648:	462a      	mov	r2, r5
 800964a:	4616      	mov	r6, r2
 800964c:	3201      	adds	r2, #1
 800964e:	7830      	ldrb	r0, [r6, #0]
 8009650:	f7ff ff8a 	bl	8009568 <__hexdig_fun>
 8009654:	2800      	cmp	r0, #0
 8009656:	d1f8      	bne.n	800964a <__gethex+0xb6>
 8009658:	1bad      	subs	r5, r5, r6
 800965a:	00ad      	lsls	r5, r5, #2
 800965c:	e004      	b.n	8009668 <__gethex+0xd4>
 800965e:	2400      	movs	r4, #0
 8009660:	4625      	mov	r5, r4
 8009662:	e7e0      	b.n	8009626 <__gethex+0x92>
 8009664:	2d00      	cmp	r5, #0
 8009666:	d1f7      	bne.n	8009658 <__gethex+0xc4>
 8009668:	7833      	ldrb	r3, [r6, #0]
 800966a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800966e:	2b50      	cmp	r3, #80	; 0x50
 8009670:	d13b      	bne.n	80096ea <__gethex+0x156>
 8009672:	7873      	ldrb	r3, [r6, #1]
 8009674:	2b2b      	cmp	r3, #43	; 0x2b
 8009676:	d02c      	beq.n	80096d2 <__gethex+0x13e>
 8009678:	2b2d      	cmp	r3, #45	; 0x2d
 800967a:	d02e      	beq.n	80096da <__gethex+0x146>
 800967c:	1c71      	adds	r1, r6, #1
 800967e:	f04f 0900 	mov.w	r9, #0
 8009682:	7808      	ldrb	r0, [r1, #0]
 8009684:	f7ff ff70 	bl	8009568 <__hexdig_fun>
 8009688:	1e43      	subs	r3, r0, #1
 800968a:	b2db      	uxtb	r3, r3
 800968c:	2b18      	cmp	r3, #24
 800968e:	d82c      	bhi.n	80096ea <__gethex+0x156>
 8009690:	f1a0 0210 	sub.w	r2, r0, #16
 8009694:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009698:	f7ff ff66 	bl	8009568 <__hexdig_fun>
 800969c:	1e43      	subs	r3, r0, #1
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b18      	cmp	r3, #24
 80096a2:	d91d      	bls.n	80096e0 <__gethex+0x14c>
 80096a4:	f1b9 0f00 	cmp.w	r9, #0
 80096a8:	d000      	beq.n	80096ac <__gethex+0x118>
 80096aa:	4252      	negs	r2, r2
 80096ac:	4415      	add	r5, r2
 80096ae:	f8cb 1000 	str.w	r1, [fp]
 80096b2:	b1e4      	cbz	r4, 80096ee <__gethex+0x15a>
 80096b4:	9b00      	ldr	r3, [sp, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	bf14      	ite	ne
 80096ba:	2700      	movne	r7, #0
 80096bc:	2706      	moveq	r7, #6
 80096be:	4638      	mov	r0, r7
 80096c0:	b009      	add	sp, #36	; 0x24
 80096c2:	ecbd 8b02 	vpop	{d8}
 80096c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ca:	463e      	mov	r6, r7
 80096cc:	4625      	mov	r5, r4
 80096ce:	2401      	movs	r4, #1
 80096d0:	e7ca      	b.n	8009668 <__gethex+0xd4>
 80096d2:	f04f 0900 	mov.w	r9, #0
 80096d6:	1cb1      	adds	r1, r6, #2
 80096d8:	e7d3      	b.n	8009682 <__gethex+0xee>
 80096da:	f04f 0901 	mov.w	r9, #1
 80096de:	e7fa      	b.n	80096d6 <__gethex+0x142>
 80096e0:	230a      	movs	r3, #10
 80096e2:	fb03 0202 	mla	r2, r3, r2, r0
 80096e6:	3a10      	subs	r2, #16
 80096e8:	e7d4      	b.n	8009694 <__gethex+0x100>
 80096ea:	4631      	mov	r1, r6
 80096ec:	e7df      	b.n	80096ae <__gethex+0x11a>
 80096ee:	1bf3      	subs	r3, r6, r7
 80096f0:	3b01      	subs	r3, #1
 80096f2:	4621      	mov	r1, r4
 80096f4:	2b07      	cmp	r3, #7
 80096f6:	dc0b      	bgt.n	8009710 <__gethex+0x17c>
 80096f8:	ee18 0a10 	vmov	r0, s16
 80096fc:	f000 fa74 	bl	8009be8 <_Balloc>
 8009700:	4604      	mov	r4, r0
 8009702:	b940      	cbnz	r0, 8009716 <__gethex+0x182>
 8009704:	4b65      	ldr	r3, [pc, #404]	; (800989c <__gethex+0x308>)
 8009706:	4602      	mov	r2, r0
 8009708:	21de      	movs	r1, #222	; 0xde
 800970a:	4865      	ldr	r0, [pc, #404]	; (80098a0 <__gethex+0x30c>)
 800970c:	f001 f8e0 	bl	800a8d0 <__assert_func>
 8009710:	3101      	adds	r1, #1
 8009712:	105b      	asrs	r3, r3, #1
 8009714:	e7ee      	b.n	80096f4 <__gethex+0x160>
 8009716:	f100 0914 	add.w	r9, r0, #20
 800971a:	f04f 0b00 	mov.w	fp, #0
 800971e:	f1ca 0301 	rsb	r3, sl, #1
 8009722:	f8cd 9008 	str.w	r9, [sp, #8]
 8009726:	f8cd b000 	str.w	fp, [sp]
 800972a:	9306      	str	r3, [sp, #24]
 800972c:	42b7      	cmp	r7, r6
 800972e:	d340      	bcc.n	80097b2 <__gethex+0x21e>
 8009730:	9802      	ldr	r0, [sp, #8]
 8009732:	9b00      	ldr	r3, [sp, #0]
 8009734:	f840 3b04 	str.w	r3, [r0], #4
 8009738:	eba0 0009 	sub.w	r0, r0, r9
 800973c:	1080      	asrs	r0, r0, #2
 800973e:	0146      	lsls	r6, r0, #5
 8009740:	6120      	str	r0, [r4, #16]
 8009742:	4618      	mov	r0, r3
 8009744:	f000 fb46 	bl	8009dd4 <__hi0bits>
 8009748:	1a30      	subs	r0, r6, r0
 800974a:	f8d8 6000 	ldr.w	r6, [r8]
 800974e:	42b0      	cmp	r0, r6
 8009750:	dd63      	ble.n	800981a <__gethex+0x286>
 8009752:	1b87      	subs	r7, r0, r6
 8009754:	4639      	mov	r1, r7
 8009756:	4620      	mov	r0, r4
 8009758:	f000 fee1 	bl	800a51e <__any_on>
 800975c:	4682      	mov	sl, r0
 800975e:	b1a8      	cbz	r0, 800978c <__gethex+0x1f8>
 8009760:	1e7b      	subs	r3, r7, #1
 8009762:	1159      	asrs	r1, r3, #5
 8009764:	f003 021f 	and.w	r2, r3, #31
 8009768:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800976c:	f04f 0a01 	mov.w	sl, #1
 8009770:	fa0a f202 	lsl.w	r2, sl, r2
 8009774:	420a      	tst	r2, r1
 8009776:	d009      	beq.n	800978c <__gethex+0x1f8>
 8009778:	4553      	cmp	r3, sl
 800977a:	dd05      	ble.n	8009788 <__gethex+0x1f4>
 800977c:	1eb9      	subs	r1, r7, #2
 800977e:	4620      	mov	r0, r4
 8009780:	f000 fecd 	bl	800a51e <__any_on>
 8009784:	2800      	cmp	r0, #0
 8009786:	d145      	bne.n	8009814 <__gethex+0x280>
 8009788:	f04f 0a02 	mov.w	sl, #2
 800978c:	4639      	mov	r1, r7
 800978e:	4620      	mov	r0, r4
 8009790:	f7ff fe98 	bl	80094c4 <rshift>
 8009794:	443d      	add	r5, r7
 8009796:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800979a:	42ab      	cmp	r3, r5
 800979c:	da4c      	bge.n	8009838 <__gethex+0x2a4>
 800979e:	ee18 0a10 	vmov	r0, s16
 80097a2:	4621      	mov	r1, r4
 80097a4:	f000 fa60 	bl	8009c68 <_Bfree>
 80097a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80097aa:	2300      	movs	r3, #0
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	27a3      	movs	r7, #163	; 0xa3
 80097b0:	e785      	b.n	80096be <__gethex+0x12a>
 80097b2:	1e73      	subs	r3, r6, #1
 80097b4:	9a05      	ldr	r2, [sp, #20]
 80097b6:	9303      	str	r3, [sp, #12]
 80097b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80097bc:	4293      	cmp	r3, r2
 80097be:	d019      	beq.n	80097f4 <__gethex+0x260>
 80097c0:	f1bb 0f20 	cmp.w	fp, #32
 80097c4:	d107      	bne.n	80097d6 <__gethex+0x242>
 80097c6:	9b02      	ldr	r3, [sp, #8]
 80097c8:	9a00      	ldr	r2, [sp, #0]
 80097ca:	f843 2b04 	str.w	r2, [r3], #4
 80097ce:	9302      	str	r3, [sp, #8]
 80097d0:	2300      	movs	r3, #0
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	469b      	mov	fp, r3
 80097d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80097da:	f7ff fec5 	bl	8009568 <__hexdig_fun>
 80097de:	9b00      	ldr	r3, [sp, #0]
 80097e0:	f000 000f 	and.w	r0, r0, #15
 80097e4:	fa00 f00b 	lsl.w	r0, r0, fp
 80097e8:	4303      	orrs	r3, r0
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	f10b 0b04 	add.w	fp, fp, #4
 80097f0:	9b03      	ldr	r3, [sp, #12]
 80097f2:	e00d      	b.n	8009810 <__gethex+0x27c>
 80097f4:	9b03      	ldr	r3, [sp, #12]
 80097f6:	9a06      	ldr	r2, [sp, #24]
 80097f8:	4413      	add	r3, r2
 80097fa:	42bb      	cmp	r3, r7
 80097fc:	d3e0      	bcc.n	80097c0 <__gethex+0x22c>
 80097fe:	4618      	mov	r0, r3
 8009800:	9901      	ldr	r1, [sp, #4]
 8009802:	9307      	str	r3, [sp, #28]
 8009804:	4652      	mov	r2, sl
 8009806:	f001 f843 	bl	800a890 <strncmp>
 800980a:	9b07      	ldr	r3, [sp, #28]
 800980c:	2800      	cmp	r0, #0
 800980e:	d1d7      	bne.n	80097c0 <__gethex+0x22c>
 8009810:	461e      	mov	r6, r3
 8009812:	e78b      	b.n	800972c <__gethex+0x198>
 8009814:	f04f 0a03 	mov.w	sl, #3
 8009818:	e7b8      	b.n	800978c <__gethex+0x1f8>
 800981a:	da0a      	bge.n	8009832 <__gethex+0x29e>
 800981c:	1a37      	subs	r7, r6, r0
 800981e:	4621      	mov	r1, r4
 8009820:	ee18 0a10 	vmov	r0, s16
 8009824:	463a      	mov	r2, r7
 8009826:	f000 fc3b 	bl	800a0a0 <__lshift>
 800982a:	1bed      	subs	r5, r5, r7
 800982c:	4604      	mov	r4, r0
 800982e:	f100 0914 	add.w	r9, r0, #20
 8009832:	f04f 0a00 	mov.w	sl, #0
 8009836:	e7ae      	b.n	8009796 <__gethex+0x202>
 8009838:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800983c:	42a8      	cmp	r0, r5
 800983e:	dd72      	ble.n	8009926 <__gethex+0x392>
 8009840:	1b45      	subs	r5, r0, r5
 8009842:	42ae      	cmp	r6, r5
 8009844:	dc36      	bgt.n	80098b4 <__gethex+0x320>
 8009846:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800984a:	2b02      	cmp	r3, #2
 800984c:	d02a      	beq.n	80098a4 <__gethex+0x310>
 800984e:	2b03      	cmp	r3, #3
 8009850:	d02c      	beq.n	80098ac <__gethex+0x318>
 8009852:	2b01      	cmp	r3, #1
 8009854:	d115      	bne.n	8009882 <__gethex+0x2ee>
 8009856:	42ae      	cmp	r6, r5
 8009858:	d113      	bne.n	8009882 <__gethex+0x2ee>
 800985a:	2e01      	cmp	r6, #1
 800985c:	d10b      	bne.n	8009876 <__gethex+0x2e2>
 800985e:	9a04      	ldr	r2, [sp, #16]
 8009860:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009864:	6013      	str	r3, [r2, #0]
 8009866:	2301      	movs	r3, #1
 8009868:	6123      	str	r3, [r4, #16]
 800986a:	f8c9 3000 	str.w	r3, [r9]
 800986e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009870:	2762      	movs	r7, #98	; 0x62
 8009872:	601c      	str	r4, [r3, #0]
 8009874:	e723      	b.n	80096be <__gethex+0x12a>
 8009876:	1e71      	subs	r1, r6, #1
 8009878:	4620      	mov	r0, r4
 800987a:	f000 fe50 	bl	800a51e <__any_on>
 800987e:	2800      	cmp	r0, #0
 8009880:	d1ed      	bne.n	800985e <__gethex+0x2ca>
 8009882:	ee18 0a10 	vmov	r0, s16
 8009886:	4621      	mov	r1, r4
 8009888:	f000 f9ee 	bl	8009c68 <_Bfree>
 800988c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800988e:	2300      	movs	r3, #0
 8009890:	6013      	str	r3, [r2, #0]
 8009892:	2750      	movs	r7, #80	; 0x50
 8009894:	e713      	b.n	80096be <__gethex+0x12a>
 8009896:	bf00      	nop
 8009898:	080242a0 	.word	0x080242a0
 800989c:	08024224 	.word	0x08024224
 80098a0:	08024235 	.word	0x08024235
 80098a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1eb      	bne.n	8009882 <__gethex+0x2ee>
 80098aa:	e7d8      	b.n	800985e <__gethex+0x2ca>
 80098ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1d5      	bne.n	800985e <__gethex+0x2ca>
 80098b2:	e7e6      	b.n	8009882 <__gethex+0x2ee>
 80098b4:	1e6f      	subs	r7, r5, #1
 80098b6:	f1ba 0f00 	cmp.w	sl, #0
 80098ba:	d131      	bne.n	8009920 <__gethex+0x38c>
 80098bc:	b127      	cbz	r7, 80098c8 <__gethex+0x334>
 80098be:	4639      	mov	r1, r7
 80098c0:	4620      	mov	r0, r4
 80098c2:	f000 fe2c 	bl	800a51e <__any_on>
 80098c6:	4682      	mov	sl, r0
 80098c8:	117b      	asrs	r3, r7, #5
 80098ca:	2101      	movs	r1, #1
 80098cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80098d0:	f007 071f 	and.w	r7, r7, #31
 80098d4:	fa01 f707 	lsl.w	r7, r1, r7
 80098d8:	421f      	tst	r7, r3
 80098da:	4629      	mov	r1, r5
 80098dc:	4620      	mov	r0, r4
 80098de:	bf18      	it	ne
 80098e0:	f04a 0a02 	orrne.w	sl, sl, #2
 80098e4:	1b76      	subs	r6, r6, r5
 80098e6:	f7ff fded 	bl	80094c4 <rshift>
 80098ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80098ee:	2702      	movs	r7, #2
 80098f0:	f1ba 0f00 	cmp.w	sl, #0
 80098f4:	d048      	beq.n	8009988 <__gethex+0x3f4>
 80098f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d015      	beq.n	800992a <__gethex+0x396>
 80098fe:	2b03      	cmp	r3, #3
 8009900:	d017      	beq.n	8009932 <__gethex+0x39e>
 8009902:	2b01      	cmp	r3, #1
 8009904:	d109      	bne.n	800991a <__gethex+0x386>
 8009906:	f01a 0f02 	tst.w	sl, #2
 800990a:	d006      	beq.n	800991a <__gethex+0x386>
 800990c:	f8d9 0000 	ldr.w	r0, [r9]
 8009910:	ea4a 0a00 	orr.w	sl, sl, r0
 8009914:	f01a 0f01 	tst.w	sl, #1
 8009918:	d10e      	bne.n	8009938 <__gethex+0x3a4>
 800991a:	f047 0710 	orr.w	r7, r7, #16
 800991e:	e033      	b.n	8009988 <__gethex+0x3f4>
 8009920:	f04f 0a01 	mov.w	sl, #1
 8009924:	e7d0      	b.n	80098c8 <__gethex+0x334>
 8009926:	2701      	movs	r7, #1
 8009928:	e7e2      	b.n	80098f0 <__gethex+0x35c>
 800992a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800992c:	f1c3 0301 	rsb	r3, r3, #1
 8009930:	9315      	str	r3, [sp, #84]	; 0x54
 8009932:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009934:	2b00      	cmp	r3, #0
 8009936:	d0f0      	beq.n	800991a <__gethex+0x386>
 8009938:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800993c:	f104 0314 	add.w	r3, r4, #20
 8009940:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009944:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009948:	f04f 0c00 	mov.w	ip, #0
 800994c:	4618      	mov	r0, r3
 800994e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009952:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009956:	d01c      	beq.n	8009992 <__gethex+0x3fe>
 8009958:	3201      	adds	r2, #1
 800995a:	6002      	str	r2, [r0, #0]
 800995c:	2f02      	cmp	r7, #2
 800995e:	f104 0314 	add.w	r3, r4, #20
 8009962:	d13f      	bne.n	80099e4 <__gethex+0x450>
 8009964:	f8d8 2000 	ldr.w	r2, [r8]
 8009968:	3a01      	subs	r2, #1
 800996a:	42b2      	cmp	r2, r6
 800996c:	d10a      	bne.n	8009984 <__gethex+0x3f0>
 800996e:	1171      	asrs	r1, r6, #5
 8009970:	2201      	movs	r2, #1
 8009972:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009976:	f006 061f 	and.w	r6, r6, #31
 800997a:	fa02 f606 	lsl.w	r6, r2, r6
 800997e:	421e      	tst	r6, r3
 8009980:	bf18      	it	ne
 8009982:	4617      	movne	r7, r2
 8009984:	f047 0720 	orr.w	r7, r7, #32
 8009988:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800998a:	601c      	str	r4, [r3, #0]
 800998c:	9b04      	ldr	r3, [sp, #16]
 800998e:	601d      	str	r5, [r3, #0]
 8009990:	e695      	b.n	80096be <__gethex+0x12a>
 8009992:	4299      	cmp	r1, r3
 8009994:	f843 cc04 	str.w	ip, [r3, #-4]
 8009998:	d8d8      	bhi.n	800994c <__gethex+0x3b8>
 800999a:	68a3      	ldr	r3, [r4, #8]
 800999c:	459b      	cmp	fp, r3
 800999e:	db19      	blt.n	80099d4 <__gethex+0x440>
 80099a0:	6861      	ldr	r1, [r4, #4]
 80099a2:	ee18 0a10 	vmov	r0, s16
 80099a6:	3101      	adds	r1, #1
 80099a8:	f000 f91e 	bl	8009be8 <_Balloc>
 80099ac:	4681      	mov	r9, r0
 80099ae:	b918      	cbnz	r0, 80099b8 <__gethex+0x424>
 80099b0:	4b1a      	ldr	r3, [pc, #104]	; (8009a1c <__gethex+0x488>)
 80099b2:	4602      	mov	r2, r0
 80099b4:	2184      	movs	r1, #132	; 0x84
 80099b6:	e6a8      	b.n	800970a <__gethex+0x176>
 80099b8:	6922      	ldr	r2, [r4, #16]
 80099ba:	3202      	adds	r2, #2
 80099bc:	f104 010c 	add.w	r1, r4, #12
 80099c0:	0092      	lsls	r2, r2, #2
 80099c2:	300c      	adds	r0, #12
 80099c4:	f7fd f9b2 	bl	8006d2c <memcpy>
 80099c8:	4621      	mov	r1, r4
 80099ca:	ee18 0a10 	vmov	r0, s16
 80099ce:	f000 f94b 	bl	8009c68 <_Bfree>
 80099d2:	464c      	mov	r4, r9
 80099d4:	6923      	ldr	r3, [r4, #16]
 80099d6:	1c5a      	adds	r2, r3, #1
 80099d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80099dc:	6122      	str	r2, [r4, #16]
 80099de:	2201      	movs	r2, #1
 80099e0:	615a      	str	r2, [r3, #20]
 80099e2:	e7bb      	b.n	800995c <__gethex+0x3c8>
 80099e4:	6922      	ldr	r2, [r4, #16]
 80099e6:	455a      	cmp	r2, fp
 80099e8:	dd0b      	ble.n	8009a02 <__gethex+0x46e>
 80099ea:	2101      	movs	r1, #1
 80099ec:	4620      	mov	r0, r4
 80099ee:	f7ff fd69 	bl	80094c4 <rshift>
 80099f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099f6:	3501      	adds	r5, #1
 80099f8:	42ab      	cmp	r3, r5
 80099fa:	f6ff aed0 	blt.w	800979e <__gethex+0x20a>
 80099fe:	2701      	movs	r7, #1
 8009a00:	e7c0      	b.n	8009984 <__gethex+0x3f0>
 8009a02:	f016 061f 	ands.w	r6, r6, #31
 8009a06:	d0fa      	beq.n	80099fe <__gethex+0x46a>
 8009a08:	449a      	add	sl, r3
 8009a0a:	f1c6 0620 	rsb	r6, r6, #32
 8009a0e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009a12:	f000 f9df 	bl	8009dd4 <__hi0bits>
 8009a16:	42b0      	cmp	r0, r6
 8009a18:	dbe7      	blt.n	80099ea <__gethex+0x456>
 8009a1a:	e7f0      	b.n	80099fe <__gethex+0x46a>
 8009a1c:	08024224 	.word	0x08024224

08009a20 <L_shift>:
 8009a20:	f1c2 0208 	rsb	r2, r2, #8
 8009a24:	0092      	lsls	r2, r2, #2
 8009a26:	b570      	push	{r4, r5, r6, lr}
 8009a28:	f1c2 0620 	rsb	r6, r2, #32
 8009a2c:	6843      	ldr	r3, [r0, #4]
 8009a2e:	6804      	ldr	r4, [r0, #0]
 8009a30:	fa03 f506 	lsl.w	r5, r3, r6
 8009a34:	432c      	orrs	r4, r5
 8009a36:	40d3      	lsrs	r3, r2
 8009a38:	6004      	str	r4, [r0, #0]
 8009a3a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009a3e:	4288      	cmp	r0, r1
 8009a40:	d3f4      	bcc.n	8009a2c <L_shift+0xc>
 8009a42:	bd70      	pop	{r4, r5, r6, pc}

08009a44 <__match>:
 8009a44:	b530      	push	{r4, r5, lr}
 8009a46:	6803      	ldr	r3, [r0, #0]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a4e:	b914      	cbnz	r4, 8009a56 <__match+0x12>
 8009a50:	6003      	str	r3, [r0, #0]
 8009a52:	2001      	movs	r0, #1
 8009a54:	bd30      	pop	{r4, r5, pc}
 8009a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009a5e:	2d19      	cmp	r5, #25
 8009a60:	bf98      	it	ls
 8009a62:	3220      	addls	r2, #32
 8009a64:	42a2      	cmp	r2, r4
 8009a66:	d0f0      	beq.n	8009a4a <__match+0x6>
 8009a68:	2000      	movs	r0, #0
 8009a6a:	e7f3      	b.n	8009a54 <__match+0x10>

08009a6c <__hexnan>:
 8009a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a70:	680b      	ldr	r3, [r1, #0]
 8009a72:	6801      	ldr	r1, [r0, #0]
 8009a74:	115e      	asrs	r6, r3, #5
 8009a76:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009a7a:	f013 031f 	ands.w	r3, r3, #31
 8009a7e:	b087      	sub	sp, #28
 8009a80:	bf18      	it	ne
 8009a82:	3604      	addne	r6, #4
 8009a84:	2500      	movs	r5, #0
 8009a86:	1f37      	subs	r7, r6, #4
 8009a88:	4682      	mov	sl, r0
 8009a8a:	4690      	mov	r8, r2
 8009a8c:	9301      	str	r3, [sp, #4]
 8009a8e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009a92:	46b9      	mov	r9, r7
 8009a94:	463c      	mov	r4, r7
 8009a96:	9502      	str	r5, [sp, #8]
 8009a98:	46ab      	mov	fp, r5
 8009a9a:	784a      	ldrb	r2, [r1, #1]
 8009a9c:	1c4b      	adds	r3, r1, #1
 8009a9e:	9303      	str	r3, [sp, #12]
 8009aa0:	b342      	cbz	r2, 8009af4 <__hexnan+0x88>
 8009aa2:	4610      	mov	r0, r2
 8009aa4:	9105      	str	r1, [sp, #20]
 8009aa6:	9204      	str	r2, [sp, #16]
 8009aa8:	f7ff fd5e 	bl	8009568 <__hexdig_fun>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d14f      	bne.n	8009b50 <__hexnan+0xe4>
 8009ab0:	9a04      	ldr	r2, [sp, #16]
 8009ab2:	9905      	ldr	r1, [sp, #20]
 8009ab4:	2a20      	cmp	r2, #32
 8009ab6:	d818      	bhi.n	8009aea <__hexnan+0x7e>
 8009ab8:	9b02      	ldr	r3, [sp, #8]
 8009aba:	459b      	cmp	fp, r3
 8009abc:	dd13      	ble.n	8009ae6 <__hexnan+0x7a>
 8009abe:	454c      	cmp	r4, r9
 8009ac0:	d206      	bcs.n	8009ad0 <__hexnan+0x64>
 8009ac2:	2d07      	cmp	r5, #7
 8009ac4:	dc04      	bgt.n	8009ad0 <__hexnan+0x64>
 8009ac6:	462a      	mov	r2, r5
 8009ac8:	4649      	mov	r1, r9
 8009aca:	4620      	mov	r0, r4
 8009acc:	f7ff ffa8 	bl	8009a20 <L_shift>
 8009ad0:	4544      	cmp	r4, r8
 8009ad2:	d950      	bls.n	8009b76 <__hexnan+0x10a>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	f1a4 0904 	sub.w	r9, r4, #4
 8009ada:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ade:	f8cd b008 	str.w	fp, [sp, #8]
 8009ae2:	464c      	mov	r4, r9
 8009ae4:	461d      	mov	r5, r3
 8009ae6:	9903      	ldr	r1, [sp, #12]
 8009ae8:	e7d7      	b.n	8009a9a <__hexnan+0x2e>
 8009aea:	2a29      	cmp	r2, #41	; 0x29
 8009aec:	d156      	bne.n	8009b9c <__hexnan+0x130>
 8009aee:	3102      	adds	r1, #2
 8009af0:	f8ca 1000 	str.w	r1, [sl]
 8009af4:	f1bb 0f00 	cmp.w	fp, #0
 8009af8:	d050      	beq.n	8009b9c <__hexnan+0x130>
 8009afa:	454c      	cmp	r4, r9
 8009afc:	d206      	bcs.n	8009b0c <__hexnan+0xa0>
 8009afe:	2d07      	cmp	r5, #7
 8009b00:	dc04      	bgt.n	8009b0c <__hexnan+0xa0>
 8009b02:	462a      	mov	r2, r5
 8009b04:	4649      	mov	r1, r9
 8009b06:	4620      	mov	r0, r4
 8009b08:	f7ff ff8a 	bl	8009a20 <L_shift>
 8009b0c:	4544      	cmp	r4, r8
 8009b0e:	d934      	bls.n	8009b7a <__hexnan+0x10e>
 8009b10:	f1a8 0204 	sub.w	r2, r8, #4
 8009b14:	4623      	mov	r3, r4
 8009b16:	f853 1b04 	ldr.w	r1, [r3], #4
 8009b1a:	f842 1f04 	str.w	r1, [r2, #4]!
 8009b1e:	429f      	cmp	r7, r3
 8009b20:	d2f9      	bcs.n	8009b16 <__hexnan+0xaa>
 8009b22:	1b3b      	subs	r3, r7, r4
 8009b24:	f023 0303 	bic.w	r3, r3, #3
 8009b28:	3304      	adds	r3, #4
 8009b2a:	3401      	adds	r4, #1
 8009b2c:	3e03      	subs	r6, #3
 8009b2e:	42b4      	cmp	r4, r6
 8009b30:	bf88      	it	hi
 8009b32:	2304      	movhi	r3, #4
 8009b34:	4443      	add	r3, r8
 8009b36:	2200      	movs	r2, #0
 8009b38:	f843 2b04 	str.w	r2, [r3], #4
 8009b3c:	429f      	cmp	r7, r3
 8009b3e:	d2fb      	bcs.n	8009b38 <__hexnan+0xcc>
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	b91b      	cbnz	r3, 8009b4c <__hexnan+0xe0>
 8009b44:	4547      	cmp	r7, r8
 8009b46:	d127      	bne.n	8009b98 <__hexnan+0x12c>
 8009b48:	2301      	movs	r3, #1
 8009b4a:	603b      	str	r3, [r7, #0]
 8009b4c:	2005      	movs	r0, #5
 8009b4e:	e026      	b.n	8009b9e <__hexnan+0x132>
 8009b50:	3501      	adds	r5, #1
 8009b52:	2d08      	cmp	r5, #8
 8009b54:	f10b 0b01 	add.w	fp, fp, #1
 8009b58:	dd06      	ble.n	8009b68 <__hexnan+0xfc>
 8009b5a:	4544      	cmp	r4, r8
 8009b5c:	d9c3      	bls.n	8009ae6 <__hexnan+0x7a>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b64:	2501      	movs	r5, #1
 8009b66:	3c04      	subs	r4, #4
 8009b68:	6822      	ldr	r2, [r4, #0]
 8009b6a:	f000 000f 	and.w	r0, r0, #15
 8009b6e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009b72:	6022      	str	r2, [r4, #0]
 8009b74:	e7b7      	b.n	8009ae6 <__hexnan+0x7a>
 8009b76:	2508      	movs	r5, #8
 8009b78:	e7b5      	b.n	8009ae6 <__hexnan+0x7a>
 8009b7a:	9b01      	ldr	r3, [sp, #4]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d0df      	beq.n	8009b40 <__hexnan+0xd4>
 8009b80:	f04f 32ff 	mov.w	r2, #4294967295
 8009b84:	f1c3 0320 	rsb	r3, r3, #32
 8009b88:	fa22 f303 	lsr.w	r3, r2, r3
 8009b8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009b90:	401a      	ands	r2, r3
 8009b92:	f846 2c04 	str.w	r2, [r6, #-4]
 8009b96:	e7d3      	b.n	8009b40 <__hexnan+0xd4>
 8009b98:	3f04      	subs	r7, #4
 8009b9a:	e7d1      	b.n	8009b40 <__hexnan+0xd4>
 8009b9c:	2004      	movs	r0, #4
 8009b9e:	b007      	add	sp, #28
 8009ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ba4 <_localeconv_r>:
 8009ba4:	4800      	ldr	r0, [pc, #0]	; (8009ba8 <_localeconv_r+0x4>)
 8009ba6:	4770      	bx	lr
 8009ba8:	24000950 	.word	0x24000950

08009bac <__ascii_mbtowc>:
 8009bac:	b082      	sub	sp, #8
 8009bae:	b901      	cbnz	r1, 8009bb2 <__ascii_mbtowc+0x6>
 8009bb0:	a901      	add	r1, sp, #4
 8009bb2:	b142      	cbz	r2, 8009bc6 <__ascii_mbtowc+0x1a>
 8009bb4:	b14b      	cbz	r3, 8009bca <__ascii_mbtowc+0x1e>
 8009bb6:	7813      	ldrb	r3, [r2, #0]
 8009bb8:	600b      	str	r3, [r1, #0]
 8009bba:	7812      	ldrb	r2, [r2, #0]
 8009bbc:	1e10      	subs	r0, r2, #0
 8009bbe:	bf18      	it	ne
 8009bc0:	2001      	movne	r0, #1
 8009bc2:	b002      	add	sp, #8
 8009bc4:	4770      	bx	lr
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	e7fb      	b.n	8009bc2 <__ascii_mbtowc+0x16>
 8009bca:	f06f 0001 	mvn.w	r0, #1
 8009bce:	e7f8      	b.n	8009bc2 <__ascii_mbtowc+0x16>

08009bd0 <__malloc_lock>:
 8009bd0:	4801      	ldr	r0, [pc, #4]	; (8009bd8 <__malloc_lock+0x8>)
 8009bd2:	f000 beae 	b.w	800a932 <__retarget_lock_acquire_recursive>
 8009bd6:	bf00      	nop
 8009bd8:	24001118 	.word	0x24001118

08009bdc <__malloc_unlock>:
 8009bdc:	4801      	ldr	r0, [pc, #4]	; (8009be4 <__malloc_unlock+0x8>)
 8009bde:	f000 bea9 	b.w	800a934 <__retarget_lock_release_recursive>
 8009be2:	bf00      	nop
 8009be4:	24001118 	.word	0x24001118

08009be8 <_Balloc>:
 8009be8:	b570      	push	{r4, r5, r6, lr}
 8009bea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bec:	4604      	mov	r4, r0
 8009bee:	460d      	mov	r5, r1
 8009bf0:	b976      	cbnz	r6, 8009c10 <_Balloc+0x28>
 8009bf2:	2010      	movs	r0, #16
 8009bf4:	f7fd f892 	bl	8006d1c <malloc>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	6260      	str	r0, [r4, #36]	; 0x24
 8009bfc:	b920      	cbnz	r0, 8009c08 <_Balloc+0x20>
 8009bfe:	4b18      	ldr	r3, [pc, #96]	; (8009c60 <_Balloc+0x78>)
 8009c00:	4818      	ldr	r0, [pc, #96]	; (8009c64 <_Balloc+0x7c>)
 8009c02:	2166      	movs	r1, #102	; 0x66
 8009c04:	f000 fe64 	bl	800a8d0 <__assert_func>
 8009c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c0c:	6006      	str	r6, [r0, #0]
 8009c0e:	60c6      	str	r6, [r0, #12]
 8009c10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009c12:	68f3      	ldr	r3, [r6, #12]
 8009c14:	b183      	cbz	r3, 8009c38 <_Balloc+0x50>
 8009c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c1e:	b9b8      	cbnz	r0, 8009c50 <_Balloc+0x68>
 8009c20:	2101      	movs	r1, #1
 8009c22:	fa01 f605 	lsl.w	r6, r1, r5
 8009c26:	1d72      	adds	r2, r6, #5
 8009c28:	0092      	lsls	r2, r2, #2
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f000 fc98 	bl	800a560 <_calloc_r>
 8009c30:	b160      	cbz	r0, 8009c4c <_Balloc+0x64>
 8009c32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c36:	e00e      	b.n	8009c56 <_Balloc+0x6e>
 8009c38:	2221      	movs	r2, #33	; 0x21
 8009c3a:	2104      	movs	r1, #4
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f000 fc8f 	bl	800a560 <_calloc_r>
 8009c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c44:	60f0      	str	r0, [r6, #12]
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1e4      	bne.n	8009c16 <_Balloc+0x2e>
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	bd70      	pop	{r4, r5, r6, pc}
 8009c50:	6802      	ldr	r2, [r0, #0]
 8009c52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c56:	2300      	movs	r3, #0
 8009c58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c5c:	e7f7      	b.n	8009c4e <_Balloc+0x66>
 8009c5e:	bf00      	nop
 8009c60:	080241ae 	.word	0x080241ae
 8009c64:	080242b4 	.word	0x080242b4

08009c68 <_Bfree>:
 8009c68:	b570      	push	{r4, r5, r6, lr}
 8009c6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c6c:	4605      	mov	r5, r0
 8009c6e:	460c      	mov	r4, r1
 8009c70:	b976      	cbnz	r6, 8009c90 <_Bfree+0x28>
 8009c72:	2010      	movs	r0, #16
 8009c74:	f7fd f852 	bl	8006d1c <malloc>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	6268      	str	r0, [r5, #36]	; 0x24
 8009c7c:	b920      	cbnz	r0, 8009c88 <_Bfree+0x20>
 8009c7e:	4b09      	ldr	r3, [pc, #36]	; (8009ca4 <_Bfree+0x3c>)
 8009c80:	4809      	ldr	r0, [pc, #36]	; (8009ca8 <_Bfree+0x40>)
 8009c82:	218a      	movs	r1, #138	; 0x8a
 8009c84:	f000 fe24 	bl	800a8d0 <__assert_func>
 8009c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c8c:	6006      	str	r6, [r0, #0]
 8009c8e:	60c6      	str	r6, [r0, #12]
 8009c90:	b13c      	cbz	r4, 8009ca2 <_Bfree+0x3a>
 8009c92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c94:	6862      	ldr	r2, [r4, #4]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c9c:	6021      	str	r1, [r4, #0]
 8009c9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ca2:	bd70      	pop	{r4, r5, r6, pc}
 8009ca4:	080241ae 	.word	0x080241ae
 8009ca8:	080242b4 	.word	0x080242b4

08009cac <__multadd>:
 8009cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb0:	690e      	ldr	r6, [r1, #16]
 8009cb2:	4607      	mov	r7, r0
 8009cb4:	4698      	mov	r8, r3
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	f101 0014 	add.w	r0, r1, #20
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	6805      	ldr	r5, [r0, #0]
 8009cc0:	b2a9      	uxth	r1, r5
 8009cc2:	fb02 8101 	mla	r1, r2, r1, r8
 8009cc6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009cca:	0c2d      	lsrs	r5, r5, #16
 8009ccc:	fb02 c505 	mla	r5, r2, r5, ip
 8009cd0:	b289      	uxth	r1, r1
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009cd8:	429e      	cmp	r6, r3
 8009cda:	f840 1b04 	str.w	r1, [r0], #4
 8009cde:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009ce2:	dcec      	bgt.n	8009cbe <__multadd+0x12>
 8009ce4:	f1b8 0f00 	cmp.w	r8, #0
 8009ce8:	d022      	beq.n	8009d30 <__multadd+0x84>
 8009cea:	68a3      	ldr	r3, [r4, #8]
 8009cec:	42b3      	cmp	r3, r6
 8009cee:	dc19      	bgt.n	8009d24 <__multadd+0x78>
 8009cf0:	6861      	ldr	r1, [r4, #4]
 8009cf2:	4638      	mov	r0, r7
 8009cf4:	3101      	adds	r1, #1
 8009cf6:	f7ff ff77 	bl	8009be8 <_Balloc>
 8009cfa:	4605      	mov	r5, r0
 8009cfc:	b928      	cbnz	r0, 8009d0a <__multadd+0x5e>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	4b0d      	ldr	r3, [pc, #52]	; (8009d38 <__multadd+0x8c>)
 8009d02:	480e      	ldr	r0, [pc, #56]	; (8009d3c <__multadd+0x90>)
 8009d04:	21b5      	movs	r1, #181	; 0xb5
 8009d06:	f000 fde3 	bl	800a8d0 <__assert_func>
 8009d0a:	6922      	ldr	r2, [r4, #16]
 8009d0c:	3202      	adds	r2, #2
 8009d0e:	f104 010c 	add.w	r1, r4, #12
 8009d12:	0092      	lsls	r2, r2, #2
 8009d14:	300c      	adds	r0, #12
 8009d16:	f7fd f809 	bl	8006d2c <memcpy>
 8009d1a:	4621      	mov	r1, r4
 8009d1c:	4638      	mov	r0, r7
 8009d1e:	f7ff ffa3 	bl	8009c68 <_Bfree>
 8009d22:	462c      	mov	r4, r5
 8009d24:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009d28:	3601      	adds	r6, #1
 8009d2a:	f8c3 8014 	str.w	r8, [r3, #20]
 8009d2e:	6126      	str	r6, [r4, #16]
 8009d30:	4620      	mov	r0, r4
 8009d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d36:	bf00      	nop
 8009d38:	08024224 	.word	0x08024224
 8009d3c:	080242b4 	.word	0x080242b4

08009d40 <__s2b>:
 8009d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d44:	460c      	mov	r4, r1
 8009d46:	4615      	mov	r5, r2
 8009d48:	461f      	mov	r7, r3
 8009d4a:	2209      	movs	r2, #9
 8009d4c:	3308      	adds	r3, #8
 8009d4e:	4606      	mov	r6, r0
 8009d50:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d54:	2100      	movs	r1, #0
 8009d56:	2201      	movs	r2, #1
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	db09      	blt.n	8009d70 <__s2b+0x30>
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	f7ff ff43 	bl	8009be8 <_Balloc>
 8009d62:	b940      	cbnz	r0, 8009d76 <__s2b+0x36>
 8009d64:	4602      	mov	r2, r0
 8009d66:	4b19      	ldr	r3, [pc, #100]	; (8009dcc <__s2b+0x8c>)
 8009d68:	4819      	ldr	r0, [pc, #100]	; (8009dd0 <__s2b+0x90>)
 8009d6a:	21ce      	movs	r1, #206	; 0xce
 8009d6c:	f000 fdb0 	bl	800a8d0 <__assert_func>
 8009d70:	0052      	lsls	r2, r2, #1
 8009d72:	3101      	adds	r1, #1
 8009d74:	e7f0      	b.n	8009d58 <__s2b+0x18>
 8009d76:	9b08      	ldr	r3, [sp, #32]
 8009d78:	6143      	str	r3, [r0, #20]
 8009d7a:	2d09      	cmp	r5, #9
 8009d7c:	f04f 0301 	mov.w	r3, #1
 8009d80:	6103      	str	r3, [r0, #16]
 8009d82:	dd16      	ble.n	8009db2 <__s2b+0x72>
 8009d84:	f104 0909 	add.w	r9, r4, #9
 8009d88:	46c8      	mov	r8, r9
 8009d8a:	442c      	add	r4, r5
 8009d8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009d90:	4601      	mov	r1, r0
 8009d92:	3b30      	subs	r3, #48	; 0x30
 8009d94:	220a      	movs	r2, #10
 8009d96:	4630      	mov	r0, r6
 8009d98:	f7ff ff88 	bl	8009cac <__multadd>
 8009d9c:	45a0      	cmp	r8, r4
 8009d9e:	d1f5      	bne.n	8009d8c <__s2b+0x4c>
 8009da0:	f1a5 0408 	sub.w	r4, r5, #8
 8009da4:	444c      	add	r4, r9
 8009da6:	1b2d      	subs	r5, r5, r4
 8009da8:	1963      	adds	r3, r4, r5
 8009daa:	42bb      	cmp	r3, r7
 8009dac:	db04      	blt.n	8009db8 <__s2b+0x78>
 8009dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009db2:	340a      	adds	r4, #10
 8009db4:	2509      	movs	r5, #9
 8009db6:	e7f6      	b.n	8009da6 <__s2b+0x66>
 8009db8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009dbc:	4601      	mov	r1, r0
 8009dbe:	3b30      	subs	r3, #48	; 0x30
 8009dc0:	220a      	movs	r2, #10
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f7ff ff72 	bl	8009cac <__multadd>
 8009dc8:	e7ee      	b.n	8009da8 <__s2b+0x68>
 8009dca:	bf00      	nop
 8009dcc:	08024224 	.word	0x08024224
 8009dd0:	080242b4 	.word	0x080242b4

08009dd4 <__hi0bits>:
 8009dd4:	0c03      	lsrs	r3, r0, #16
 8009dd6:	041b      	lsls	r3, r3, #16
 8009dd8:	b9d3      	cbnz	r3, 8009e10 <__hi0bits+0x3c>
 8009dda:	0400      	lsls	r0, r0, #16
 8009ddc:	2310      	movs	r3, #16
 8009dde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009de2:	bf04      	itt	eq
 8009de4:	0200      	lsleq	r0, r0, #8
 8009de6:	3308      	addeq	r3, #8
 8009de8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009dec:	bf04      	itt	eq
 8009dee:	0100      	lsleq	r0, r0, #4
 8009df0:	3304      	addeq	r3, #4
 8009df2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009df6:	bf04      	itt	eq
 8009df8:	0080      	lsleq	r0, r0, #2
 8009dfa:	3302      	addeq	r3, #2
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	db05      	blt.n	8009e0c <__hi0bits+0x38>
 8009e00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e04:	f103 0301 	add.w	r3, r3, #1
 8009e08:	bf08      	it	eq
 8009e0a:	2320      	moveq	r3, #32
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	4770      	bx	lr
 8009e10:	2300      	movs	r3, #0
 8009e12:	e7e4      	b.n	8009dde <__hi0bits+0xa>

08009e14 <__lo0bits>:
 8009e14:	6803      	ldr	r3, [r0, #0]
 8009e16:	f013 0207 	ands.w	r2, r3, #7
 8009e1a:	4601      	mov	r1, r0
 8009e1c:	d00b      	beq.n	8009e36 <__lo0bits+0x22>
 8009e1e:	07da      	lsls	r2, r3, #31
 8009e20:	d424      	bmi.n	8009e6c <__lo0bits+0x58>
 8009e22:	0798      	lsls	r0, r3, #30
 8009e24:	bf49      	itett	mi
 8009e26:	085b      	lsrmi	r3, r3, #1
 8009e28:	089b      	lsrpl	r3, r3, #2
 8009e2a:	2001      	movmi	r0, #1
 8009e2c:	600b      	strmi	r3, [r1, #0]
 8009e2e:	bf5c      	itt	pl
 8009e30:	600b      	strpl	r3, [r1, #0]
 8009e32:	2002      	movpl	r0, #2
 8009e34:	4770      	bx	lr
 8009e36:	b298      	uxth	r0, r3
 8009e38:	b9b0      	cbnz	r0, 8009e68 <__lo0bits+0x54>
 8009e3a:	0c1b      	lsrs	r3, r3, #16
 8009e3c:	2010      	movs	r0, #16
 8009e3e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009e42:	bf04      	itt	eq
 8009e44:	0a1b      	lsreq	r3, r3, #8
 8009e46:	3008      	addeq	r0, #8
 8009e48:	071a      	lsls	r2, r3, #28
 8009e4a:	bf04      	itt	eq
 8009e4c:	091b      	lsreq	r3, r3, #4
 8009e4e:	3004      	addeq	r0, #4
 8009e50:	079a      	lsls	r2, r3, #30
 8009e52:	bf04      	itt	eq
 8009e54:	089b      	lsreq	r3, r3, #2
 8009e56:	3002      	addeq	r0, #2
 8009e58:	07da      	lsls	r2, r3, #31
 8009e5a:	d403      	bmi.n	8009e64 <__lo0bits+0x50>
 8009e5c:	085b      	lsrs	r3, r3, #1
 8009e5e:	f100 0001 	add.w	r0, r0, #1
 8009e62:	d005      	beq.n	8009e70 <__lo0bits+0x5c>
 8009e64:	600b      	str	r3, [r1, #0]
 8009e66:	4770      	bx	lr
 8009e68:	4610      	mov	r0, r2
 8009e6a:	e7e8      	b.n	8009e3e <__lo0bits+0x2a>
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	4770      	bx	lr
 8009e70:	2020      	movs	r0, #32
 8009e72:	4770      	bx	lr

08009e74 <__i2b>:
 8009e74:	b510      	push	{r4, lr}
 8009e76:	460c      	mov	r4, r1
 8009e78:	2101      	movs	r1, #1
 8009e7a:	f7ff feb5 	bl	8009be8 <_Balloc>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	b928      	cbnz	r0, 8009e8e <__i2b+0x1a>
 8009e82:	4b05      	ldr	r3, [pc, #20]	; (8009e98 <__i2b+0x24>)
 8009e84:	4805      	ldr	r0, [pc, #20]	; (8009e9c <__i2b+0x28>)
 8009e86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009e8a:	f000 fd21 	bl	800a8d0 <__assert_func>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	6144      	str	r4, [r0, #20]
 8009e92:	6103      	str	r3, [r0, #16]
 8009e94:	bd10      	pop	{r4, pc}
 8009e96:	bf00      	nop
 8009e98:	08024224 	.word	0x08024224
 8009e9c:	080242b4 	.word	0x080242b4

08009ea0 <__multiply>:
 8009ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea4:	4614      	mov	r4, r2
 8009ea6:	690a      	ldr	r2, [r1, #16]
 8009ea8:	6923      	ldr	r3, [r4, #16]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	bfb8      	it	lt
 8009eae:	460b      	movlt	r3, r1
 8009eb0:	460d      	mov	r5, r1
 8009eb2:	bfbc      	itt	lt
 8009eb4:	4625      	movlt	r5, r4
 8009eb6:	461c      	movlt	r4, r3
 8009eb8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009ebc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009ec0:	68ab      	ldr	r3, [r5, #8]
 8009ec2:	6869      	ldr	r1, [r5, #4]
 8009ec4:	eb0a 0709 	add.w	r7, sl, r9
 8009ec8:	42bb      	cmp	r3, r7
 8009eca:	b085      	sub	sp, #20
 8009ecc:	bfb8      	it	lt
 8009ece:	3101      	addlt	r1, #1
 8009ed0:	f7ff fe8a 	bl	8009be8 <_Balloc>
 8009ed4:	b930      	cbnz	r0, 8009ee4 <__multiply+0x44>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	4b42      	ldr	r3, [pc, #264]	; (8009fe4 <__multiply+0x144>)
 8009eda:	4843      	ldr	r0, [pc, #268]	; (8009fe8 <__multiply+0x148>)
 8009edc:	f240 115d 	movw	r1, #349	; 0x15d
 8009ee0:	f000 fcf6 	bl	800a8d0 <__assert_func>
 8009ee4:	f100 0614 	add.w	r6, r0, #20
 8009ee8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009eec:	4633      	mov	r3, r6
 8009eee:	2200      	movs	r2, #0
 8009ef0:	4543      	cmp	r3, r8
 8009ef2:	d31e      	bcc.n	8009f32 <__multiply+0x92>
 8009ef4:	f105 0c14 	add.w	ip, r5, #20
 8009ef8:	f104 0314 	add.w	r3, r4, #20
 8009efc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009f00:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009f04:	9202      	str	r2, [sp, #8]
 8009f06:	ebac 0205 	sub.w	r2, ip, r5
 8009f0a:	3a15      	subs	r2, #21
 8009f0c:	f022 0203 	bic.w	r2, r2, #3
 8009f10:	3204      	adds	r2, #4
 8009f12:	f105 0115 	add.w	r1, r5, #21
 8009f16:	458c      	cmp	ip, r1
 8009f18:	bf38      	it	cc
 8009f1a:	2204      	movcc	r2, #4
 8009f1c:	9201      	str	r2, [sp, #4]
 8009f1e:	9a02      	ldr	r2, [sp, #8]
 8009f20:	9303      	str	r3, [sp, #12]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d808      	bhi.n	8009f38 <__multiply+0x98>
 8009f26:	2f00      	cmp	r7, #0
 8009f28:	dc55      	bgt.n	8009fd6 <__multiply+0x136>
 8009f2a:	6107      	str	r7, [r0, #16]
 8009f2c:	b005      	add	sp, #20
 8009f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f32:	f843 2b04 	str.w	r2, [r3], #4
 8009f36:	e7db      	b.n	8009ef0 <__multiply+0x50>
 8009f38:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f3c:	f1ba 0f00 	cmp.w	sl, #0
 8009f40:	d020      	beq.n	8009f84 <__multiply+0xe4>
 8009f42:	f105 0e14 	add.w	lr, r5, #20
 8009f46:	46b1      	mov	r9, r6
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009f4e:	f8d9 b000 	ldr.w	fp, [r9]
 8009f52:	b2a1      	uxth	r1, r4
 8009f54:	fa1f fb8b 	uxth.w	fp, fp
 8009f58:	fb0a b101 	mla	r1, sl, r1, fp
 8009f5c:	4411      	add	r1, r2
 8009f5e:	f8d9 2000 	ldr.w	r2, [r9]
 8009f62:	0c24      	lsrs	r4, r4, #16
 8009f64:	0c12      	lsrs	r2, r2, #16
 8009f66:	fb0a 2404 	mla	r4, sl, r4, r2
 8009f6a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009f6e:	b289      	uxth	r1, r1
 8009f70:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009f74:	45f4      	cmp	ip, lr
 8009f76:	f849 1b04 	str.w	r1, [r9], #4
 8009f7a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009f7e:	d8e4      	bhi.n	8009f4a <__multiply+0xaa>
 8009f80:	9901      	ldr	r1, [sp, #4]
 8009f82:	5072      	str	r2, [r6, r1]
 8009f84:	9a03      	ldr	r2, [sp, #12]
 8009f86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	f1b9 0f00 	cmp.w	r9, #0
 8009f90:	d01f      	beq.n	8009fd2 <__multiply+0x132>
 8009f92:	6834      	ldr	r4, [r6, #0]
 8009f94:	f105 0114 	add.w	r1, r5, #20
 8009f98:	46b6      	mov	lr, r6
 8009f9a:	f04f 0a00 	mov.w	sl, #0
 8009f9e:	880a      	ldrh	r2, [r1, #0]
 8009fa0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009fa4:	fb09 b202 	mla	r2, r9, r2, fp
 8009fa8:	4492      	add	sl, r2
 8009faa:	b2a4      	uxth	r4, r4
 8009fac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009fb0:	f84e 4b04 	str.w	r4, [lr], #4
 8009fb4:	f851 4b04 	ldr.w	r4, [r1], #4
 8009fb8:	f8be 2000 	ldrh.w	r2, [lr]
 8009fbc:	0c24      	lsrs	r4, r4, #16
 8009fbe:	fb09 2404 	mla	r4, r9, r4, r2
 8009fc2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009fc6:	458c      	cmp	ip, r1
 8009fc8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009fcc:	d8e7      	bhi.n	8009f9e <__multiply+0xfe>
 8009fce:	9a01      	ldr	r2, [sp, #4]
 8009fd0:	50b4      	str	r4, [r6, r2]
 8009fd2:	3604      	adds	r6, #4
 8009fd4:	e7a3      	b.n	8009f1e <__multiply+0x7e>
 8009fd6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1a5      	bne.n	8009f2a <__multiply+0x8a>
 8009fde:	3f01      	subs	r7, #1
 8009fe0:	e7a1      	b.n	8009f26 <__multiply+0x86>
 8009fe2:	bf00      	nop
 8009fe4:	08024224 	.word	0x08024224
 8009fe8:	080242b4 	.word	0x080242b4

08009fec <__pow5mult>:
 8009fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ff0:	4615      	mov	r5, r2
 8009ff2:	f012 0203 	ands.w	r2, r2, #3
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	460f      	mov	r7, r1
 8009ffa:	d007      	beq.n	800a00c <__pow5mult+0x20>
 8009ffc:	4c25      	ldr	r4, [pc, #148]	; (800a094 <__pow5mult+0xa8>)
 8009ffe:	3a01      	subs	r2, #1
 800a000:	2300      	movs	r3, #0
 800a002:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a006:	f7ff fe51 	bl	8009cac <__multadd>
 800a00a:	4607      	mov	r7, r0
 800a00c:	10ad      	asrs	r5, r5, #2
 800a00e:	d03d      	beq.n	800a08c <__pow5mult+0xa0>
 800a010:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a012:	b97c      	cbnz	r4, 800a034 <__pow5mult+0x48>
 800a014:	2010      	movs	r0, #16
 800a016:	f7fc fe81 	bl	8006d1c <malloc>
 800a01a:	4602      	mov	r2, r0
 800a01c:	6270      	str	r0, [r6, #36]	; 0x24
 800a01e:	b928      	cbnz	r0, 800a02c <__pow5mult+0x40>
 800a020:	4b1d      	ldr	r3, [pc, #116]	; (800a098 <__pow5mult+0xac>)
 800a022:	481e      	ldr	r0, [pc, #120]	; (800a09c <__pow5mult+0xb0>)
 800a024:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a028:	f000 fc52 	bl	800a8d0 <__assert_func>
 800a02c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a030:	6004      	str	r4, [r0, #0]
 800a032:	60c4      	str	r4, [r0, #12]
 800a034:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a038:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a03c:	b94c      	cbnz	r4, 800a052 <__pow5mult+0x66>
 800a03e:	f240 2171 	movw	r1, #625	; 0x271
 800a042:	4630      	mov	r0, r6
 800a044:	f7ff ff16 	bl	8009e74 <__i2b>
 800a048:	2300      	movs	r3, #0
 800a04a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a04e:	4604      	mov	r4, r0
 800a050:	6003      	str	r3, [r0, #0]
 800a052:	f04f 0900 	mov.w	r9, #0
 800a056:	07eb      	lsls	r3, r5, #31
 800a058:	d50a      	bpl.n	800a070 <__pow5mult+0x84>
 800a05a:	4639      	mov	r1, r7
 800a05c:	4622      	mov	r2, r4
 800a05e:	4630      	mov	r0, r6
 800a060:	f7ff ff1e 	bl	8009ea0 <__multiply>
 800a064:	4639      	mov	r1, r7
 800a066:	4680      	mov	r8, r0
 800a068:	4630      	mov	r0, r6
 800a06a:	f7ff fdfd 	bl	8009c68 <_Bfree>
 800a06e:	4647      	mov	r7, r8
 800a070:	106d      	asrs	r5, r5, #1
 800a072:	d00b      	beq.n	800a08c <__pow5mult+0xa0>
 800a074:	6820      	ldr	r0, [r4, #0]
 800a076:	b938      	cbnz	r0, 800a088 <__pow5mult+0x9c>
 800a078:	4622      	mov	r2, r4
 800a07a:	4621      	mov	r1, r4
 800a07c:	4630      	mov	r0, r6
 800a07e:	f7ff ff0f 	bl	8009ea0 <__multiply>
 800a082:	6020      	str	r0, [r4, #0]
 800a084:	f8c0 9000 	str.w	r9, [r0]
 800a088:	4604      	mov	r4, r0
 800a08a:	e7e4      	b.n	800a056 <__pow5mult+0x6a>
 800a08c:	4638      	mov	r0, r7
 800a08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a092:	bf00      	nop
 800a094:	08024408 	.word	0x08024408
 800a098:	080241ae 	.word	0x080241ae
 800a09c:	080242b4 	.word	0x080242b4

0800a0a0 <__lshift>:
 800a0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	6849      	ldr	r1, [r1, #4]
 800a0a8:	6923      	ldr	r3, [r4, #16]
 800a0aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0ae:	68a3      	ldr	r3, [r4, #8]
 800a0b0:	4607      	mov	r7, r0
 800a0b2:	4691      	mov	r9, r2
 800a0b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a0b8:	f108 0601 	add.w	r6, r8, #1
 800a0bc:	42b3      	cmp	r3, r6
 800a0be:	db0b      	blt.n	800a0d8 <__lshift+0x38>
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	f7ff fd91 	bl	8009be8 <_Balloc>
 800a0c6:	4605      	mov	r5, r0
 800a0c8:	b948      	cbnz	r0, 800a0de <__lshift+0x3e>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	4b28      	ldr	r3, [pc, #160]	; (800a170 <__lshift+0xd0>)
 800a0ce:	4829      	ldr	r0, [pc, #164]	; (800a174 <__lshift+0xd4>)
 800a0d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a0d4:	f000 fbfc 	bl	800a8d0 <__assert_func>
 800a0d8:	3101      	adds	r1, #1
 800a0da:	005b      	lsls	r3, r3, #1
 800a0dc:	e7ee      	b.n	800a0bc <__lshift+0x1c>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	f100 0114 	add.w	r1, r0, #20
 800a0e4:	f100 0210 	add.w	r2, r0, #16
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	4553      	cmp	r3, sl
 800a0ec:	db33      	blt.n	800a156 <__lshift+0xb6>
 800a0ee:	6920      	ldr	r0, [r4, #16]
 800a0f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0f4:	f104 0314 	add.w	r3, r4, #20
 800a0f8:	f019 091f 	ands.w	r9, r9, #31
 800a0fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a100:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a104:	d02b      	beq.n	800a15e <__lshift+0xbe>
 800a106:	f1c9 0e20 	rsb	lr, r9, #32
 800a10a:	468a      	mov	sl, r1
 800a10c:	2200      	movs	r2, #0
 800a10e:	6818      	ldr	r0, [r3, #0]
 800a110:	fa00 f009 	lsl.w	r0, r0, r9
 800a114:	4302      	orrs	r2, r0
 800a116:	f84a 2b04 	str.w	r2, [sl], #4
 800a11a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a11e:	459c      	cmp	ip, r3
 800a120:	fa22 f20e 	lsr.w	r2, r2, lr
 800a124:	d8f3      	bhi.n	800a10e <__lshift+0x6e>
 800a126:	ebac 0304 	sub.w	r3, ip, r4
 800a12a:	3b15      	subs	r3, #21
 800a12c:	f023 0303 	bic.w	r3, r3, #3
 800a130:	3304      	adds	r3, #4
 800a132:	f104 0015 	add.w	r0, r4, #21
 800a136:	4584      	cmp	ip, r0
 800a138:	bf38      	it	cc
 800a13a:	2304      	movcc	r3, #4
 800a13c:	50ca      	str	r2, [r1, r3]
 800a13e:	b10a      	cbz	r2, 800a144 <__lshift+0xa4>
 800a140:	f108 0602 	add.w	r6, r8, #2
 800a144:	3e01      	subs	r6, #1
 800a146:	4638      	mov	r0, r7
 800a148:	612e      	str	r6, [r5, #16]
 800a14a:	4621      	mov	r1, r4
 800a14c:	f7ff fd8c 	bl	8009c68 <_Bfree>
 800a150:	4628      	mov	r0, r5
 800a152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a156:	f842 0f04 	str.w	r0, [r2, #4]!
 800a15a:	3301      	adds	r3, #1
 800a15c:	e7c5      	b.n	800a0ea <__lshift+0x4a>
 800a15e:	3904      	subs	r1, #4
 800a160:	f853 2b04 	ldr.w	r2, [r3], #4
 800a164:	f841 2f04 	str.w	r2, [r1, #4]!
 800a168:	459c      	cmp	ip, r3
 800a16a:	d8f9      	bhi.n	800a160 <__lshift+0xc0>
 800a16c:	e7ea      	b.n	800a144 <__lshift+0xa4>
 800a16e:	bf00      	nop
 800a170:	08024224 	.word	0x08024224
 800a174:	080242b4 	.word	0x080242b4

0800a178 <__mcmp>:
 800a178:	b530      	push	{r4, r5, lr}
 800a17a:	6902      	ldr	r2, [r0, #16]
 800a17c:	690c      	ldr	r4, [r1, #16]
 800a17e:	1b12      	subs	r2, r2, r4
 800a180:	d10e      	bne.n	800a1a0 <__mcmp+0x28>
 800a182:	f100 0314 	add.w	r3, r0, #20
 800a186:	3114      	adds	r1, #20
 800a188:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a18c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a190:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a194:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a198:	42a5      	cmp	r5, r4
 800a19a:	d003      	beq.n	800a1a4 <__mcmp+0x2c>
 800a19c:	d305      	bcc.n	800a1aa <__mcmp+0x32>
 800a19e:	2201      	movs	r2, #1
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	bd30      	pop	{r4, r5, pc}
 800a1a4:	4283      	cmp	r3, r0
 800a1a6:	d3f3      	bcc.n	800a190 <__mcmp+0x18>
 800a1a8:	e7fa      	b.n	800a1a0 <__mcmp+0x28>
 800a1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ae:	e7f7      	b.n	800a1a0 <__mcmp+0x28>

0800a1b0 <__mdiff>:
 800a1b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	4606      	mov	r6, r0
 800a1b8:	4611      	mov	r1, r2
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	4617      	mov	r7, r2
 800a1be:	f7ff ffdb 	bl	800a178 <__mcmp>
 800a1c2:	1e05      	subs	r5, r0, #0
 800a1c4:	d110      	bne.n	800a1e8 <__mdiff+0x38>
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	f7ff fd0d 	bl	8009be8 <_Balloc>
 800a1ce:	b930      	cbnz	r0, 800a1de <__mdiff+0x2e>
 800a1d0:	4b39      	ldr	r3, [pc, #228]	; (800a2b8 <__mdiff+0x108>)
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	f240 2132 	movw	r1, #562	; 0x232
 800a1d8:	4838      	ldr	r0, [pc, #224]	; (800a2bc <__mdiff+0x10c>)
 800a1da:	f000 fb79 	bl	800a8d0 <__assert_func>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a1e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e8:	bfa4      	itt	ge
 800a1ea:	463b      	movge	r3, r7
 800a1ec:	4627      	movge	r7, r4
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	6879      	ldr	r1, [r7, #4]
 800a1f2:	bfa6      	itte	ge
 800a1f4:	461c      	movge	r4, r3
 800a1f6:	2500      	movge	r5, #0
 800a1f8:	2501      	movlt	r5, #1
 800a1fa:	f7ff fcf5 	bl	8009be8 <_Balloc>
 800a1fe:	b920      	cbnz	r0, 800a20a <__mdiff+0x5a>
 800a200:	4b2d      	ldr	r3, [pc, #180]	; (800a2b8 <__mdiff+0x108>)
 800a202:	4602      	mov	r2, r0
 800a204:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a208:	e7e6      	b.n	800a1d8 <__mdiff+0x28>
 800a20a:	693e      	ldr	r6, [r7, #16]
 800a20c:	60c5      	str	r5, [r0, #12]
 800a20e:	6925      	ldr	r5, [r4, #16]
 800a210:	f107 0114 	add.w	r1, r7, #20
 800a214:	f104 0914 	add.w	r9, r4, #20
 800a218:	f100 0e14 	add.w	lr, r0, #20
 800a21c:	f107 0210 	add.w	r2, r7, #16
 800a220:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a224:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a228:	46f2      	mov	sl, lr
 800a22a:	2700      	movs	r7, #0
 800a22c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a230:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a234:	fa1f f883 	uxth.w	r8, r3
 800a238:	fa17 f78b 	uxtah	r7, r7, fp
 800a23c:	0c1b      	lsrs	r3, r3, #16
 800a23e:	eba7 0808 	sub.w	r8, r7, r8
 800a242:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a246:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a24a:	fa1f f888 	uxth.w	r8, r8
 800a24e:	141f      	asrs	r7, r3, #16
 800a250:	454d      	cmp	r5, r9
 800a252:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a256:	f84a 3b04 	str.w	r3, [sl], #4
 800a25a:	d8e7      	bhi.n	800a22c <__mdiff+0x7c>
 800a25c:	1b2b      	subs	r3, r5, r4
 800a25e:	3b15      	subs	r3, #21
 800a260:	f023 0303 	bic.w	r3, r3, #3
 800a264:	3304      	adds	r3, #4
 800a266:	3415      	adds	r4, #21
 800a268:	42a5      	cmp	r5, r4
 800a26a:	bf38      	it	cc
 800a26c:	2304      	movcc	r3, #4
 800a26e:	4419      	add	r1, r3
 800a270:	4473      	add	r3, lr
 800a272:	469e      	mov	lr, r3
 800a274:	460d      	mov	r5, r1
 800a276:	4565      	cmp	r5, ip
 800a278:	d30e      	bcc.n	800a298 <__mdiff+0xe8>
 800a27a:	f10c 0203 	add.w	r2, ip, #3
 800a27e:	1a52      	subs	r2, r2, r1
 800a280:	f022 0203 	bic.w	r2, r2, #3
 800a284:	3903      	subs	r1, #3
 800a286:	458c      	cmp	ip, r1
 800a288:	bf38      	it	cc
 800a28a:	2200      	movcc	r2, #0
 800a28c:	441a      	add	r2, r3
 800a28e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a292:	b17b      	cbz	r3, 800a2b4 <__mdiff+0x104>
 800a294:	6106      	str	r6, [r0, #16]
 800a296:	e7a5      	b.n	800a1e4 <__mdiff+0x34>
 800a298:	f855 8b04 	ldr.w	r8, [r5], #4
 800a29c:	fa17 f488 	uxtah	r4, r7, r8
 800a2a0:	1422      	asrs	r2, r4, #16
 800a2a2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a2a6:	b2a4      	uxth	r4, r4
 800a2a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a2ac:	f84e 4b04 	str.w	r4, [lr], #4
 800a2b0:	1417      	asrs	r7, r2, #16
 800a2b2:	e7e0      	b.n	800a276 <__mdiff+0xc6>
 800a2b4:	3e01      	subs	r6, #1
 800a2b6:	e7ea      	b.n	800a28e <__mdiff+0xde>
 800a2b8:	08024224 	.word	0x08024224
 800a2bc:	080242b4 	.word	0x080242b4

0800a2c0 <__ulp>:
 800a2c0:	b082      	sub	sp, #8
 800a2c2:	ed8d 0b00 	vstr	d0, [sp]
 800a2c6:	9b01      	ldr	r3, [sp, #4]
 800a2c8:	4912      	ldr	r1, [pc, #72]	; (800a314 <__ulp+0x54>)
 800a2ca:	4019      	ands	r1, r3
 800a2cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a2d0:	2900      	cmp	r1, #0
 800a2d2:	dd05      	ble.n	800a2e0 <__ulp+0x20>
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	ec43 2b10 	vmov	d0, r2, r3
 800a2dc:	b002      	add	sp, #8
 800a2de:	4770      	bx	lr
 800a2e0:	4249      	negs	r1, r1
 800a2e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a2e6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a2ea:	f04f 0200 	mov.w	r2, #0
 800a2ee:	f04f 0300 	mov.w	r3, #0
 800a2f2:	da04      	bge.n	800a2fe <__ulp+0x3e>
 800a2f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a2f8:	fa41 f300 	asr.w	r3, r1, r0
 800a2fc:	e7ec      	b.n	800a2d8 <__ulp+0x18>
 800a2fe:	f1a0 0114 	sub.w	r1, r0, #20
 800a302:	291e      	cmp	r1, #30
 800a304:	bfda      	itte	le
 800a306:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a30a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a30e:	2101      	movgt	r1, #1
 800a310:	460a      	mov	r2, r1
 800a312:	e7e1      	b.n	800a2d8 <__ulp+0x18>
 800a314:	7ff00000 	.word	0x7ff00000

0800a318 <__b2d>:
 800a318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31a:	6905      	ldr	r5, [r0, #16]
 800a31c:	f100 0714 	add.w	r7, r0, #20
 800a320:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a324:	1f2e      	subs	r6, r5, #4
 800a326:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a32a:	4620      	mov	r0, r4
 800a32c:	f7ff fd52 	bl	8009dd4 <__hi0bits>
 800a330:	f1c0 0320 	rsb	r3, r0, #32
 800a334:	280a      	cmp	r0, #10
 800a336:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a3b4 <__b2d+0x9c>
 800a33a:	600b      	str	r3, [r1, #0]
 800a33c:	dc14      	bgt.n	800a368 <__b2d+0x50>
 800a33e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a342:	fa24 f10e 	lsr.w	r1, r4, lr
 800a346:	42b7      	cmp	r7, r6
 800a348:	ea41 030c 	orr.w	r3, r1, ip
 800a34c:	bf34      	ite	cc
 800a34e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a352:	2100      	movcs	r1, #0
 800a354:	3015      	adds	r0, #21
 800a356:	fa04 f000 	lsl.w	r0, r4, r0
 800a35a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a35e:	ea40 0201 	orr.w	r2, r0, r1
 800a362:	ec43 2b10 	vmov	d0, r2, r3
 800a366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a368:	42b7      	cmp	r7, r6
 800a36a:	bf3a      	itte	cc
 800a36c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a370:	f1a5 0608 	subcc.w	r6, r5, #8
 800a374:	2100      	movcs	r1, #0
 800a376:	380b      	subs	r0, #11
 800a378:	d017      	beq.n	800a3aa <__b2d+0x92>
 800a37a:	f1c0 0c20 	rsb	ip, r0, #32
 800a37e:	fa04 f500 	lsl.w	r5, r4, r0
 800a382:	42be      	cmp	r6, r7
 800a384:	fa21 f40c 	lsr.w	r4, r1, ip
 800a388:	ea45 0504 	orr.w	r5, r5, r4
 800a38c:	bf8c      	ite	hi
 800a38e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a392:	2400      	movls	r4, #0
 800a394:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a398:	fa01 f000 	lsl.w	r0, r1, r0
 800a39c:	fa24 f40c 	lsr.w	r4, r4, ip
 800a3a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a3a4:	ea40 0204 	orr.w	r2, r0, r4
 800a3a8:	e7db      	b.n	800a362 <__b2d+0x4a>
 800a3aa:	ea44 030c 	orr.w	r3, r4, ip
 800a3ae:	460a      	mov	r2, r1
 800a3b0:	e7d7      	b.n	800a362 <__b2d+0x4a>
 800a3b2:	bf00      	nop
 800a3b4:	3ff00000 	.word	0x3ff00000

0800a3b8 <__d2b>:
 800a3b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a3bc:	4689      	mov	r9, r1
 800a3be:	2101      	movs	r1, #1
 800a3c0:	ec57 6b10 	vmov	r6, r7, d0
 800a3c4:	4690      	mov	r8, r2
 800a3c6:	f7ff fc0f 	bl	8009be8 <_Balloc>
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	b930      	cbnz	r0, 800a3dc <__d2b+0x24>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	4b25      	ldr	r3, [pc, #148]	; (800a468 <__d2b+0xb0>)
 800a3d2:	4826      	ldr	r0, [pc, #152]	; (800a46c <__d2b+0xb4>)
 800a3d4:	f240 310a 	movw	r1, #778	; 0x30a
 800a3d8:	f000 fa7a 	bl	800a8d0 <__assert_func>
 800a3dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a3e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a3e4:	bb35      	cbnz	r5, 800a434 <__d2b+0x7c>
 800a3e6:	2e00      	cmp	r6, #0
 800a3e8:	9301      	str	r3, [sp, #4]
 800a3ea:	d028      	beq.n	800a43e <__d2b+0x86>
 800a3ec:	4668      	mov	r0, sp
 800a3ee:	9600      	str	r6, [sp, #0]
 800a3f0:	f7ff fd10 	bl	8009e14 <__lo0bits>
 800a3f4:	9900      	ldr	r1, [sp, #0]
 800a3f6:	b300      	cbz	r0, 800a43a <__d2b+0x82>
 800a3f8:	9a01      	ldr	r2, [sp, #4]
 800a3fa:	f1c0 0320 	rsb	r3, r0, #32
 800a3fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a402:	430b      	orrs	r3, r1
 800a404:	40c2      	lsrs	r2, r0
 800a406:	6163      	str	r3, [r4, #20]
 800a408:	9201      	str	r2, [sp, #4]
 800a40a:	9b01      	ldr	r3, [sp, #4]
 800a40c:	61a3      	str	r3, [r4, #24]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	bf14      	ite	ne
 800a412:	2202      	movne	r2, #2
 800a414:	2201      	moveq	r2, #1
 800a416:	6122      	str	r2, [r4, #16]
 800a418:	b1d5      	cbz	r5, 800a450 <__d2b+0x98>
 800a41a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a41e:	4405      	add	r5, r0
 800a420:	f8c9 5000 	str.w	r5, [r9]
 800a424:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a428:	f8c8 0000 	str.w	r0, [r8]
 800a42c:	4620      	mov	r0, r4
 800a42e:	b003      	add	sp, #12
 800a430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a438:	e7d5      	b.n	800a3e6 <__d2b+0x2e>
 800a43a:	6161      	str	r1, [r4, #20]
 800a43c:	e7e5      	b.n	800a40a <__d2b+0x52>
 800a43e:	a801      	add	r0, sp, #4
 800a440:	f7ff fce8 	bl	8009e14 <__lo0bits>
 800a444:	9b01      	ldr	r3, [sp, #4]
 800a446:	6163      	str	r3, [r4, #20]
 800a448:	2201      	movs	r2, #1
 800a44a:	6122      	str	r2, [r4, #16]
 800a44c:	3020      	adds	r0, #32
 800a44e:	e7e3      	b.n	800a418 <__d2b+0x60>
 800a450:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a454:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a458:	f8c9 0000 	str.w	r0, [r9]
 800a45c:	6918      	ldr	r0, [r3, #16]
 800a45e:	f7ff fcb9 	bl	8009dd4 <__hi0bits>
 800a462:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a466:	e7df      	b.n	800a428 <__d2b+0x70>
 800a468:	08024224 	.word	0x08024224
 800a46c:	080242b4 	.word	0x080242b4

0800a470 <__ratio>:
 800a470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a474:	468a      	mov	sl, r1
 800a476:	4669      	mov	r1, sp
 800a478:	4683      	mov	fp, r0
 800a47a:	f7ff ff4d 	bl	800a318 <__b2d>
 800a47e:	a901      	add	r1, sp, #4
 800a480:	4650      	mov	r0, sl
 800a482:	ec59 8b10 	vmov	r8, r9, d0
 800a486:	ee10 6a10 	vmov	r6, s0
 800a48a:	f7ff ff45 	bl	800a318 <__b2d>
 800a48e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a492:	f8da 2010 	ldr.w	r2, [sl, #16]
 800a496:	eba3 0c02 	sub.w	ip, r3, r2
 800a49a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a49e:	1a9b      	subs	r3, r3, r2
 800a4a0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a4a4:	ec55 4b10 	vmov	r4, r5, d0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	ee10 0a10 	vmov	r0, s0
 800a4ae:	bfce      	itee	gt
 800a4b0:	464a      	movgt	r2, r9
 800a4b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a4b6:	462a      	movle	r2, r5
 800a4b8:	464f      	mov	r7, r9
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	bfcc      	ite	gt
 800a4be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a4c2:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a4c6:	ec47 6b17 	vmov	d7, r6, r7
 800a4ca:	ec41 0b16 	vmov	d6, r0, r1
 800a4ce:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800a4d2:	b003      	add	sp, #12
 800a4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a4d8 <__copybits>:
 800a4d8:	3901      	subs	r1, #1
 800a4da:	b570      	push	{r4, r5, r6, lr}
 800a4dc:	1149      	asrs	r1, r1, #5
 800a4de:	6914      	ldr	r4, [r2, #16]
 800a4e0:	3101      	adds	r1, #1
 800a4e2:	f102 0314 	add.w	r3, r2, #20
 800a4e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a4ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a4ee:	1f05      	subs	r5, r0, #4
 800a4f0:	42a3      	cmp	r3, r4
 800a4f2:	d30c      	bcc.n	800a50e <__copybits+0x36>
 800a4f4:	1aa3      	subs	r3, r4, r2
 800a4f6:	3b11      	subs	r3, #17
 800a4f8:	f023 0303 	bic.w	r3, r3, #3
 800a4fc:	3211      	adds	r2, #17
 800a4fe:	42a2      	cmp	r2, r4
 800a500:	bf88      	it	hi
 800a502:	2300      	movhi	r3, #0
 800a504:	4418      	add	r0, r3
 800a506:	2300      	movs	r3, #0
 800a508:	4288      	cmp	r0, r1
 800a50a:	d305      	bcc.n	800a518 <__copybits+0x40>
 800a50c:	bd70      	pop	{r4, r5, r6, pc}
 800a50e:	f853 6b04 	ldr.w	r6, [r3], #4
 800a512:	f845 6f04 	str.w	r6, [r5, #4]!
 800a516:	e7eb      	b.n	800a4f0 <__copybits+0x18>
 800a518:	f840 3b04 	str.w	r3, [r0], #4
 800a51c:	e7f4      	b.n	800a508 <__copybits+0x30>

0800a51e <__any_on>:
 800a51e:	f100 0214 	add.w	r2, r0, #20
 800a522:	6900      	ldr	r0, [r0, #16]
 800a524:	114b      	asrs	r3, r1, #5
 800a526:	4298      	cmp	r0, r3
 800a528:	b510      	push	{r4, lr}
 800a52a:	db11      	blt.n	800a550 <__any_on+0x32>
 800a52c:	dd0a      	ble.n	800a544 <__any_on+0x26>
 800a52e:	f011 011f 	ands.w	r1, r1, #31
 800a532:	d007      	beq.n	800a544 <__any_on+0x26>
 800a534:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a538:	fa24 f001 	lsr.w	r0, r4, r1
 800a53c:	fa00 f101 	lsl.w	r1, r0, r1
 800a540:	428c      	cmp	r4, r1
 800a542:	d10b      	bne.n	800a55c <__any_on+0x3e>
 800a544:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a548:	4293      	cmp	r3, r2
 800a54a:	d803      	bhi.n	800a554 <__any_on+0x36>
 800a54c:	2000      	movs	r0, #0
 800a54e:	bd10      	pop	{r4, pc}
 800a550:	4603      	mov	r3, r0
 800a552:	e7f7      	b.n	800a544 <__any_on+0x26>
 800a554:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a558:	2900      	cmp	r1, #0
 800a55a:	d0f5      	beq.n	800a548 <__any_on+0x2a>
 800a55c:	2001      	movs	r0, #1
 800a55e:	e7f6      	b.n	800a54e <__any_on+0x30>

0800a560 <_calloc_r>:
 800a560:	b513      	push	{r0, r1, r4, lr}
 800a562:	434a      	muls	r2, r1
 800a564:	4611      	mov	r1, r2
 800a566:	9201      	str	r2, [sp, #4]
 800a568:	f7fc fc46 	bl	8006df8 <_malloc_r>
 800a56c:	4604      	mov	r4, r0
 800a56e:	b118      	cbz	r0, 800a578 <_calloc_r+0x18>
 800a570:	9a01      	ldr	r2, [sp, #4]
 800a572:	2100      	movs	r1, #0
 800a574:	f7fc fbe8 	bl	8006d48 <memset>
 800a578:	4620      	mov	r0, r4
 800a57a:	b002      	add	sp, #8
 800a57c:	bd10      	pop	{r4, pc}

0800a57e <_realloc_r>:
 800a57e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a580:	4607      	mov	r7, r0
 800a582:	4614      	mov	r4, r2
 800a584:	460e      	mov	r6, r1
 800a586:	b921      	cbnz	r1, 800a592 <_realloc_r+0x14>
 800a588:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a58c:	4611      	mov	r1, r2
 800a58e:	f7fc bc33 	b.w	8006df8 <_malloc_r>
 800a592:	b922      	cbnz	r2, 800a59e <_realloc_r+0x20>
 800a594:	f7fc fbe0 	bl	8006d58 <_free_r>
 800a598:	4625      	mov	r5, r4
 800a59a:	4628      	mov	r0, r5
 800a59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a59e:	f000 f9e4 	bl	800a96a <_malloc_usable_size_r>
 800a5a2:	42a0      	cmp	r0, r4
 800a5a4:	d20f      	bcs.n	800a5c6 <_realloc_r+0x48>
 800a5a6:	4621      	mov	r1, r4
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	f7fc fc25 	bl	8006df8 <_malloc_r>
 800a5ae:	4605      	mov	r5, r0
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d0f2      	beq.n	800a59a <_realloc_r+0x1c>
 800a5b4:	4631      	mov	r1, r6
 800a5b6:	4622      	mov	r2, r4
 800a5b8:	f7fc fbb8 	bl	8006d2c <memcpy>
 800a5bc:	4631      	mov	r1, r6
 800a5be:	4638      	mov	r0, r7
 800a5c0:	f7fc fbca 	bl	8006d58 <_free_r>
 800a5c4:	e7e9      	b.n	800a59a <_realloc_r+0x1c>
 800a5c6:	4635      	mov	r5, r6
 800a5c8:	e7e7      	b.n	800a59a <_realloc_r+0x1c>

0800a5ca <__ssputs_r>:
 800a5ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ce:	688e      	ldr	r6, [r1, #8]
 800a5d0:	429e      	cmp	r6, r3
 800a5d2:	4682      	mov	sl, r0
 800a5d4:	460c      	mov	r4, r1
 800a5d6:	4690      	mov	r8, r2
 800a5d8:	461f      	mov	r7, r3
 800a5da:	d838      	bhi.n	800a64e <__ssputs_r+0x84>
 800a5dc:	898a      	ldrh	r2, [r1, #12]
 800a5de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5e2:	d032      	beq.n	800a64a <__ssputs_r+0x80>
 800a5e4:	6825      	ldr	r5, [r4, #0]
 800a5e6:	6909      	ldr	r1, [r1, #16]
 800a5e8:	eba5 0901 	sub.w	r9, r5, r1
 800a5ec:	6965      	ldr	r5, [r4, #20]
 800a5ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	444b      	add	r3, r9
 800a5fa:	106d      	asrs	r5, r5, #1
 800a5fc:	429d      	cmp	r5, r3
 800a5fe:	bf38      	it	cc
 800a600:	461d      	movcc	r5, r3
 800a602:	0553      	lsls	r3, r2, #21
 800a604:	d531      	bpl.n	800a66a <__ssputs_r+0xa0>
 800a606:	4629      	mov	r1, r5
 800a608:	f7fc fbf6 	bl	8006df8 <_malloc_r>
 800a60c:	4606      	mov	r6, r0
 800a60e:	b950      	cbnz	r0, 800a626 <__ssputs_r+0x5c>
 800a610:	230c      	movs	r3, #12
 800a612:	f8ca 3000 	str.w	r3, [sl]
 800a616:	89a3      	ldrh	r3, [r4, #12]
 800a618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a61c:	81a3      	strh	r3, [r4, #12]
 800a61e:	f04f 30ff 	mov.w	r0, #4294967295
 800a622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a626:	6921      	ldr	r1, [r4, #16]
 800a628:	464a      	mov	r2, r9
 800a62a:	f7fc fb7f 	bl	8006d2c <memcpy>
 800a62e:	89a3      	ldrh	r3, [r4, #12]
 800a630:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a638:	81a3      	strh	r3, [r4, #12]
 800a63a:	6126      	str	r6, [r4, #16]
 800a63c:	6165      	str	r5, [r4, #20]
 800a63e:	444e      	add	r6, r9
 800a640:	eba5 0509 	sub.w	r5, r5, r9
 800a644:	6026      	str	r6, [r4, #0]
 800a646:	60a5      	str	r5, [r4, #8]
 800a648:	463e      	mov	r6, r7
 800a64a:	42be      	cmp	r6, r7
 800a64c:	d900      	bls.n	800a650 <__ssputs_r+0x86>
 800a64e:	463e      	mov	r6, r7
 800a650:	4632      	mov	r2, r6
 800a652:	6820      	ldr	r0, [r4, #0]
 800a654:	4641      	mov	r1, r8
 800a656:	f000 f96e 	bl	800a936 <memmove>
 800a65a:	68a3      	ldr	r3, [r4, #8]
 800a65c:	6822      	ldr	r2, [r4, #0]
 800a65e:	1b9b      	subs	r3, r3, r6
 800a660:	4432      	add	r2, r6
 800a662:	60a3      	str	r3, [r4, #8]
 800a664:	6022      	str	r2, [r4, #0]
 800a666:	2000      	movs	r0, #0
 800a668:	e7db      	b.n	800a622 <__ssputs_r+0x58>
 800a66a:	462a      	mov	r2, r5
 800a66c:	f7ff ff87 	bl	800a57e <_realloc_r>
 800a670:	4606      	mov	r6, r0
 800a672:	2800      	cmp	r0, #0
 800a674:	d1e1      	bne.n	800a63a <__ssputs_r+0x70>
 800a676:	6921      	ldr	r1, [r4, #16]
 800a678:	4650      	mov	r0, sl
 800a67a:	f7fc fb6d 	bl	8006d58 <_free_r>
 800a67e:	e7c7      	b.n	800a610 <__ssputs_r+0x46>

0800a680 <_svfiprintf_r>:
 800a680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a684:	4698      	mov	r8, r3
 800a686:	898b      	ldrh	r3, [r1, #12]
 800a688:	061b      	lsls	r3, r3, #24
 800a68a:	b09d      	sub	sp, #116	; 0x74
 800a68c:	4607      	mov	r7, r0
 800a68e:	460d      	mov	r5, r1
 800a690:	4614      	mov	r4, r2
 800a692:	d50e      	bpl.n	800a6b2 <_svfiprintf_r+0x32>
 800a694:	690b      	ldr	r3, [r1, #16]
 800a696:	b963      	cbnz	r3, 800a6b2 <_svfiprintf_r+0x32>
 800a698:	2140      	movs	r1, #64	; 0x40
 800a69a:	f7fc fbad 	bl	8006df8 <_malloc_r>
 800a69e:	6028      	str	r0, [r5, #0]
 800a6a0:	6128      	str	r0, [r5, #16]
 800a6a2:	b920      	cbnz	r0, 800a6ae <_svfiprintf_r+0x2e>
 800a6a4:	230c      	movs	r3, #12
 800a6a6:	603b      	str	r3, [r7, #0]
 800a6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ac:	e0d1      	b.n	800a852 <_svfiprintf_r+0x1d2>
 800a6ae:	2340      	movs	r3, #64	; 0x40
 800a6b0:	616b      	str	r3, [r5, #20]
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6b6:	2320      	movs	r3, #32
 800a6b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6c0:	2330      	movs	r3, #48	; 0x30
 800a6c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a86c <_svfiprintf_r+0x1ec>
 800a6c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6ca:	f04f 0901 	mov.w	r9, #1
 800a6ce:	4623      	mov	r3, r4
 800a6d0:	469a      	mov	sl, r3
 800a6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6d6:	b10a      	cbz	r2, 800a6dc <_svfiprintf_r+0x5c>
 800a6d8:	2a25      	cmp	r2, #37	; 0x25
 800a6da:	d1f9      	bne.n	800a6d0 <_svfiprintf_r+0x50>
 800a6dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a6e0:	d00b      	beq.n	800a6fa <_svfiprintf_r+0x7a>
 800a6e2:	465b      	mov	r3, fp
 800a6e4:	4622      	mov	r2, r4
 800a6e6:	4629      	mov	r1, r5
 800a6e8:	4638      	mov	r0, r7
 800a6ea:	f7ff ff6e 	bl	800a5ca <__ssputs_r>
 800a6ee:	3001      	adds	r0, #1
 800a6f0:	f000 80aa 	beq.w	800a848 <_svfiprintf_r+0x1c8>
 800a6f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6f6:	445a      	add	r2, fp
 800a6f8:	9209      	str	r2, [sp, #36]	; 0x24
 800a6fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f000 80a2 	beq.w	800a848 <_svfiprintf_r+0x1c8>
 800a704:	2300      	movs	r3, #0
 800a706:	f04f 32ff 	mov.w	r2, #4294967295
 800a70a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a70e:	f10a 0a01 	add.w	sl, sl, #1
 800a712:	9304      	str	r3, [sp, #16]
 800a714:	9307      	str	r3, [sp, #28]
 800a716:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a71a:	931a      	str	r3, [sp, #104]	; 0x68
 800a71c:	4654      	mov	r4, sl
 800a71e:	2205      	movs	r2, #5
 800a720:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a724:	4851      	ldr	r0, [pc, #324]	; (800a86c <_svfiprintf_r+0x1ec>)
 800a726:	f7f5 fde3 	bl	80002f0 <memchr>
 800a72a:	9a04      	ldr	r2, [sp, #16]
 800a72c:	b9d8      	cbnz	r0, 800a766 <_svfiprintf_r+0xe6>
 800a72e:	06d0      	lsls	r0, r2, #27
 800a730:	bf44      	itt	mi
 800a732:	2320      	movmi	r3, #32
 800a734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a738:	0711      	lsls	r1, r2, #28
 800a73a:	bf44      	itt	mi
 800a73c:	232b      	movmi	r3, #43	; 0x2b
 800a73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a742:	f89a 3000 	ldrb.w	r3, [sl]
 800a746:	2b2a      	cmp	r3, #42	; 0x2a
 800a748:	d015      	beq.n	800a776 <_svfiprintf_r+0xf6>
 800a74a:	9a07      	ldr	r2, [sp, #28]
 800a74c:	4654      	mov	r4, sl
 800a74e:	2000      	movs	r0, #0
 800a750:	f04f 0c0a 	mov.w	ip, #10
 800a754:	4621      	mov	r1, r4
 800a756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a75a:	3b30      	subs	r3, #48	; 0x30
 800a75c:	2b09      	cmp	r3, #9
 800a75e:	d94e      	bls.n	800a7fe <_svfiprintf_r+0x17e>
 800a760:	b1b0      	cbz	r0, 800a790 <_svfiprintf_r+0x110>
 800a762:	9207      	str	r2, [sp, #28]
 800a764:	e014      	b.n	800a790 <_svfiprintf_r+0x110>
 800a766:	eba0 0308 	sub.w	r3, r0, r8
 800a76a:	fa09 f303 	lsl.w	r3, r9, r3
 800a76e:	4313      	orrs	r3, r2
 800a770:	9304      	str	r3, [sp, #16]
 800a772:	46a2      	mov	sl, r4
 800a774:	e7d2      	b.n	800a71c <_svfiprintf_r+0x9c>
 800a776:	9b03      	ldr	r3, [sp, #12]
 800a778:	1d19      	adds	r1, r3, #4
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	9103      	str	r1, [sp, #12]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	bfbb      	ittet	lt
 800a782:	425b      	neglt	r3, r3
 800a784:	f042 0202 	orrlt.w	r2, r2, #2
 800a788:	9307      	strge	r3, [sp, #28]
 800a78a:	9307      	strlt	r3, [sp, #28]
 800a78c:	bfb8      	it	lt
 800a78e:	9204      	strlt	r2, [sp, #16]
 800a790:	7823      	ldrb	r3, [r4, #0]
 800a792:	2b2e      	cmp	r3, #46	; 0x2e
 800a794:	d10c      	bne.n	800a7b0 <_svfiprintf_r+0x130>
 800a796:	7863      	ldrb	r3, [r4, #1]
 800a798:	2b2a      	cmp	r3, #42	; 0x2a
 800a79a:	d135      	bne.n	800a808 <_svfiprintf_r+0x188>
 800a79c:	9b03      	ldr	r3, [sp, #12]
 800a79e:	1d1a      	adds	r2, r3, #4
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	9203      	str	r2, [sp, #12]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	bfb8      	it	lt
 800a7a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7ac:	3402      	adds	r4, #2
 800a7ae:	9305      	str	r3, [sp, #20]
 800a7b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a87c <_svfiprintf_r+0x1fc>
 800a7b4:	7821      	ldrb	r1, [r4, #0]
 800a7b6:	2203      	movs	r2, #3
 800a7b8:	4650      	mov	r0, sl
 800a7ba:	f7f5 fd99 	bl	80002f0 <memchr>
 800a7be:	b140      	cbz	r0, 800a7d2 <_svfiprintf_r+0x152>
 800a7c0:	2340      	movs	r3, #64	; 0x40
 800a7c2:	eba0 000a 	sub.w	r0, r0, sl
 800a7c6:	fa03 f000 	lsl.w	r0, r3, r0
 800a7ca:	9b04      	ldr	r3, [sp, #16]
 800a7cc:	4303      	orrs	r3, r0
 800a7ce:	3401      	adds	r4, #1
 800a7d0:	9304      	str	r3, [sp, #16]
 800a7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7d6:	4826      	ldr	r0, [pc, #152]	; (800a870 <_svfiprintf_r+0x1f0>)
 800a7d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7dc:	2206      	movs	r2, #6
 800a7de:	f7f5 fd87 	bl	80002f0 <memchr>
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	d038      	beq.n	800a858 <_svfiprintf_r+0x1d8>
 800a7e6:	4b23      	ldr	r3, [pc, #140]	; (800a874 <_svfiprintf_r+0x1f4>)
 800a7e8:	bb1b      	cbnz	r3, 800a832 <_svfiprintf_r+0x1b2>
 800a7ea:	9b03      	ldr	r3, [sp, #12]
 800a7ec:	3307      	adds	r3, #7
 800a7ee:	f023 0307 	bic.w	r3, r3, #7
 800a7f2:	3308      	adds	r3, #8
 800a7f4:	9303      	str	r3, [sp, #12]
 800a7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f8:	4433      	add	r3, r6
 800a7fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a7fc:	e767      	b.n	800a6ce <_svfiprintf_r+0x4e>
 800a7fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800a802:	460c      	mov	r4, r1
 800a804:	2001      	movs	r0, #1
 800a806:	e7a5      	b.n	800a754 <_svfiprintf_r+0xd4>
 800a808:	2300      	movs	r3, #0
 800a80a:	3401      	adds	r4, #1
 800a80c:	9305      	str	r3, [sp, #20]
 800a80e:	4619      	mov	r1, r3
 800a810:	f04f 0c0a 	mov.w	ip, #10
 800a814:	4620      	mov	r0, r4
 800a816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a81a:	3a30      	subs	r2, #48	; 0x30
 800a81c:	2a09      	cmp	r2, #9
 800a81e:	d903      	bls.n	800a828 <_svfiprintf_r+0x1a8>
 800a820:	2b00      	cmp	r3, #0
 800a822:	d0c5      	beq.n	800a7b0 <_svfiprintf_r+0x130>
 800a824:	9105      	str	r1, [sp, #20]
 800a826:	e7c3      	b.n	800a7b0 <_svfiprintf_r+0x130>
 800a828:	fb0c 2101 	mla	r1, ip, r1, r2
 800a82c:	4604      	mov	r4, r0
 800a82e:	2301      	movs	r3, #1
 800a830:	e7f0      	b.n	800a814 <_svfiprintf_r+0x194>
 800a832:	ab03      	add	r3, sp, #12
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	462a      	mov	r2, r5
 800a838:	4b0f      	ldr	r3, [pc, #60]	; (800a878 <_svfiprintf_r+0x1f8>)
 800a83a:	a904      	add	r1, sp, #16
 800a83c:	4638      	mov	r0, r7
 800a83e:	f7fc fbc7 	bl	8006fd0 <_printf_float>
 800a842:	1c42      	adds	r2, r0, #1
 800a844:	4606      	mov	r6, r0
 800a846:	d1d6      	bne.n	800a7f6 <_svfiprintf_r+0x176>
 800a848:	89ab      	ldrh	r3, [r5, #12]
 800a84a:	065b      	lsls	r3, r3, #25
 800a84c:	f53f af2c 	bmi.w	800a6a8 <_svfiprintf_r+0x28>
 800a850:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a852:	b01d      	add	sp, #116	; 0x74
 800a854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a858:	ab03      	add	r3, sp, #12
 800a85a:	9300      	str	r3, [sp, #0]
 800a85c:	462a      	mov	r2, r5
 800a85e:	4b06      	ldr	r3, [pc, #24]	; (800a878 <_svfiprintf_r+0x1f8>)
 800a860:	a904      	add	r1, sp, #16
 800a862:	4638      	mov	r0, r7
 800a864:	f7fc fe40 	bl	80074e8 <_printf_i>
 800a868:	e7eb      	b.n	800a842 <_svfiprintf_r+0x1c2>
 800a86a:	bf00      	nop
 800a86c:	08024414 	.word	0x08024414
 800a870:	0802441e 	.word	0x0802441e
 800a874:	08006fd1 	.word	0x08006fd1
 800a878:	0800a5cb 	.word	0x0800a5cb
 800a87c:	0802441a 	.word	0x0802441a

0800a880 <nan>:
 800a880:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a888 <nan+0x8>
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop
 800a888:	00000000 	.word	0x00000000
 800a88c:	7ff80000 	.word	0x7ff80000

0800a890 <strncmp>:
 800a890:	b510      	push	{r4, lr}
 800a892:	b16a      	cbz	r2, 800a8b0 <strncmp+0x20>
 800a894:	3901      	subs	r1, #1
 800a896:	1884      	adds	r4, r0, r2
 800a898:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a89c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d103      	bne.n	800a8ac <strncmp+0x1c>
 800a8a4:	42a0      	cmp	r0, r4
 800a8a6:	d001      	beq.n	800a8ac <strncmp+0x1c>
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d1f5      	bne.n	800a898 <strncmp+0x8>
 800a8ac:	1a98      	subs	r0, r3, r2
 800a8ae:	bd10      	pop	{r4, pc}
 800a8b0:	4610      	mov	r0, r2
 800a8b2:	e7fc      	b.n	800a8ae <strncmp+0x1e>

0800a8b4 <__ascii_wctomb>:
 800a8b4:	b149      	cbz	r1, 800a8ca <__ascii_wctomb+0x16>
 800a8b6:	2aff      	cmp	r2, #255	; 0xff
 800a8b8:	bf85      	ittet	hi
 800a8ba:	238a      	movhi	r3, #138	; 0x8a
 800a8bc:	6003      	strhi	r3, [r0, #0]
 800a8be:	700a      	strbls	r2, [r1, #0]
 800a8c0:	f04f 30ff 	movhi.w	r0, #4294967295
 800a8c4:	bf98      	it	ls
 800a8c6:	2001      	movls	r0, #1
 800a8c8:	4770      	bx	lr
 800a8ca:	4608      	mov	r0, r1
 800a8cc:	4770      	bx	lr
	...

0800a8d0 <__assert_func>:
 800a8d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8d2:	4614      	mov	r4, r2
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	4b09      	ldr	r3, [pc, #36]	; (800a8fc <__assert_func+0x2c>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4605      	mov	r5, r0
 800a8dc:	68d8      	ldr	r0, [r3, #12]
 800a8de:	b14c      	cbz	r4, 800a8f4 <__assert_func+0x24>
 800a8e0:	4b07      	ldr	r3, [pc, #28]	; (800a900 <__assert_func+0x30>)
 800a8e2:	9100      	str	r1, [sp, #0]
 800a8e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8e8:	4906      	ldr	r1, [pc, #24]	; (800a904 <__assert_func+0x34>)
 800a8ea:	462b      	mov	r3, r5
 800a8ec:	f000 f80e 	bl	800a90c <fiprintf>
 800a8f0:	f000 fa5c 	bl	800adac <abort>
 800a8f4:	4b04      	ldr	r3, [pc, #16]	; (800a908 <__assert_func+0x38>)
 800a8f6:	461c      	mov	r4, r3
 800a8f8:	e7f3      	b.n	800a8e2 <__assert_func+0x12>
 800a8fa:	bf00      	nop
 800a8fc:	240007f8 	.word	0x240007f8
 800a900:	08024425 	.word	0x08024425
 800a904:	08024432 	.word	0x08024432
 800a908:	0800b4f2 	.word	0x0800b4f2

0800a90c <fiprintf>:
 800a90c:	b40e      	push	{r1, r2, r3}
 800a90e:	b503      	push	{r0, r1, lr}
 800a910:	4601      	mov	r1, r0
 800a912:	ab03      	add	r3, sp, #12
 800a914:	4805      	ldr	r0, [pc, #20]	; (800a92c <fiprintf+0x20>)
 800a916:	f853 2b04 	ldr.w	r2, [r3], #4
 800a91a:	6800      	ldr	r0, [r0, #0]
 800a91c:	9301      	str	r3, [sp, #4]
 800a91e:	f000 f855 	bl	800a9cc <_vfiprintf_r>
 800a922:	b002      	add	sp, #8
 800a924:	f85d eb04 	ldr.w	lr, [sp], #4
 800a928:	b003      	add	sp, #12
 800a92a:	4770      	bx	lr
 800a92c:	240007f8 	.word	0x240007f8

0800a930 <__retarget_lock_init_recursive>:
 800a930:	4770      	bx	lr

0800a932 <__retarget_lock_acquire_recursive>:
 800a932:	4770      	bx	lr

0800a934 <__retarget_lock_release_recursive>:
 800a934:	4770      	bx	lr

0800a936 <memmove>:
 800a936:	4288      	cmp	r0, r1
 800a938:	b510      	push	{r4, lr}
 800a93a:	eb01 0402 	add.w	r4, r1, r2
 800a93e:	d902      	bls.n	800a946 <memmove+0x10>
 800a940:	4284      	cmp	r4, r0
 800a942:	4623      	mov	r3, r4
 800a944:	d807      	bhi.n	800a956 <memmove+0x20>
 800a946:	1e43      	subs	r3, r0, #1
 800a948:	42a1      	cmp	r1, r4
 800a94a:	d008      	beq.n	800a95e <memmove+0x28>
 800a94c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a950:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a954:	e7f8      	b.n	800a948 <memmove+0x12>
 800a956:	4402      	add	r2, r0
 800a958:	4601      	mov	r1, r0
 800a95a:	428a      	cmp	r2, r1
 800a95c:	d100      	bne.n	800a960 <memmove+0x2a>
 800a95e:	bd10      	pop	{r4, pc}
 800a960:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a964:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a968:	e7f7      	b.n	800a95a <memmove+0x24>

0800a96a <_malloc_usable_size_r>:
 800a96a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a96e:	1f18      	subs	r0, r3, #4
 800a970:	2b00      	cmp	r3, #0
 800a972:	bfbc      	itt	lt
 800a974:	580b      	ldrlt	r3, [r1, r0]
 800a976:	18c0      	addlt	r0, r0, r3
 800a978:	4770      	bx	lr

0800a97a <__sfputc_r>:
 800a97a:	6893      	ldr	r3, [r2, #8]
 800a97c:	3b01      	subs	r3, #1
 800a97e:	2b00      	cmp	r3, #0
 800a980:	b410      	push	{r4}
 800a982:	6093      	str	r3, [r2, #8]
 800a984:	da08      	bge.n	800a998 <__sfputc_r+0x1e>
 800a986:	6994      	ldr	r4, [r2, #24]
 800a988:	42a3      	cmp	r3, r4
 800a98a:	db01      	blt.n	800a990 <__sfputc_r+0x16>
 800a98c:	290a      	cmp	r1, #10
 800a98e:	d103      	bne.n	800a998 <__sfputc_r+0x1e>
 800a990:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a994:	f000 b94a 	b.w	800ac2c <__swbuf_r>
 800a998:	6813      	ldr	r3, [r2, #0]
 800a99a:	1c58      	adds	r0, r3, #1
 800a99c:	6010      	str	r0, [r2, #0]
 800a99e:	7019      	strb	r1, [r3, #0]
 800a9a0:	4608      	mov	r0, r1
 800a9a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <__sfputs_r>:
 800a9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	460f      	mov	r7, r1
 800a9ae:	4614      	mov	r4, r2
 800a9b0:	18d5      	adds	r5, r2, r3
 800a9b2:	42ac      	cmp	r4, r5
 800a9b4:	d101      	bne.n	800a9ba <__sfputs_r+0x12>
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	e007      	b.n	800a9ca <__sfputs_r+0x22>
 800a9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9be:	463a      	mov	r2, r7
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	f7ff ffda 	bl	800a97a <__sfputc_r>
 800a9c6:	1c43      	adds	r3, r0, #1
 800a9c8:	d1f3      	bne.n	800a9b2 <__sfputs_r+0xa>
 800a9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9cc <_vfiprintf_r>:
 800a9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d0:	460d      	mov	r5, r1
 800a9d2:	b09d      	sub	sp, #116	; 0x74
 800a9d4:	4614      	mov	r4, r2
 800a9d6:	4698      	mov	r8, r3
 800a9d8:	4606      	mov	r6, r0
 800a9da:	b118      	cbz	r0, 800a9e4 <_vfiprintf_r+0x18>
 800a9dc:	6983      	ldr	r3, [r0, #24]
 800a9de:	b90b      	cbnz	r3, 800a9e4 <_vfiprintf_r+0x18>
 800a9e0:	f000 fb06 	bl	800aff0 <__sinit>
 800a9e4:	4b89      	ldr	r3, [pc, #548]	; (800ac0c <_vfiprintf_r+0x240>)
 800a9e6:	429d      	cmp	r5, r3
 800a9e8:	d11b      	bne.n	800aa22 <_vfiprintf_r+0x56>
 800a9ea:	6875      	ldr	r5, [r6, #4]
 800a9ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9ee:	07d9      	lsls	r1, r3, #31
 800a9f0:	d405      	bmi.n	800a9fe <_vfiprintf_r+0x32>
 800a9f2:	89ab      	ldrh	r3, [r5, #12]
 800a9f4:	059a      	lsls	r2, r3, #22
 800a9f6:	d402      	bmi.n	800a9fe <_vfiprintf_r+0x32>
 800a9f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9fa:	f7ff ff9a 	bl	800a932 <__retarget_lock_acquire_recursive>
 800a9fe:	89ab      	ldrh	r3, [r5, #12]
 800aa00:	071b      	lsls	r3, r3, #28
 800aa02:	d501      	bpl.n	800aa08 <_vfiprintf_r+0x3c>
 800aa04:	692b      	ldr	r3, [r5, #16]
 800aa06:	b9eb      	cbnz	r3, 800aa44 <_vfiprintf_r+0x78>
 800aa08:	4629      	mov	r1, r5
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f000 f960 	bl	800acd0 <__swsetup_r>
 800aa10:	b1c0      	cbz	r0, 800aa44 <_vfiprintf_r+0x78>
 800aa12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa14:	07dc      	lsls	r4, r3, #31
 800aa16:	d50e      	bpl.n	800aa36 <_vfiprintf_r+0x6a>
 800aa18:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1c:	b01d      	add	sp, #116	; 0x74
 800aa1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa22:	4b7b      	ldr	r3, [pc, #492]	; (800ac10 <_vfiprintf_r+0x244>)
 800aa24:	429d      	cmp	r5, r3
 800aa26:	d101      	bne.n	800aa2c <_vfiprintf_r+0x60>
 800aa28:	68b5      	ldr	r5, [r6, #8]
 800aa2a:	e7df      	b.n	800a9ec <_vfiprintf_r+0x20>
 800aa2c:	4b79      	ldr	r3, [pc, #484]	; (800ac14 <_vfiprintf_r+0x248>)
 800aa2e:	429d      	cmp	r5, r3
 800aa30:	bf08      	it	eq
 800aa32:	68f5      	ldreq	r5, [r6, #12]
 800aa34:	e7da      	b.n	800a9ec <_vfiprintf_r+0x20>
 800aa36:	89ab      	ldrh	r3, [r5, #12]
 800aa38:	0598      	lsls	r0, r3, #22
 800aa3a:	d4ed      	bmi.n	800aa18 <_vfiprintf_r+0x4c>
 800aa3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa3e:	f7ff ff79 	bl	800a934 <__retarget_lock_release_recursive>
 800aa42:	e7e9      	b.n	800aa18 <_vfiprintf_r+0x4c>
 800aa44:	2300      	movs	r3, #0
 800aa46:	9309      	str	r3, [sp, #36]	; 0x24
 800aa48:	2320      	movs	r3, #32
 800aa4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa52:	2330      	movs	r3, #48	; 0x30
 800aa54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ac18 <_vfiprintf_r+0x24c>
 800aa58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa5c:	f04f 0901 	mov.w	r9, #1
 800aa60:	4623      	mov	r3, r4
 800aa62:	469a      	mov	sl, r3
 800aa64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa68:	b10a      	cbz	r2, 800aa6e <_vfiprintf_r+0xa2>
 800aa6a:	2a25      	cmp	r2, #37	; 0x25
 800aa6c:	d1f9      	bne.n	800aa62 <_vfiprintf_r+0x96>
 800aa6e:	ebba 0b04 	subs.w	fp, sl, r4
 800aa72:	d00b      	beq.n	800aa8c <_vfiprintf_r+0xc0>
 800aa74:	465b      	mov	r3, fp
 800aa76:	4622      	mov	r2, r4
 800aa78:	4629      	mov	r1, r5
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	f7ff ff94 	bl	800a9a8 <__sfputs_r>
 800aa80:	3001      	adds	r0, #1
 800aa82:	f000 80aa 	beq.w	800abda <_vfiprintf_r+0x20e>
 800aa86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa88:	445a      	add	r2, fp
 800aa8a:	9209      	str	r2, [sp, #36]	; 0x24
 800aa8c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f000 80a2 	beq.w	800abda <_vfiprintf_r+0x20e>
 800aa96:	2300      	movs	r3, #0
 800aa98:	f04f 32ff 	mov.w	r2, #4294967295
 800aa9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaa0:	f10a 0a01 	add.w	sl, sl, #1
 800aaa4:	9304      	str	r3, [sp, #16]
 800aaa6:	9307      	str	r3, [sp, #28]
 800aaa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aaac:	931a      	str	r3, [sp, #104]	; 0x68
 800aaae:	4654      	mov	r4, sl
 800aab0:	2205      	movs	r2, #5
 800aab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aab6:	4858      	ldr	r0, [pc, #352]	; (800ac18 <_vfiprintf_r+0x24c>)
 800aab8:	f7f5 fc1a 	bl	80002f0 <memchr>
 800aabc:	9a04      	ldr	r2, [sp, #16]
 800aabe:	b9d8      	cbnz	r0, 800aaf8 <_vfiprintf_r+0x12c>
 800aac0:	06d1      	lsls	r1, r2, #27
 800aac2:	bf44      	itt	mi
 800aac4:	2320      	movmi	r3, #32
 800aac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaca:	0713      	lsls	r3, r2, #28
 800aacc:	bf44      	itt	mi
 800aace:	232b      	movmi	r3, #43	; 0x2b
 800aad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aad4:	f89a 3000 	ldrb.w	r3, [sl]
 800aad8:	2b2a      	cmp	r3, #42	; 0x2a
 800aada:	d015      	beq.n	800ab08 <_vfiprintf_r+0x13c>
 800aadc:	9a07      	ldr	r2, [sp, #28]
 800aade:	4654      	mov	r4, sl
 800aae0:	2000      	movs	r0, #0
 800aae2:	f04f 0c0a 	mov.w	ip, #10
 800aae6:	4621      	mov	r1, r4
 800aae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaec:	3b30      	subs	r3, #48	; 0x30
 800aaee:	2b09      	cmp	r3, #9
 800aaf0:	d94e      	bls.n	800ab90 <_vfiprintf_r+0x1c4>
 800aaf2:	b1b0      	cbz	r0, 800ab22 <_vfiprintf_r+0x156>
 800aaf4:	9207      	str	r2, [sp, #28]
 800aaf6:	e014      	b.n	800ab22 <_vfiprintf_r+0x156>
 800aaf8:	eba0 0308 	sub.w	r3, r0, r8
 800aafc:	fa09 f303 	lsl.w	r3, r9, r3
 800ab00:	4313      	orrs	r3, r2
 800ab02:	9304      	str	r3, [sp, #16]
 800ab04:	46a2      	mov	sl, r4
 800ab06:	e7d2      	b.n	800aaae <_vfiprintf_r+0xe2>
 800ab08:	9b03      	ldr	r3, [sp, #12]
 800ab0a:	1d19      	adds	r1, r3, #4
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	9103      	str	r1, [sp, #12]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	bfbb      	ittet	lt
 800ab14:	425b      	neglt	r3, r3
 800ab16:	f042 0202 	orrlt.w	r2, r2, #2
 800ab1a:	9307      	strge	r3, [sp, #28]
 800ab1c:	9307      	strlt	r3, [sp, #28]
 800ab1e:	bfb8      	it	lt
 800ab20:	9204      	strlt	r2, [sp, #16]
 800ab22:	7823      	ldrb	r3, [r4, #0]
 800ab24:	2b2e      	cmp	r3, #46	; 0x2e
 800ab26:	d10c      	bne.n	800ab42 <_vfiprintf_r+0x176>
 800ab28:	7863      	ldrb	r3, [r4, #1]
 800ab2a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab2c:	d135      	bne.n	800ab9a <_vfiprintf_r+0x1ce>
 800ab2e:	9b03      	ldr	r3, [sp, #12]
 800ab30:	1d1a      	adds	r2, r3, #4
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	9203      	str	r2, [sp, #12]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	bfb8      	it	lt
 800ab3a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab3e:	3402      	adds	r4, #2
 800ab40:	9305      	str	r3, [sp, #20]
 800ab42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac28 <_vfiprintf_r+0x25c>
 800ab46:	7821      	ldrb	r1, [r4, #0]
 800ab48:	2203      	movs	r2, #3
 800ab4a:	4650      	mov	r0, sl
 800ab4c:	f7f5 fbd0 	bl	80002f0 <memchr>
 800ab50:	b140      	cbz	r0, 800ab64 <_vfiprintf_r+0x198>
 800ab52:	2340      	movs	r3, #64	; 0x40
 800ab54:	eba0 000a 	sub.w	r0, r0, sl
 800ab58:	fa03 f000 	lsl.w	r0, r3, r0
 800ab5c:	9b04      	ldr	r3, [sp, #16]
 800ab5e:	4303      	orrs	r3, r0
 800ab60:	3401      	adds	r4, #1
 800ab62:	9304      	str	r3, [sp, #16]
 800ab64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab68:	482c      	ldr	r0, [pc, #176]	; (800ac1c <_vfiprintf_r+0x250>)
 800ab6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab6e:	2206      	movs	r2, #6
 800ab70:	f7f5 fbbe 	bl	80002f0 <memchr>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d03f      	beq.n	800abf8 <_vfiprintf_r+0x22c>
 800ab78:	4b29      	ldr	r3, [pc, #164]	; (800ac20 <_vfiprintf_r+0x254>)
 800ab7a:	bb1b      	cbnz	r3, 800abc4 <_vfiprintf_r+0x1f8>
 800ab7c:	9b03      	ldr	r3, [sp, #12]
 800ab7e:	3307      	adds	r3, #7
 800ab80:	f023 0307 	bic.w	r3, r3, #7
 800ab84:	3308      	adds	r3, #8
 800ab86:	9303      	str	r3, [sp, #12]
 800ab88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab8a:	443b      	add	r3, r7
 800ab8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab8e:	e767      	b.n	800aa60 <_vfiprintf_r+0x94>
 800ab90:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab94:	460c      	mov	r4, r1
 800ab96:	2001      	movs	r0, #1
 800ab98:	e7a5      	b.n	800aae6 <_vfiprintf_r+0x11a>
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	3401      	adds	r4, #1
 800ab9e:	9305      	str	r3, [sp, #20]
 800aba0:	4619      	mov	r1, r3
 800aba2:	f04f 0c0a 	mov.w	ip, #10
 800aba6:	4620      	mov	r0, r4
 800aba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abac:	3a30      	subs	r2, #48	; 0x30
 800abae:	2a09      	cmp	r2, #9
 800abb0:	d903      	bls.n	800abba <_vfiprintf_r+0x1ee>
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d0c5      	beq.n	800ab42 <_vfiprintf_r+0x176>
 800abb6:	9105      	str	r1, [sp, #20]
 800abb8:	e7c3      	b.n	800ab42 <_vfiprintf_r+0x176>
 800abba:	fb0c 2101 	mla	r1, ip, r1, r2
 800abbe:	4604      	mov	r4, r0
 800abc0:	2301      	movs	r3, #1
 800abc2:	e7f0      	b.n	800aba6 <_vfiprintf_r+0x1da>
 800abc4:	ab03      	add	r3, sp, #12
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	462a      	mov	r2, r5
 800abca:	4b16      	ldr	r3, [pc, #88]	; (800ac24 <_vfiprintf_r+0x258>)
 800abcc:	a904      	add	r1, sp, #16
 800abce:	4630      	mov	r0, r6
 800abd0:	f7fc f9fe 	bl	8006fd0 <_printf_float>
 800abd4:	4607      	mov	r7, r0
 800abd6:	1c78      	adds	r0, r7, #1
 800abd8:	d1d6      	bne.n	800ab88 <_vfiprintf_r+0x1bc>
 800abda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abdc:	07d9      	lsls	r1, r3, #31
 800abde:	d405      	bmi.n	800abec <_vfiprintf_r+0x220>
 800abe0:	89ab      	ldrh	r3, [r5, #12]
 800abe2:	059a      	lsls	r2, r3, #22
 800abe4:	d402      	bmi.n	800abec <_vfiprintf_r+0x220>
 800abe6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abe8:	f7ff fea4 	bl	800a934 <__retarget_lock_release_recursive>
 800abec:	89ab      	ldrh	r3, [r5, #12]
 800abee:	065b      	lsls	r3, r3, #25
 800abf0:	f53f af12 	bmi.w	800aa18 <_vfiprintf_r+0x4c>
 800abf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abf6:	e711      	b.n	800aa1c <_vfiprintf_r+0x50>
 800abf8:	ab03      	add	r3, sp, #12
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	462a      	mov	r2, r5
 800abfe:	4b09      	ldr	r3, [pc, #36]	; (800ac24 <_vfiprintf_r+0x258>)
 800ac00:	a904      	add	r1, sp, #16
 800ac02:	4630      	mov	r0, r6
 800ac04:	f7fc fc70 	bl	80074e8 <_printf_i>
 800ac08:	e7e4      	b.n	800abd4 <_vfiprintf_r+0x208>
 800ac0a:	bf00      	nop
 800ac0c:	08024484 	.word	0x08024484
 800ac10:	080244a4 	.word	0x080244a4
 800ac14:	08024464 	.word	0x08024464
 800ac18:	08024414 	.word	0x08024414
 800ac1c:	0802441e 	.word	0x0802441e
 800ac20:	08006fd1 	.word	0x08006fd1
 800ac24:	0800a9a9 	.word	0x0800a9a9
 800ac28:	0802441a 	.word	0x0802441a

0800ac2c <__swbuf_r>:
 800ac2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac2e:	460e      	mov	r6, r1
 800ac30:	4614      	mov	r4, r2
 800ac32:	4605      	mov	r5, r0
 800ac34:	b118      	cbz	r0, 800ac3e <__swbuf_r+0x12>
 800ac36:	6983      	ldr	r3, [r0, #24]
 800ac38:	b90b      	cbnz	r3, 800ac3e <__swbuf_r+0x12>
 800ac3a:	f000 f9d9 	bl	800aff0 <__sinit>
 800ac3e:	4b21      	ldr	r3, [pc, #132]	; (800acc4 <__swbuf_r+0x98>)
 800ac40:	429c      	cmp	r4, r3
 800ac42:	d12b      	bne.n	800ac9c <__swbuf_r+0x70>
 800ac44:	686c      	ldr	r4, [r5, #4]
 800ac46:	69a3      	ldr	r3, [r4, #24]
 800ac48:	60a3      	str	r3, [r4, #8]
 800ac4a:	89a3      	ldrh	r3, [r4, #12]
 800ac4c:	071a      	lsls	r2, r3, #28
 800ac4e:	d52f      	bpl.n	800acb0 <__swbuf_r+0x84>
 800ac50:	6923      	ldr	r3, [r4, #16]
 800ac52:	b36b      	cbz	r3, 800acb0 <__swbuf_r+0x84>
 800ac54:	6923      	ldr	r3, [r4, #16]
 800ac56:	6820      	ldr	r0, [r4, #0]
 800ac58:	1ac0      	subs	r0, r0, r3
 800ac5a:	6963      	ldr	r3, [r4, #20]
 800ac5c:	b2f6      	uxtb	r6, r6
 800ac5e:	4283      	cmp	r3, r0
 800ac60:	4637      	mov	r7, r6
 800ac62:	dc04      	bgt.n	800ac6e <__swbuf_r+0x42>
 800ac64:	4621      	mov	r1, r4
 800ac66:	4628      	mov	r0, r5
 800ac68:	f000 f92e 	bl	800aec8 <_fflush_r>
 800ac6c:	bb30      	cbnz	r0, 800acbc <__swbuf_r+0x90>
 800ac6e:	68a3      	ldr	r3, [r4, #8]
 800ac70:	3b01      	subs	r3, #1
 800ac72:	60a3      	str	r3, [r4, #8]
 800ac74:	6823      	ldr	r3, [r4, #0]
 800ac76:	1c5a      	adds	r2, r3, #1
 800ac78:	6022      	str	r2, [r4, #0]
 800ac7a:	701e      	strb	r6, [r3, #0]
 800ac7c:	6963      	ldr	r3, [r4, #20]
 800ac7e:	3001      	adds	r0, #1
 800ac80:	4283      	cmp	r3, r0
 800ac82:	d004      	beq.n	800ac8e <__swbuf_r+0x62>
 800ac84:	89a3      	ldrh	r3, [r4, #12]
 800ac86:	07db      	lsls	r3, r3, #31
 800ac88:	d506      	bpl.n	800ac98 <__swbuf_r+0x6c>
 800ac8a:	2e0a      	cmp	r6, #10
 800ac8c:	d104      	bne.n	800ac98 <__swbuf_r+0x6c>
 800ac8e:	4621      	mov	r1, r4
 800ac90:	4628      	mov	r0, r5
 800ac92:	f000 f919 	bl	800aec8 <_fflush_r>
 800ac96:	b988      	cbnz	r0, 800acbc <__swbuf_r+0x90>
 800ac98:	4638      	mov	r0, r7
 800ac9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac9c:	4b0a      	ldr	r3, [pc, #40]	; (800acc8 <__swbuf_r+0x9c>)
 800ac9e:	429c      	cmp	r4, r3
 800aca0:	d101      	bne.n	800aca6 <__swbuf_r+0x7a>
 800aca2:	68ac      	ldr	r4, [r5, #8]
 800aca4:	e7cf      	b.n	800ac46 <__swbuf_r+0x1a>
 800aca6:	4b09      	ldr	r3, [pc, #36]	; (800accc <__swbuf_r+0xa0>)
 800aca8:	429c      	cmp	r4, r3
 800acaa:	bf08      	it	eq
 800acac:	68ec      	ldreq	r4, [r5, #12]
 800acae:	e7ca      	b.n	800ac46 <__swbuf_r+0x1a>
 800acb0:	4621      	mov	r1, r4
 800acb2:	4628      	mov	r0, r5
 800acb4:	f000 f80c 	bl	800acd0 <__swsetup_r>
 800acb8:	2800      	cmp	r0, #0
 800acba:	d0cb      	beq.n	800ac54 <__swbuf_r+0x28>
 800acbc:	f04f 37ff 	mov.w	r7, #4294967295
 800acc0:	e7ea      	b.n	800ac98 <__swbuf_r+0x6c>
 800acc2:	bf00      	nop
 800acc4:	08024484 	.word	0x08024484
 800acc8:	080244a4 	.word	0x080244a4
 800accc:	08024464 	.word	0x08024464

0800acd0 <__swsetup_r>:
 800acd0:	4b32      	ldr	r3, [pc, #200]	; (800ad9c <__swsetup_r+0xcc>)
 800acd2:	b570      	push	{r4, r5, r6, lr}
 800acd4:	681d      	ldr	r5, [r3, #0]
 800acd6:	4606      	mov	r6, r0
 800acd8:	460c      	mov	r4, r1
 800acda:	b125      	cbz	r5, 800ace6 <__swsetup_r+0x16>
 800acdc:	69ab      	ldr	r3, [r5, #24]
 800acde:	b913      	cbnz	r3, 800ace6 <__swsetup_r+0x16>
 800ace0:	4628      	mov	r0, r5
 800ace2:	f000 f985 	bl	800aff0 <__sinit>
 800ace6:	4b2e      	ldr	r3, [pc, #184]	; (800ada0 <__swsetup_r+0xd0>)
 800ace8:	429c      	cmp	r4, r3
 800acea:	d10f      	bne.n	800ad0c <__swsetup_r+0x3c>
 800acec:	686c      	ldr	r4, [r5, #4]
 800acee:	89a3      	ldrh	r3, [r4, #12]
 800acf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acf4:	0719      	lsls	r1, r3, #28
 800acf6:	d42c      	bmi.n	800ad52 <__swsetup_r+0x82>
 800acf8:	06dd      	lsls	r5, r3, #27
 800acfa:	d411      	bmi.n	800ad20 <__swsetup_r+0x50>
 800acfc:	2309      	movs	r3, #9
 800acfe:	6033      	str	r3, [r6, #0]
 800ad00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad04:	81a3      	strh	r3, [r4, #12]
 800ad06:	f04f 30ff 	mov.w	r0, #4294967295
 800ad0a:	e03e      	b.n	800ad8a <__swsetup_r+0xba>
 800ad0c:	4b25      	ldr	r3, [pc, #148]	; (800ada4 <__swsetup_r+0xd4>)
 800ad0e:	429c      	cmp	r4, r3
 800ad10:	d101      	bne.n	800ad16 <__swsetup_r+0x46>
 800ad12:	68ac      	ldr	r4, [r5, #8]
 800ad14:	e7eb      	b.n	800acee <__swsetup_r+0x1e>
 800ad16:	4b24      	ldr	r3, [pc, #144]	; (800ada8 <__swsetup_r+0xd8>)
 800ad18:	429c      	cmp	r4, r3
 800ad1a:	bf08      	it	eq
 800ad1c:	68ec      	ldreq	r4, [r5, #12]
 800ad1e:	e7e6      	b.n	800acee <__swsetup_r+0x1e>
 800ad20:	0758      	lsls	r0, r3, #29
 800ad22:	d512      	bpl.n	800ad4a <__swsetup_r+0x7a>
 800ad24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad26:	b141      	cbz	r1, 800ad3a <__swsetup_r+0x6a>
 800ad28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad2c:	4299      	cmp	r1, r3
 800ad2e:	d002      	beq.n	800ad36 <__swsetup_r+0x66>
 800ad30:	4630      	mov	r0, r6
 800ad32:	f7fc f811 	bl	8006d58 <_free_r>
 800ad36:	2300      	movs	r3, #0
 800ad38:	6363      	str	r3, [r4, #52]	; 0x34
 800ad3a:	89a3      	ldrh	r3, [r4, #12]
 800ad3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad40:	81a3      	strh	r3, [r4, #12]
 800ad42:	2300      	movs	r3, #0
 800ad44:	6063      	str	r3, [r4, #4]
 800ad46:	6923      	ldr	r3, [r4, #16]
 800ad48:	6023      	str	r3, [r4, #0]
 800ad4a:	89a3      	ldrh	r3, [r4, #12]
 800ad4c:	f043 0308 	orr.w	r3, r3, #8
 800ad50:	81a3      	strh	r3, [r4, #12]
 800ad52:	6923      	ldr	r3, [r4, #16]
 800ad54:	b94b      	cbnz	r3, 800ad6a <__swsetup_r+0x9a>
 800ad56:	89a3      	ldrh	r3, [r4, #12]
 800ad58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad60:	d003      	beq.n	800ad6a <__swsetup_r+0x9a>
 800ad62:	4621      	mov	r1, r4
 800ad64:	4630      	mov	r0, r6
 800ad66:	f000 fa05 	bl	800b174 <__smakebuf_r>
 800ad6a:	89a0      	ldrh	r0, [r4, #12]
 800ad6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad70:	f010 0301 	ands.w	r3, r0, #1
 800ad74:	d00a      	beq.n	800ad8c <__swsetup_r+0xbc>
 800ad76:	2300      	movs	r3, #0
 800ad78:	60a3      	str	r3, [r4, #8]
 800ad7a:	6963      	ldr	r3, [r4, #20]
 800ad7c:	425b      	negs	r3, r3
 800ad7e:	61a3      	str	r3, [r4, #24]
 800ad80:	6923      	ldr	r3, [r4, #16]
 800ad82:	b943      	cbnz	r3, 800ad96 <__swsetup_r+0xc6>
 800ad84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad88:	d1ba      	bne.n	800ad00 <__swsetup_r+0x30>
 800ad8a:	bd70      	pop	{r4, r5, r6, pc}
 800ad8c:	0781      	lsls	r1, r0, #30
 800ad8e:	bf58      	it	pl
 800ad90:	6963      	ldrpl	r3, [r4, #20]
 800ad92:	60a3      	str	r3, [r4, #8]
 800ad94:	e7f4      	b.n	800ad80 <__swsetup_r+0xb0>
 800ad96:	2000      	movs	r0, #0
 800ad98:	e7f7      	b.n	800ad8a <__swsetup_r+0xba>
 800ad9a:	bf00      	nop
 800ad9c:	240007f8 	.word	0x240007f8
 800ada0:	08024484 	.word	0x08024484
 800ada4:	080244a4 	.word	0x080244a4
 800ada8:	08024464 	.word	0x08024464

0800adac <abort>:
 800adac:	b508      	push	{r3, lr}
 800adae:	2006      	movs	r0, #6
 800adb0:	f000 fa48 	bl	800b244 <raise>
 800adb4:	2001      	movs	r0, #1
 800adb6:	f000 fb4d 	bl	800b454 <_exit>
	...

0800adbc <__sflush_r>:
 800adbc:	898a      	ldrh	r2, [r1, #12]
 800adbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adc2:	4605      	mov	r5, r0
 800adc4:	0710      	lsls	r0, r2, #28
 800adc6:	460c      	mov	r4, r1
 800adc8:	d458      	bmi.n	800ae7c <__sflush_r+0xc0>
 800adca:	684b      	ldr	r3, [r1, #4]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	dc05      	bgt.n	800addc <__sflush_r+0x20>
 800add0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800add2:	2b00      	cmp	r3, #0
 800add4:	dc02      	bgt.n	800addc <__sflush_r+0x20>
 800add6:	2000      	movs	r0, #0
 800add8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800addc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adde:	2e00      	cmp	r6, #0
 800ade0:	d0f9      	beq.n	800add6 <__sflush_r+0x1a>
 800ade2:	2300      	movs	r3, #0
 800ade4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ade8:	682f      	ldr	r7, [r5, #0]
 800adea:	602b      	str	r3, [r5, #0]
 800adec:	d032      	beq.n	800ae54 <__sflush_r+0x98>
 800adee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800adf0:	89a3      	ldrh	r3, [r4, #12]
 800adf2:	075a      	lsls	r2, r3, #29
 800adf4:	d505      	bpl.n	800ae02 <__sflush_r+0x46>
 800adf6:	6863      	ldr	r3, [r4, #4]
 800adf8:	1ac0      	subs	r0, r0, r3
 800adfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adfc:	b10b      	cbz	r3, 800ae02 <__sflush_r+0x46>
 800adfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae00:	1ac0      	subs	r0, r0, r3
 800ae02:	2300      	movs	r3, #0
 800ae04:	4602      	mov	r2, r0
 800ae06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae08:	6a21      	ldr	r1, [r4, #32]
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	47b0      	blx	r6
 800ae0e:	1c43      	adds	r3, r0, #1
 800ae10:	89a3      	ldrh	r3, [r4, #12]
 800ae12:	d106      	bne.n	800ae22 <__sflush_r+0x66>
 800ae14:	6829      	ldr	r1, [r5, #0]
 800ae16:	291d      	cmp	r1, #29
 800ae18:	d82c      	bhi.n	800ae74 <__sflush_r+0xb8>
 800ae1a:	4a2a      	ldr	r2, [pc, #168]	; (800aec4 <__sflush_r+0x108>)
 800ae1c:	40ca      	lsrs	r2, r1
 800ae1e:	07d6      	lsls	r6, r2, #31
 800ae20:	d528      	bpl.n	800ae74 <__sflush_r+0xb8>
 800ae22:	2200      	movs	r2, #0
 800ae24:	6062      	str	r2, [r4, #4]
 800ae26:	04d9      	lsls	r1, r3, #19
 800ae28:	6922      	ldr	r2, [r4, #16]
 800ae2a:	6022      	str	r2, [r4, #0]
 800ae2c:	d504      	bpl.n	800ae38 <__sflush_r+0x7c>
 800ae2e:	1c42      	adds	r2, r0, #1
 800ae30:	d101      	bne.n	800ae36 <__sflush_r+0x7a>
 800ae32:	682b      	ldr	r3, [r5, #0]
 800ae34:	b903      	cbnz	r3, 800ae38 <__sflush_r+0x7c>
 800ae36:	6560      	str	r0, [r4, #84]	; 0x54
 800ae38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae3a:	602f      	str	r7, [r5, #0]
 800ae3c:	2900      	cmp	r1, #0
 800ae3e:	d0ca      	beq.n	800add6 <__sflush_r+0x1a>
 800ae40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae44:	4299      	cmp	r1, r3
 800ae46:	d002      	beq.n	800ae4e <__sflush_r+0x92>
 800ae48:	4628      	mov	r0, r5
 800ae4a:	f7fb ff85 	bl	8006d58 <_free_r>
 800ae4e:	2000      	movs	r0, #0
 800ae50:	6360      	str	r0, [r4, #52]	; 0x34
 800ae52:	e7c1      	b.n	800add8 <__sflush_r+0x1c>
 800ae54:	6a21      	ldr	r1, [r4, #32]
 800ae56:	2301      	movs	r3, #1
 800ae58:	4628      	mov	r0, r5
 800ae5a:	47b0      	blx	r6
 800ae5c:	1c41      	adds	r1, r0, #1
 800ae5e:	d1c7      	bne.n	800adf0 <__sflush_r+0x34>
 800ae60:	682b      	ldr	r3, [r5, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d0c4      	beq.n	800adf0 <__sflush_r+0x34>
 800ae66:	2b1d      	cmp	r3, #29
 800ae68:	d001      	beq.n	800ae6e <__sflush_r+0xb2>
 800ae6a:	2b16      	cmp	r3, #22
 800ae6c:	d101      	bne.n	800ae72 <__sflush_r+0xb6>
 800ae6e:	602f      	str	r7, [r5, #0]
 800ae70:	e7b1      	b.n	800add6 <__sflush_r+0x1a>
 800ae72:	89a3      	ldrh	r3, [r4, #12]
 800ae74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae78:	81a3      	strh	r3, [r4, #12]
 800ae7a:	e7ad      	b.n	800add8 <__sflush_r+0x1c>
 800ae7c:	690f      	ldr	r7, [r1, #16]
 800ae7e:	2f00      	cmp	r7, #0
 800ae80:	d0a9      	beq.n	800add6 <__sflush_r+0x1a>
 800ae82:	0793      	lsls	r3, r2, #30
 800ae84:	680e      	ldr	r6, [r1, #0]
 800ae86:	bf08      	it	eq
 800ae88:	694b      	ldreq	r3, [r1, #20]
 800ae8a:	600f      	str	r7, [r1, #0]
 800ae8c:	bf18      	it	ne
 800ae8e:	2300      	movne	r3, #0
 800ae90:	eba6 0807 	sub.w	r8, r6, r7
 800ae94:	608b      	str	r3, [r1, #8]
 800ae96:	f1b8 0f00 	cmp.w	r8, #0
 800ae9a:	dd9c      	ble.n	800add6 <__sflush_r+0x1a>
 800ae9c:	6a21      	ldr	r1, [r4, #32]
 800ae9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aea0:	4643      	mov	r3, r8
 800aea2:	463a      	mov	r2, r7
 800aea4:	4628      	mov	r0, r5
 800aea6:	47b0      	blx	r6
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	dc06      	bgt.n	800aeba <__sflush_r+0xfe>
 800aeac:	89a3      	ldrh	r3, [r4, #12]
 800aeae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeb2:	81a3      	strh	r3, [r4, #12]
 800aeb4:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb8:	e78e      	b.n	800add8 <__sflush_r+0x1c>
 800aeba:	4407      	add	r7, r0
 800aebc:	eba8 0800 	sub.w	r8, r8, r0
 800aec0:	e7e9      	b.n	800ae96 <__sflush_r+0xda>
 800aec2:	bf00      	nop
 800aec4:	20400001 	.word	0x20400001

0800aec8 <_fflush_r>:
 800aec8:	b538      	push	{r3, r4, r5, lr}
 800aeca:	690b      	ldr	r3, [r1, #16]
 800aecc:	4605      	mov	r5, r0
 800aece:	460c      	mov	r4, r1
 800aed0:	b913      	cbnz	r3, 800aed8 <_fflush_r+0x10>
 800aed2:	2500      	movs	r5, #0
 800aed4:	4628      	mov	r0, r5
 800aed6:	bd38      	pop	{r3, r4, r5, pc}
 800aed8:	b118      	cbz	r0, 800aee2 <_fflush_r+0x1a>
 800aeda:	6983      	ldr	r3, [r0, #24]
 800aedc:	b90b      	cbnz	r3, 800aee2 <_fflush_r+0x1a>
 800aede:	f000 f887 	bl	800aff0 <__sinit>
 800aee2:	4b14      	ldr	r3, [pc, #80]	; (800af34 <_fflush_r+0x6c>)
 800aee4:	429c      	cmp	r4, r3
 800aee6:	d11b      	bne.n	800af20 <_fflush_r+0x58>
 800aee8:	686c      	ldr	r4, [r5, #4]
 800aeea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d0ef      	beq.n	800aed2 <_fflush_r+0xa>
 800aef2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aef4:	07d0      	lsls	r0, r2, #31
 800aef6:	d404      	bmi.n	800af02 <_fflush_r+0x3a>
 800aef8:	0599      	lsls	r1, r3, #22
 800aefa:	d402      	bmi.n	800af02 <_fflush_r+0x3a>
 800aefc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aefe:	f7ff fd18 	bl	800a932 <__retarget_lock_acquire_recursive>
 800af02:	4628      	mov	r0, r5
 800af04:	4621      	mov	r1, r4
 800af06:	f7ff ff59 	bl	800adbc <__sflush_r>
 800af0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af0c:	07da      	lsls	r2, r3, #31
 800af0e:	4605      	mov	r5, r0
 800af10:	d4e0      	bmi.n	800aed4 <_fflush_r+0xc>
 800af12:	89a3      	ldrh	r3, [r4, #12]
 800af14:	059b      	lsls	r3, r3, #22
 800af16:	d4dd      	bmi.n	800aed4 <_fflush_r+0xc>
 800af18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af1a:	f7ff fd0b 	bl	800a934 <__retarget_lock_release_recursive>
 800af1e:	e7d9      	b.n	800aed4 <_fflush_r+0xc>
 800af20:	4b05      	ldr	r3, [pc, #20]	; (800af38 <_fflush_r+0x70>)
 800af22:	429c      	cmp	r4, r3
 800af24:	d101      	bne.n	800af2a <_fflush_r+0x62>
 800af26:	68ac      	ldr	r4, [r5, #8]
 800af28:	e7df      	b.n	800aeea <_fflush_r+0x22>
 800af2a:	4b04      	ldr	r3, [pc, #16]	; (800af3c <_fflush_r+0x74>)
 800af2c:	429c      	cmp	r4, r3
 800af2e:	bf08      	it	eq
 800af30:	68ec      	ldreq	r4, [r5, #12]
 800af32:	e7da      	b.n	800aeea <_fflush_r+0x22>
 800af34:	08024484 	.word	0x08024484
 800af38:	080244a4 	.word	0x080244a4
 800af3c:	08024464 	.word	0x08024464

0800af40 <std>:
 800af40:	2300      	movs	r3, #0
 800af42:	b510      	push	{r4, lr}
 800af44:	4604      	mov	r4, r0
 800af46:	e9c0 3300 	strd	r3, r3, [r0]
 800af4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af4e:	6083      	str	r3, [r0, #8]
 800af50:	8181      	strh	r1, [r0, #12]
 800af52:	6643      	str	r3, [r0, #100]	; 0x64
 800af54:	81c2      	strh	r2, [r0, #14]
 800af56:	6183      	str	r3, [r0, #24]
 800af58:	4619      	mov	r1, r3
 800af5a:	2208      	movs	r2, #8
 800af5c:	305c      	adds	r0, #92	; 0x5c
 800af5e:	f7fb fef3 	bl	8006d48 <memset>
 800af62:	4b05      	ldr	r3, [pc, #20]	; (800af78 <std+0x38>)
 800af64:	6263      	str	r3, [r4, #36]	; 0x24
 800af66:	4b05      	ldr	r3, [pc, #20]	; (800af7c <std+0x3c>)
 800af68:	62a3      	str	r3, [r4, #40]	; 0x28
 800af6a:	4b05      	ldr	r3, [pc, #20]	; (800af80 <std+0x40>)
 800af6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af6e:	4b05      	ldr	r3, [pc, #20]	; (800af84 <std+0x44>)
 800af70:	6224      	str	r4, [r4, #32]
 800af72:	6323      	str	r3, [r4, #48]	; 0x30
 800af74:	bd10      	pop	{r4, pc}
 800af76:	bf00      	nop
 800af78:	0800b27d 	.word	0x0800b27d
 800af7c:	0800b29f 	.word	0x0800b29f
 800af80:	0800b2d7 	.word	0x0800b2d7
 800af84:	0800b2fb 	.word	0x0800b2fb

0800af88 <_cleanup_r>:
 800af88:	4901      	ldr	r1, [pc, #4]	; (800af90 <_cleanup_r+0x8>)
 800af8a:	f000 b8af 	b.w	800b0ec <_fwalk_reent>
 800af8e:	bf00      	nop
 800af90:	0800aec9 	.word	0x0800aec9

0800af94 <__sfmoreglue>:
 800af94:	b570      	push	{r4, r5, r6, lr}
 800af96:	1e4a      	subs	r2, r1, #1
 800af98:	2568      	movs	r5, #104	; 0x68
 800af9a:	4355      	muls	r5, r2
 800af9c:	460e      	mov	r6, r1
 800af9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800afa2:	f7fb ff29 	bl	8006df8 <_malloc_r>
 800afa6:	4604      	mov	r4, r0
 800afa8:	b140      	cbz	r0, 800afbc <__sfmoreglue+0x28>
 800afaa:	2100      	movs	r1, #0
 800afac:	e9c0 1600 	strd	r1, r6, [r0]
 800afb0:	300c      	adds	r0, #12
 800afb2:	60a0      	str	r0, [r4, #8]
 800afb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800afb8:	f7fb fec6 	bl	8006d48 <memset>
 800afbc:	4620      	mov	r0, r4
 800afbe:	bd70      	pop	{r4, r5, r6, pc}

0800afc0 <__sfp_lock_acquire>:
 800afc0:	4801      	ldr	r0, [pc, #4]	; (800afc8 <__sfp_lock_acquire+0x8>)
 800afc2:	f7ff bcb6 	b.w	800a932 <__retarget_lock_acquire_recursive>
 800afc6:	bf00      	nop
 800afc8:	2400111c 	.word	0x2400111c

0800afcc <__sfp_lock_release>:
 800afcc:	4801      	ldr	r0, [pc, #4]	; (800afd4 <__sfp_lock_release+0x8>)
 800afce:	f7ff bcb1 	b.w	800a934 <__retarget_lock_release_recursive>
 800afd2:	bf00      	nop
 800afd4:	2400111c 	.word	0x2400111c

0800afd8 <__sinit_lock_acquire>:
 800afd8:	4801      	ldr	r0, [pc, #4]	; (800afe0 <__sinit_lock_acquire+0x8>)
 800afda:	f7ff bcaa 	b.w	800a932 <__retarget_lock_acquire_recursive>
 800afde:	bf00      	nop
 800afe0:	24001117 	.word	0x24001117

0800afe4 <__sinit_lock_release>:
 800afe4:	4801      	ldr	r0, [pc, #4]	; (800afec <__sinit_lock_release+0x8>)
 800afe6:	f7ff bca5 	b.w	800a934 <__retarget_lock_release_recursive>
 800afea:	bf00      	nop
 800afec:	24001117 	.word	0x24001117

0800aff0 <__sinit>:
 800aff0:	b510      	push	{r4, lr}
 800aff2:	4604      	mov	r4, r0
 800aff4:	f7ff fff0 	bl	800afd8 <__sinit_lock_acquire>
 800aff8:	69a3      	ldr	r3, [r4, #24]
 800affa:	b11b      	cbz	r3, 800b004 <__sinit+0x14>
 800affc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b000:	f7ff bff0 	b.w	800afe4 <__sinit_lock_release>
 800b004:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b008:	6523      	str	r3, [r4, #80]	; 0x50
 800b00a:	4b13      	ldr	r3, [pc, #76]	; (800b058 <__sinit+0x68>)
 800b00c:	4a13      	ldr	r2, [pc, #76]	; (800b05c <__sinit+0x6c>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	62a2      	str	r2, [r4, #40]	; 0x28
 800b012:	42a3      	cmp	r3, r4
 800b014:	bf04      	itt	eq
 800b016:	2301      	moveq	r3, #1
 800b018:	61a3      	streq	r3, [r4, #24]
 800b01a:	4620      	mov	r0, r4
 800b01c:	f000 f820 	bl	800b060 <__sfp>
 800b020:	6060      	str	r0, [r4, #4]
 800b022:	4620      	mov	r0, r4
 800b024:	f000 f81c 	bl	800b060 <__sfp>
 800b028:	60a0      	str	r0, [r4, #8]
 800b02a:	4620      	mov	r0, r4
 800b02c:	f000 f818 	bl	800b060 <__sfp>
 800b030:	2200      	movs	r2, #0
 800b032:	60e0      	str	r0, [r4, #12]
 800b034:	2104      	movs	r1, #4
 800b036:	6860      	ldr	r0, [r4, #4]
 800b038:	f7ff ff82 	bl	800af40 <std>
 800b03c:	68a0      	ldr	r0, [r4, #8]
 800b03e:	2201      	movs	r2, #1
 800b040:	2109      	movs	r1, #9
 800b042:	f7ff ff7d 	bl	800af40 <std>
 800b046:	68e0      	ldr	r0, [r4, #12]
 800b048:	2202      	movs	r2, #2
 800b04a:	2112      	movs	r1, #18
 800b04c:	f7ff ff78 	bl	800af40 <std>
 800b050:	2301      	movs	r3, #1
 800b052:	61a3      	str	r3, [r4, #24]
 800b054:	e7d2      	b.n	800affc <__sinit+0xc>
 800b056:	bf00      	nop
 800b058:	08024010 	.word	0x08024010
 800b05c:	0800af89 	.word	0x0800af89

0800b060 <__sfp>:
 800b060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b062:	4607      	mov	r7, r0
 800b064:	f7ff ffac 	bl	800afc0 <__sfp_lock_acquire>
 800b068:	4b1e      	ldr	r3, [pc, #120]	; (800b0e4 <__sfp+0x84>)
 800b06a:	681e      	ldr	r6, [r3, #0]
 800b06c:	69b3      	ldr	r3, [r6, #24]
 800b06e:	b913      	cbnz	r3, 800b076 <__sfp+0x16>
 800b070:	4630      	mov	r0, r6
 800b072:	f7ff ffbd 	bl	800aff0 <__sinit>
 800b076:	3648      	adds	r6, #72	; 0x48
 800b078:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b07c:	3b01      	subs	r3, #1
 800b07e:	d503      	bpl.n	800b088 <__sfp+0x28>
 800b080:	6833      	ldr	r3, [r6, #0]
 800b082:	b30b      	cbz	r3, 800b0c8 <__sfp+0x68>
 800b084:	6836      	ldr	r6, [r6, #0]
 800b086:	e7f7      	b.n	800b078 <__sfp+0x18>
 800b088:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b08c:	b9d5      	cbnz	r5, 800b0c4 <__sfp+0x64>
 800b08e:	4b16      	ldr	r3, [pc, #88]	; (800b0e8 <__sfp+0x88>)
 800b090:	60e3      	str	r3, [r4, #12]
 800b092:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b096:	6665      	str	r5, [r4, #100]	; 0x64
 800b098:	f7ff fc4a 	bl	800a930 <__retarget_lock_init_recursive>
 800b09c:	f7ff ff96 	bl	800afcc <__sfp_lock_release>
 800b0a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b0a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b0a8:	6025      	str	r5, [r4, #0]
 800b0aa:	61a5      	str	r5, [r4, #24]
 800b0ac:	2208      	movs	r2, #8
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b0b4:	f7fb fe48 	bl	8006d48 <memset>
 800b0b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b0bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0c4:	3468      	adds	r4, #104	; 0x68
 800b0c6:	e7d9      	b.n	800b07c <__sfp+0x1c>
 800b0c8:	2104      	movs	r1, #4
 800b0ca:	4638      	mov	r0, r7
 800b0cc:	f7ff ff62 	bl	800af94 <__sfmoreglue>
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	6030      	str	r0, [r6, #0]
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d1d5      	bne.n	800b084 <__sfp+0x24>
 800b0d8:	f7ff ff78 	bl	800afcc <__sfp_lock_release>
 800b0dc:	230c      	movs	r3, #12
 800b0de:	603b      	str	r3, [r7, #0]
 800b0e0:	e7ee      	b.n	800b0c0 <__sfp+0x60>
 800b0e2:	bf00      	nop
 800b0e4:	08024010 	.word	0x08024010
 800b0e8:	ffff0001 	.word	0xffff0001

0800b0ec <_fwalk_reent>:
 800b0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0f0:	4606      	mov	r6, r0
 800b0f2:	4688      	mov	r8, r1
 800b0f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0f8:	2700      	movs	r7, #0
 800b0fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0fe:	f1b9 0901 	subs.w	r9, r9, #1
 800b102:	d505      	bpl.n	800b110 <_fwalk_reent+0x24>
 800b104:	6824      	ldr	r4, [r4, #0]
 800b106:	2c00      	cmp	r4, #0
 800b108:	d1f7      	bne.n	800b0fa <_fwalk_reent+0xe>
 800b10a:	4638      	mov	r0, r7
 800b10c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b110:	89ab      	ldrh	r3, [r5, #12]
 800b112:	2b01      	cmp	r3, #1
 800b114:	d907      	bls.n	800b126 <_fwalk_reent+0x3a>
 800b116:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b11a:	3301      	adds	r3, #1
 800b11c:	d003      	beq.n	800b126 <_fwalk_reent+0x3a>
 800b11e:	4629      	mov	r1, r5
 800b120:	4630      	mov	r0, r6
 800b122:	47c0      	blx	r8
 800b124:	4307      	orrs	r7, r0
 800b126:	3568      	adds	r5, #104	; 0x68
 800b128:	e7e9      	b.n	800b0fe <_fwalk_reent+0x12>

0800b12a <__swhatbuf_r>:
 800b12a:	b570      	push	{r4, r5, r6, lr}
 800b12c:	460e      	mov	r6, r1
 800b12e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b132:	2900      	cmp	r1, #0
 800b134:	b096      	sub	sp, #88	; 0x58
 800b136:	4614      	mov	r4, r2
 800b138:	461d      	mov	r5, r3
 800b13a:	da07      	bge.n	800b14c <__swhatbuf_r+0x22>
 800b13c:	2300      	movs	r3, #0
 800b13e:	602b      	str	r3, [r5, #0]
 800b140:	89b3      	ldrh	r3, [r6, #12]
 800b142:	061a      	lsls	r2, r3, #24
 800b144:	d410      	bmi.n	800b168 <__swhatbuf_r+0x3e>
 800b146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b14a:	e00e      	b.n	800b16a <__swhatbuf_r+0x40>
 800b14c:	466a      	mov	r2, sp
 800b14e:	f000 f8fb 	bl	800b348 <_fstat_r>
 800b152:	2800      	cmp	r0, #0
 800b154:	dbf2      	blt.n	800b13c <__swhatbuf_r+0x12>
 800b156:	9a01      	ldr	r2, [sp, #4]
 800b158:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b15c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b160:	425a      	negs	r2, r3
 800b162:	415a      	adcs	r2, r3
 800b164:	602a      	str	r2, [r5, #0]
 800b166:	e7ee      	b.n	800b146 <__swhatbuf_r+0x1c>
 800b168:	2340      	movs	r3, #64	; 0x40
 800b16a:	2000      	movs	r0, #0
 800b16c:	6023      	str	r3, [r4, #0]
 800b16e:	b016      	add	sp, #88	; 0x58
 800b170:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b174 <__smakebuf_r>:
 800b174:	898b      	ldrh	r3, [r1, #12]
 800b176:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b178:	079d      	lsls	r5, r3, #30
 800b17a:	4606      	mov	r6, r0
 800b17c:	460c      	mov	r4, r1
 800b17e:	d507      	bpl.n	800b190 <__smakebuf_r+0x1c>
 800b180:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b184:	6023      	str	r3, [r4, #0]
 800b186:	6123      	str	r3, [r4, #16]
 800b188:	2301      	movs	r3, #1
 800b18a:	6163      	str	r3, [r4, #20]
 800b18c:	b002      	add	sp, #8
 800b18e:	bd70      	pop	{r4, r5, r6, pc}
 800b190:	ab01      	add	r3, sp, #4
 800b192:	466a      	mov	r2, sp
 800b194:	f7ff ffc9 	bl	800b12a <__swhatbuf_r>
 800b198:	9900      	ldr	r1, [sp, #0]
 800b19a:	4605      	mov	r5, r0
 800b19c:	4630      	mov	r0, r6
 800b19e:	f7fb fe2b 	bl	8006df8 <_malloc_r>
 800b1a2:	b948      	cbnz	r0, 800b1b8 <__smakebuf_r+0x44>
 800b1a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1a8:	059a      	lsls	r2, r3, #22
 800b1aa:	d4ef      	bmi.n	800b18c <__smakebuf_r+0x18>
 800b1ac:	f023 0303 	bic.w	r3, r3, #3
 800b1b0:	f043 0302 	orr.w	r3, r3, #2
 800b1b4:	81a3      	strh	r3, [r4, #12]
 800b1b6:	e7e3      	b.n	800b180 <__smakebuf_r+0xc>
 800b1b8:	4b0d      	ldr	r3, [pc, #52]	; (800b1f0 <__smakebuf_r+0x7c>)
 800b1ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800b1bc:	89a3      	ldrh	r3, [r4, #12]
 800b1be:	6020      	str	r0, [r4, #0]
 800b1c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1c4:	81a3      	strh	r3, [r4, #12]
 800b1c6:	9b00      	ldr	r3, [sp, #0]
 800b1c8:	6163      	str	r3, [r4, #20]
 800b1ca:	9b01      	ldr	r3, [sp, #4]
 800b1cc:	6120      	str	r0, [r4, #16]
 800b1ce:	b15b      	cbz	r3, 800b1e8 <__smakebuf_r+0x74>
 800b1d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	f000 f8c9 	bl	800b36c <_isatty_r>
 800b1da:	b128      	cbz	r0, 800b1e8 <__smakebuf_r+0x74>
 800b1dc:	89a3      	ldrh	r3, [r4, #12]
 800b1de:	f023 0303 	bic.w	r3, r3, #3
 800b1e2:	f043 0301 	orr.w	r3, r3, #1
 800b1e6:	81a3      	strh	r3, [r4, #12]
 800b1e8:	89a0      	ldrh	r0, [r4, #12]
 800b1ea:	4305      	orrs	r5, r0
 800b1ec:	81a5      	strh	r5, [r4, #12]
 800b1ee:	e7cd      	b.n	800b18c <__smakebuf_r+0x18>
 800b1f0:	0800af89 	.word	0x0800af89

0800b1f4 <_raise_r>:
 800b1f4:	291f      	cmp	r1, #31
 800b1f6:	b538      	push	{r3, r4, r5, lr}
 800b1f8:	4604      	mov	r4, r0
 800b1fa:	460d      	mov	r5, r1
 800b1fc:	d904      	bls.n	800b208 <_raise_r+0x14>
 800b1fe:	2316      	movs	r3, #22
 800b200:	6003      	str	r3, [r0, #0]
 800b202:	f04f 30ff 	mov.w	r0, #4294967295
 800b206:	bd38      	pop	{r3, r4, r5, pc}
 800b208:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b20a:	b112      	cbz	r2, 800b212 <_raise_r+0x1e>
 800b20c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b210:	b94b      	cbnz	r3, 800b226 <_raise_r+0x32>
 800b212:	4620      	mov	r0, r4
 800b214:	f000 f830 	bl	800b278 <_getpid_r>
 800b218:	462a      	mov	r2, r5
 800b21a:	4601      	mov	r1, r0
 800b21c:	4620      	mov	r0, r4
 800b21e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b222:	f000 b817 	b.w	800b254 <_kill_r>
 800b226:	2b01      	cmp	r3, #1
 800b228:	d00a      	beq.n	800b240 <_raise_r+0x4c>
 800b22a:	1c59      	adds	r1, r3, #1
 800b22c:	d103      	bne.n	800b236 <_raise_r+0x42>
 800b22e:	2316      	movs	r3, #22
 800b230:	6003      	str	r3, [r0, #0]
 800b232:	2001      	movs	r0, #1
 800b234:	e7e7      	b.n	800b206 <_raise_r+0x12>
 800b236:	2400      	movs	r4, #0
 800b238:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b23c:	4628      	mov	r0, r5
 800b23e:	4798      	blx	r3
 800b240:	2000      	movs	r0, #0
 800b242:	e7e0      	b.n	800b206 <_raise_r+0x12>

0800b244 <raise>:
 800b244:	4b02      	ldr	r3, [pc, #8]	; (800b250 <raise+0xc>)
 800b246:	4601      	mov	r1, r0
 800b248:	6818      	ldr	r0, [r3, #0]
 800b24a:	f7ff bfd3 	b.w	800b1f4 <_raise_r>
 800b24e:	bf00      	nop
 800b250:	240007f8 	.word	0x240007f8

0800b254 <_kill_r>:
 800b254:	b538      	push	{r3, r4, r5, lr}
 800b256:	4d07      	ldr	r5, [pc, #28]	; (800b274 <_kill_r+0x20>)
 800b258:	2300      	movs	r3, #0
 800b25a:	4604      	mov	r4, r0
 800b25c:	4608      	mov	r0, r1
 800b25e:	4611      	mov	r1, r2
 800b260:	602b      	str	r3, [r5, #0]
 800b262:	f000 f8d7 	bl	800b414 <_kill>
 800b266:	1c43      	adds	r3, r0, #1
 800b268:	d102      	bne.n	800b270 <_kill_r+0x1c>
 800b26a:	682b      	ldr	r3, [r5, #0]
 800b26c:	b103      	cbz	r3, 800b270 <_kill_r+0x1c>
 800b26e:	6023      	str	r3, [r4, #0]
 800b270:	bd38      	pop	{r3, r4, r5, pc}
 800b272:	bf00      	nop
 800b274:	24001110 	.word	0x24001110

0800b278 <_getpid_r>:
 800b278:	f000 b8bc 	b.w	800b3f4 <_getpid>

0800b27c <__sread>:
 800b27c:	b510      	push	{r4, lr}
 800b27e:	460c      	mov	r4, r1
 800b280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b284:	f000 f894 	bl	800b3b0 <_read_r>
 800b288:	2800      	cmp	r0, #0
 800b28a:	bfab      	itete	ge
 800b28c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b28e:	89a3      	ldrhlt	r3, [r4, #12]
 800b290:	181b      	addge	r3, r3, r0
 800b292:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b296:	bfac      	ite	ge
 800b298:	6563      	strge	r3, [r4, #84]	; 0x54
 800b29a:	81a3      	strhlt	r3, [r4, #12]
 800b29c:	bd10      	pop	{r4, pc}

0800b29e <__swrite>:
 800b29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a2:	461f      	mov	r7, r3
 800b2a4:	898b      	ldrh	r3, [r1, #12]
 800b2a6:	05db      	lsls	r3, r3, #23
 800b2a8:	4605      	mov	r5, r0
 800b2aa:	460c      	mov	r4, r1
 800b2ac:	4616      	mov	r6, r2
 800b2ae:	d505      	bpl.n	800b2bc <__swrite+0x1e>
 800b2b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2b4:	2302      	movs	r3, #2
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f000 f868 	bl	800b38c <_lseek_r>
 800b2bc:	89a3      	ldrh	r3, [r4, #12]
 800b2be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2c6:	81a3      	strh	r3, [r4, #12]
 800b2c8:	4632      	mov	r2, r6
 800b2ca:	463b      	mov	r3, r7
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d2:	f000 b817 	b.w	800b304 <_write_r>

0800b2d6 <__sseek>:
 800b2d6:	b510      	push	{r4, lr}
 800b2d8:	460c      	mov	r4, r1
 800b2da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2de:	f000 f855 	bl	800b38c <_lseek_r>
 800b2e2:	1c43      	adds	r3, r0, #1
 800b2e4:	89a3      	ldrh	r3, [r4, #12]
 800b2e6:	bf15      	itete	ne
 800b2e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2f2:	81a3      	strheq	r3, [r4, #12]
 800b2f4:	bf18      	it	ne
 800b2f6:	81a3      	strhne	r3, [r4, #12]
 800b2f8:	bd10      	pop	{r4, pc}

0800b2fa <__sclose>:
 800b2fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2fe:	f000 b813 	b.w	800b328 <_close_r>
	...

0800b304 <_write_r>:
 800b304:	b538      	push	{r3, r4, r5, lr}
 800b306:	4d07      	ldr	r5, [pc, #28]	; (800b324 <_write_r+0x20>)
 800b308:	4604      	mov	r4, r0
 800b30a:	4608      	mov	r0, r1
 800b30c:	4611      	mov	r1, r2
 800b30e:	2200      	movs	r2, #0
 800b310:	602a      	str	r2, [r5, #0]
 800b312:	461a      	mov	r2, r3
 800b314:	f000 f896 	bl	800b444 <_write>
 800b318:	1c43      	adds	r3, r0, #1
 800b31a:	d102      	bne.n	800b322 <_write_r+0x1e>
 800b31c:	682b      	ldr	r3, [r5, #0]
 800b31e:	b103      	cbz	r3, 800b322 <_write_r+0x1e>
 800b320:	6023      	str	r3, [r4, #0]
 800b322:	bd38      	pop	{r3, r4, r5, pc}
 800b324:	24001110 	.word	0x24001110

0800b328 <_close_r>:
 800b328:	b538      	push	{r3, r4, r5, lr}
 800b32a:	4d06      	ldr	r5, [pc, #24]	; (800b344 <_close_r+0x1c>)
 800b32c:	2300      	movs	r3, #0
 800b32e:	4604      	mov	r4, r0
 800b330:	4608      	mov	r0, r1
 800b332:	602b      	str	r3, [r5, #0]
 800b334:	f000 f84e 	bl	800b3d4 <_close>
 800b338:	1c43      	adds	r3, r0, #1
 800b33a:	d102      	bne.n	800b342 <_close_r+0x1a>
 800b33c:	682b      	ldr	r3, [r5, #0]
 800b33e:	b103      	cbz	r3, 800b342 <_close_r+0x1a>
 800b340:	6023      	str	r3, [r4, #0]
 800b342:	bd38      	pop	{r3, r4, r5, pc}
 800b344:	24001110 	.word	0x24001110

0800b348 <_fstat_r>:
 800b348:	b538      	push	{r3, r4, r5, lr}
 800b34a:	4d07      	ldr	r5, [pc, #28]	; (800b368 <_fstat_r+0x20>)
 800b34c:	2300      	movs	r3, #0
 800b34e:	4604      	mov	r4, r0
 800b350:	4608      	mov	r0, r1
 800b352:	4611      	mov	r1, r2
 800b354:	602b      	str	r3, [r5, #0]
 800b356:	f000 f845 	bl	800b3e4 <_fstat>
 800b35a:	1c43      	adds	r3, r0, #1
 800b35c:	d102      	bne.n	800b364 <_fstat_r+0x1c>
 800b35e:	682b      	ldr	r3, [r5, #0]
 800b360:	b103      	cbz	r3, 800b364 <_fstat_r+0x1c>
 800b362:	6023      	str	r3, [r4, #0]
 800b364:	bd38      	pop	{r3, r4, r5, pc}
 800b366:	bf00      	nop
 800b368:	24001110 	.word	0x24001110

0800b36c <_isatty_r>:
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	4d06      	ldr	r5, [pc, #24]	; (800b388 <_isatty_r+0x1c>)
 800b370:	2300      	movs	r3, #0
 800b372:	4604      	mov	r4, r0
 800b374:	4608      	mov	r0, r1
 800b376:	602b      	str	r3, [r5, #0]
 800b378:	f000 f844 	bl	800b404 <_isatty>
 800b37c:	1c43      	adds	r3, r0, #1
 800b37e:	d102      	bne.n	800b386 <_isatty_r+0x1a>
 800b380:	682b      	ldr	r3, [r5, #0]
 800b382:	b103      	cbz	r3, 800b386 <_isatty_r+0x1a>
 800b384:	6023      	str	r3, [r4, #0]
 800b386:	bd38      	pop	{r3, r4, r5, pc}
 800b388:	24001110 	.word	0x24001110

0800b38c <_lseek_r>:
 800b38c:	b538      	push	{r3, r4, r5, lr}
 800b38e:	4d07      	ldr	r5, [pc, #28]	; (800b3ac <_lseek_r+0x20>)
 800b390:	4604      	mov	r4, r0
 800b392:	4608      	mov	r0, r1
 800b394:	4611      	mov	r1, r2
 800b396:	2200      	movs	r2, #0
 800b398:	602a      	str	r2, [r5, #0]
 800b39a:	461a      	mov	r2, r3
 800b39c:	f000 f842 	bl	800b424 <_lseek>
 800b3a0:	1c43      	adds	r3, r0, #1
 800b3a2:	d102      	bne.n	800b3aa <_lseek_r+0x1e>
 800b3a4:	682b      	ldr	r3, [r5, #0]
 800b3a6:	b103      	cbz	r3, 800b3aa <_lseek_r+0x1e>
 800b3a8:	6023      	str	r3, [r4, #0]
 800b3aa:	bd38      	pop	{r3, r4, r5, pc}
 800b3ac:	24001110 	.word	0x24001110

0800b3b0 <_read_r>:
 800b3b0:	b538      	push	{r3, r4, r5, lr}
 800b3b2:	4d07      	ldr	r5, [pc, #28]	; (800b3d0 <_read_r+0x20>)
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	4608      	mov	r0, r1
 800b3b8:	4611      	mov	r1, r2
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	602a      	str	r2, [r5, #0]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	f000 f838 	bl	800b434 <_read>
 800b3c4:	1c43      	adds	r3, r0, #1
 800b3c6:	d102      	bne.n	800b3ce <_read_r+0x1e>
 800b3c8:	682b      	ldr	r3, [r5, #0]
 800b3ca:	b103      	cbz	r3, 800b3ce <_read_r+0x1e>
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	bd38      	pop	{r3, r4, r5, pc}
 800b3d0:	24001110 	.word	0x24001110

0800b3d4 <_close>:
 800b3d4:	4b02      	ldr	r3, [pc, #8]	; (800b3e0 <_close+0xc>)
 800b3d6:	2258      	movs	r2, #88	; 0x58
 800b3d8:	601a      	str	r2, [r3, #0]
 800b3da:	f04f 30ff 	mov.w	r0, #4294967295
 800b3de:	4770      	bx	lr
 800b3e0:	24001110 	.word	0x24001110

0800b3e4 <_fstat>:
 800b3e4:	4b02      	ldr	r3, [pc, #8]	; (800b3f0 <_fstat+0xc>)
 800b3e6:	2258      	movs	r2, #88	; 0x58
 800b3e8:	601a      	str	r2, [r3, #0]
 800b3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ee:	4770      	bx	lr
 800b3f0:	24001110 	.word	0x24001110

0800b3f4 <_getpid>:
 800b3f4:	4b02      	ldr	r3, [pc, #8]	; (800b400 <_getpid+0xc>)
 800b3f6:	2258      	movs	r2, #88	; 0x58
 800b3f8:	601a      	str	r2, [r3, #0]
 800b3fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b3fe:	4770      	bx	lr
 800b400:	24001110 	.word	0x24001110

0800b404 <_isatty>:
 800b404:	4b02      	ldr	r3, [pc, #8]	; (800b410 <_isatty+0xc>)
 800b406:	2258      	movs	r2, #88	; 0x58
 800b408:	601a      	str	r2, [r3, #0]
 800b40a:	2000      	movs	r0, #0
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	24001110 	.word	0x24001110

0800b414 <_kill>:
 800b414:	4b02      	ldr	r3, [pc, #8]	; (800b420 <_kill+0xc>)
 800b416:	2258      	movs	r2, #88	; 0x58
 800b418:	601a      	str	r2, [r3, #0]
 800b41a:	f04f 30ff 	mov.w	r0, #4294967295
 800b41e:	4770      	bx	lr
 800b420:	24001110 	.word	0x24001110

0800b424 <_lseek>:
 800b424:	4b02      	ldr	r3, [pc, #8]	; (800b430 <_lseek+0xc>)
 800b426:	2258      	movs	r2, #88	; 0x58
 800b428:	601a      	str	r2, [r3, #0]
 800b42a:	f04f 30ff 	mov.w	r0, #4294967295
 800b42e:	4770      	bx	lr
 800b430:	24001110 	.word	0x24001110

0800b434 <_read>:
 800b434:	4b02      	ldr	r3, [pc, #8]	; (800b440 <_read+0xc>)
 800b436:	2258      	movs	r2, #88	; 0x58
 800b438:	601a      	str	r2, [r3, #0]
 800b43a:	f04f 30ff 	mov.w	r0, #4294967295
 800b43e:	4770      	bx	lr
 800b440:	24001110 	.word	0x24001110

0800b444 <_write>:
 800b444:	4b02      	ldr	r3, [pc, #8]	; (800b450 <_write+0xc>)
 800b446:	2258      	movs	r2, #88	; 0x58
 800b448:	601a      	str	r2, [r3, #0]
 800b44a:	f04f 30ff 	mov.w	r0, #4294967295
 800b44e:	4770      	bx	lr
 800b450:	24001110 	.word	0x24001110

0800b454 <_exit>:
 800b454:	e7fe      	b.n	800b454 <_exit>
	...

0800b458 <_init>:
 800b458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45a:	bf00      	nop
 800b45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b45e:	bc08      	pop	{r3}
 800b460:	469e      	mov	lr, r3
 800b462:	4770      	bx	lr

0800b464 <_fini>:
 800b464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b466:	bf00      	nop
 800b468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b46a:	bc08      	pop	{r3}
 800b46c:	469e      	mov	lr, r3
 800b46e:	4770      	bx	lr
